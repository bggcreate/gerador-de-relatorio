{"file_contents":{"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/consulta.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nlet eventController;\n\nexport function initConsultaPage() {\n    \n    const formFiltros = document.getElementById('form-filtros-consulta');\n    const tableBody = document.getElementById('tabela-relatorios-corpo');\n    const filtroLoja = document.getElementById('filtro-loja');\n    const filtroInicio = document.getElementById('filtro-data-inicio');\n    const filtroFim = document.getElementById('filtro-data-fim');\n    // ADICIONADO: Seleção do novo filtro de ordem\n    const filtroOrdem = document.getElementById('filtro-ordem');\n    const btnLimpar = document.getElementById('btn-limpar-filtros');\n    const btnCarregarMais = document.getElementById('btn-carregar-mais');\n    const modalViewEl = document.getElementById('modal-visualizar-relatorio');\n    const pageContent = document.getElementById('page-content');\n\n    if (!formFiltros || !modalViewEl) return;\n    const modalView = new bootstrap.Modal(modalViewEl);\n\n    let currentOffset = 0;\n    const limit = 20;\n    let currentReportId = null;\n    let totalReportsCount = 0;\n\n    if (eventController) {\n        eventController.abort();\n    }\n    eventController = new AbortController();\n\n    async function carregarRelatorios(isNewSearch = true) {\n        if (isNewSearch) {\n            currentOffset = 0;\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        }\n        btnCarregarMais.disabled = true;\n        btnCarregarMais.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Carregando...';\n\n        const params = new URLSearchParams();\n        if (filtroLoja.value) params.append('loja', filtroLoja.value);\n        if (filtroInicio.value) params.append('data_inicio', filtroInicio.value);\n        if (filtroFim.value) params.append('data_fim', filtroFim.value);\n        // ADICIONADO: Envio do parâmetro de ordenação para a API\n        params.append('sortOrder', filtroOrdem.value);\n        params.append('limit', limit);\n        params.append('offset', currentOffset);\n\n        try {\n            const response = await fetch(`/api/relatorios?${params.toString()}`);\n            const { relatorios, total } = await response.json();\n\n            if (isNewSearch) {\n                totalReportsCount = total;\n            }\n\n            const formatCurrency = (value) => {\n                const numberValue = Number(value) || 0;\n                return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(numberValue);\n            };\n\n            const newRowsHtml = relatorios.map((r, index) => {\n                // ALTERAÇÃO: Lógica para criar um ID sequencial contínuo\n                const isDescending = filtroOrdem.value === 'desc';\n                const sequentialId = isDescending\n                    ? totalReportsCount - currentOffset - index\n                    : currentOffset + index + 1;\n\n                return `\n                    <tr>\n                        <td class=\"ps-3\">${sequentialId}</td>\n                        <td>${r.loja}</td>\n                        <td>${new Date(r.data).toLocaleDateString('pt-BR', {timeZone: 'UTC'})}</td>\n                        <td>${formatCurrency(r.total_vendas_dinheiro)}</td>\n                        <td class=\"text-end pe-3\">\n                            <div class=\"btn-group btn-group-sm\" role=\"group\">\n                                <button type=\"button\" class=\"btn btn-outline-primary\" data-action=\"visualizar\" data-id=\"${r.id}\" title=\"Visualizar\"><i class=\"bi bi-eye\"></i></button>\n                                <a href=\"/novo-relatorio?edit=${r.id}\" class=\"btn btn-outline-secondary\" title=\"Editar\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                <button type=\"button\" class=\"btn btn-outline-danger\" data-action=\"excluir\" data-id=\"${r.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>\n                            </div>\n                        </td>\n                    </tr>\n                `;\n            }).join('');\n\n            if (isNewSearch) {\n                tableBody.innerHTML = relatorios.length > 0 ? newRowsHtml : '<tr><td colspan=\"5\" class=\"text-center\">Nenhum relatório encontrado.</td></tr>';\n            } else {\n                tableBody.insertAdjacentHTML('beforeend', newRowsHtml);\n            }\n\n            currentOffset += relatorios.length;\n            btnCarregarMais.classList.toggle('d-none', currentOffset >= totalReportsCount);\n\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar relatórios.</td></tr>';\n        } finally {\n            btnCarregarMais.disabled = false;\n            btnCarregarMais.innerHTML = 'Carregar Mais Relatórios';\n        }\n    }\n\n    async function visualizarRelatorio(id) {\n        currentReportId = id;\n        const modalBody = document.getElementById('modal-body-content');\n        const modalLabel = document.getElementById('modal-visualizar-label');\n        modalLabel.textContent = `Carregando Relatório...`;\n        modalBody.innerHTML = '<div class=\"d-flex justify-content-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n        modalView.show();\n\n        try {\n            const response = await fetch(`/api/relatorios/${id}/pdf`);\n            if (!response.ok) throw new Error(\"Não foi possível gerar a visualização do PDF.\");\n            const fileBlob = await response.blob();\n            const fileURL = URL.createObjectURL(fileBlob);\n            modalLabel.textContent = `Visualizar Relatório #${id}`;\n            modalBody.innerHTML = `<iframe src=\"${fileURL}\" style=\"width: 100%; height: 70vh; border: none;\"></iframe>`;\n        } catch (e) {\n            modalBody.innerHTML = `<div class=\"p-3 text-center text-danger\"><h3>Oops!</h3><p>Não foi possível carregar a visualização.</p></div>`;\n            showToast('Erro', e.message, 'danger');\n        }\n    }\n\n    async function excluirRelatorio(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir o relatório #${id}?`);\n        if (!confirmed) return;\n        try {\n            const response = await fetch(`/api/relatorios/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir o relatório.');\n            showToast('Sucesso', 'Relatório excluído com sucesso.', 'success');\n            carregarRelatorios(true);\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir o relatório.', 'danger');\n        }\n    }\n\n    async function carregarLojasNoFiltro() {\n        try {\n            const response = await fetch('/api/lojas');\n            const lojas = await response.json();\n            filtroLoja.innerHTML = '<option value=\"\">Todas as Lojas</option>';\n            lojas.forEach(loja => filtroLoja.add(new Option(loja.nome, loja.nome)));\n        } catch (e) {\n            console.error(\"Erro ao carregar lojas:\", e);\n        }\n    }\n    \n    // --- Event Listeners ---\n    document.getElementById('btn-copiar-texto-modal')?.addEventListener('click', async () => {\n    if (!currentReportId) return;\n    try {\n        const response = await fetch(`/api/relatorios/${currentReportId}/txt`);\n        if (!response.ok) throw new Error(\"Falha ao buscar texto para cópia.\");\n        const textToCopy = await response.text();\n        await navigator.clipboard.writeText(textToCopy);\n        showToast('Sucesso!', 'Texto copiado.', 'success');\n    } catch (err) {\n        showToast('Erro', 'Não foi possível copiar o texto.', 'danger');\n    }\n}, { signal: eventController.signal });\n\n    document.getElementById('btn-gerar-pdf-modal')?.addEventListener('click', () => {\n        if (!currentReportId) return;\n        window.open(`/api/relatorios/${currentReportId}/pdf`, '_blank');\n    }, { signal: eventController.signal });\n\n    formFiltros.addEventListener('submit', (e) => { e.preventDefault(); carregarRelatorios(true); }, { signal: eventController.signal });\n    \n    // ADICIONADO: Resetar o filtro de ordem ao limpar\n    btnLimpar.addEventListener('click', () => { \n        formFiltros.reset(); \n        filtroOrdem.value = 'desc'; // Garante que o padrão seja selecionado\n        carregarRelatorios(true); \n    }, { signal: eventController.signal });\n    \n    btnCarregarMais.addEventListener('click', () => carregarRelatorios(false), { signal: eventController.signal });\n\n    pageContent.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button || !button.closest('#tabela-relatorios-corpo')) return;\n        const id = button.dataset.id;\n        const action = button.dataset.action;\n        if (action === 'visualizar') visualizarRelatorio(id);\n        if (action === 'excluir') excluirRelatorio(id);\n    }, { signal: eventController.signal });\n    \n    // ADICIONADO: Event listener para o novo filtro de ordem\n    filtroOrdem.addEventListener('change', () => carregarRelatorios(true), { signal: eventController.signal });\n\n    const formExport = document.getElementById('form-export-excel');\n    const btnExportarTudo = document.getElementById('btn-exportar-tudo');\n\nbtnExportarTudo?.addEventListener('click', async () => {\n  btnExportarTudo.disabled = true;\n  const originalText = btnExportarTudo.innerHTML;\n  btnExportarTudo.innerHTML = `<span class=\"spinner-border spinner-border-sm\"></span> Gerando...`;\n\n  try {\n    const response = await fetch('/api/export/excel-all');\n    if (!response.ok) throw new Error(\"Erro ao gerar o arquivo.\");\n\n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `Relatorios_Completos_${new Date().toLocaleDateString('pt-BR')}.xlsx`;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    window.URL.revokeObjectURL(url);\n\n    showToast(\"Sucesso\", \"Arquivo de todos os relatórios gerado com sucesso!\", \"success\");\n  } catch (err) {\n    console.error(err);\n    showToast(\"Erro\", \"Não foi possível gerar o Excel completo.\", \"danger\");\n  } finally {\n    btnExportarTudo.disabled = false;\n    btnExportarTudo.innerHTML = originalText;\n  }\n});\n    const exportMonthSelect = document.getElementById('export-month');\n    const exportYearSelect = document.getElementById('export-year');\n    \n    if (exportYearSelect.options.length <= 1) {\n        const currentYear = new Date().getFullYear();\n        for (let i = 0; i < 5; i++) {\n            const year = currentYear - i;\n            exportYearSelect.add(new Option(year, year));\n        }\n    }\n    exportMonthSelect.value = new Date().getMonth() + 1;\n\n    formExport.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const btn = e.target.querySelector('button');\n        const originalText = btn.innerHTML;\n        btn.disabled = true;\n        btn.innerHTML = `<span class=\"spinner-border spinner-border-sm\"></span> Gerando...`;\n        \n        try {\n            const response = await fetch(`/api/export/excel?month=${exportMonthSelect.value}&year=${exportYearSelect.value}`);\n            if (response.ok) {\n                const blob = await response.blob();\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                const monthName = new Date(exportYearSelect.value, exportMonthSelect.value - 1).toLocaleString('pt-BR', { month: 'long' });\n                a.download = `Relatorios_${monthName}_${exportYearSelect.value}.xlsx`;\n                a.href = url;\n                a.click();\n                window.URL.revokeObjectURL(url);\n            } else {\n                const result = await response.json();\n                showToast(\"Erro ao Exportar\", result.error || \"Não foi possível gerar.\", \"danger\");\n            }\n        } catch (err) {\n            showToast(\"Erro\", \"Falha na exportação.\", \"danger\");\n        } finally {\n            btn.disabled = false;\n            btn.innerHTML = originalText;\n        }\n    }, { signal: eventController.signal });\n\n    carregarLojasNoFiltro().then(() => carregarRelatorios(true));\n}","size_bytes":12214},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/admin.js":{"content":"import { showToast } from '../utils.js';\n\n// --- Variáveis de Estado Globais no Módulo ---\nlet dashboardLineChart = null;\nlet lastRankingData = [];\n\n// --- Funções Auxiliares ---\nconst getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\nconst toISODateString = (date) => date.toISOString().split('T')[0];\n\nfunction setLoadingState(isLoading) {\n    const kpiElements = document.querySelectorAll('[id^=\"geral-\"], [id^=\"loja-\"]');\n    const chartCanvas = document.getElementById('dashboard-line-chart');\n    const rankingBody = document.getElementById('ranking-corpo-tabela');\n\n    if (isLoading) {\n        kpiElements.forEach(el => {\n            if (el.tagName === 'H2' || el.tagName === 'H3') {\n                el.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span>';\n            } else { el.innerHTML = ''; }\n        });\n        if (rankingBody) rankingBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></td></tr>';\n        if (dashboardLineChart) dashboardLineChart.destroy();\n        if (chartCanvas) chartCanvas.style.opacity = '0.5';\n    } else {\n        if (chartCanvas) chartCanvas.style.opacity = '1';\n    }\n}\n\nfunction getComparisonHtml(current, previous, unit = '') {\n    const currentNum = parseFloat(current);\n    const previousNum = parseFloat(previous);\n    if (isNaN(currentNum) || isNaN(previousNum)) return '';\n\n    if (previousNum === 0) return currentNum > 0 ? '<span class=\"text-success\">▲ Novo</span>' : '';\n    \n    const diff = ((currentNum - previousNum) / previousNum) * 100;\n    if (Math.abs(diff) < 0.1) return '';\n\n    const icon = diff > 0 ? '▲' : '▼';\n    const colorClass = diff > 0 ? 'text-success' : 'text-danger';\n    \n    const previousFormatted = unit === '%' ? previousNum.toFixed(2) : previousNum.toLocaleString('pt-BR');\n    const tooltipTitle = `Valor anterior: ${previousFormatted}${unit}`;\n\n    return `<span class=\"${colorClass}\" data-bs-toggle=\"tooltip\" data-bs-title=\"${tooltipTitle}\">${icon} ${diff.toFixed(1)}%</span>`;\n}\n\n// --- Funções de Renderização ---\nfunction renderRankingTable(rankingData) {\n    const rankingBody = document.getElementById('ranking-corpo-tabela');\n    const sortBy = document.getElementById('ranking-sort-select').value;\n    \n    const sortedData = [...rankingData].sort((a, b) => parseFloat(b[sortBy]) - parseFloat(a[sortBy]));\n\n    if (sortedData.length > 0) {\n        rankingBody.innerHTML = sortedData.map((loja, index) => `\n            <tr>\n                <td class=\"ps-3\"><b>#${index + 1}</b></td>\n                <td>${loja.loja}</td>\n                <td><b>${parseFloat(loja.tx_loja).toFixed(2)}%</b></td>\n                <td>${parseFloat(loja.tx_monitoramento).toFixed(2)}%</td>\n                <td>${loja.total_vendas_loja.toLocaleString('pt-BR')}</td>\n                <td>${loja.total_clientes_loja.toLocaleString('pt-BR')}</td>\n            </tr>\n        `).join('');\n    } else {\n        rankingBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center p-4\">Nenhuma loja ativa encontrada.</td></tr>';\n    }\n}\n\nfunction renderLineChart(currentChartData, comparisonChartData) {\n    const ctx = document.getElementById('dashboard-line-chart').getContext('2d');\n    \n    const datasets = [\n        {\n            label: 'Tx. Conv. Loja (Atual)',\n            data: currentChartData.txConversaoLoja,\n            borderColor: getCssVar('--color-success'),\n            backgroundColor: getCssVar('--color-success') + '20',\n            fill: true, tension: 0.4, borderWidth: 2.5\n        },\n        {\n            label: 'Tx. Conv. Monit. (Atual)',\n            data: currentChartData.txConversaoMonitoramento,\n            borderColor: getCssVar('--accent-color'),\n            backgroundColor: getCssVar('--accent-color') + '20',\n            fill: true, tension: 0.4, borderWidth: 2.5\n        },\n        {\n            label: 'Tx. Conv. Loja (Comparado)',\n            data: comparisonChartData.txConversaoLoja,\n            borderColor: getCssVar('--color-success'),\n            borderDash: [5, 5], fill: false, tension: 0.4, borderWidth: 1.5\n        },\n        {\n            label: 'Tx. Conv. Monit. (Comparado)',\n            data: comparisonChartData.txConversaoMonitoramento,\n            borderColor: getCssVar('--accent-color'),\n            borderDash: [5, 5], fill: false, tension: 0.4, borderWidth: 1.5\n        }\n    ];\n    \n    if (dashboardLineChart) dashboardLineChart.destroy();\n    dashboardLineChart = new Chart(ctx, {\n        type: 'line',\n        data: { labels: currentChartData.labels, datasets: datasets },\n        options: {\n            responsive: true, maintainAspectRatio: false,\n            interaction: { mode: 'index', intersect: false },\n            plugins: { legend: { position: 'top' }, tooltip: { position: 'nearest' } },\n            scales: { y: { beginAtZero: true, ticks: { callback: (value) => value + '%' } } }\n        }\n    });\n}\n\nfunction updateUI(results) {\n    const [currentData, rankingData, currentChartData, comparisonData, comparisonChartData] = results;\n\n    document.getElementById('geral-clientes').textContent = currentData.total_clientes_monitoramento.toLocaleString('pt-BR');\n    document.getElementById('geral-vendas').textContent = (currentData.total_vendas_monitoramento + currentData.total_omni).toLocaleString('pt-BR');\n    document.getElementById('geral-tx-conversao').textContent = `${parseFloat(currentData.tx_conversao_monitoramento).toFixed(2)}%`;\n    document.getElementById('loja-clientes').textContent = currentData.total_clientes_loja.toLocaleString('pt-BR');\n    document.getElementById('loja-vendas').textContent = currentData.total_vendas_loja.toLocaleString('pt-BR');\n    document.getElementById('loja-tx-conversao').textContent = `${parseFloat(currentData.tx_conversao_loja).toFixed(2)}%`;\n\n    document.getElementById('geral-clientes-comp').innerHTML = getComparisonHtml(currentData.total_clientes_monitoramento, comparisonData.total_clientes_monitoramento);\n    document.getElementById('geral-vendas-comp').innerHTML = getComparisonHtml(currentData.total_vendas_monitoramento + currentData.total_omni, comparisonData.total_vendas_monitoramento + comparisonData.total_omni);\n    document.getElementById('geral-tx-conversao-comp').innerHTML = getComparisonHtml(currentData.tx_conversao_monitoramento, comparisonData.tx_conversao_monitoramento, '%');\n    document.getElementById('loja-clientes-comp').innerHTML = getComparisonHtml(currentData.total_clientes_loja, comparisonData.total_clientes_loja);\n    document.getElementById('loja-vendas-comp').innerHTML = getComparisonHtml(currentData.total_vendas_loja, comparisonData.total_vendas_loja);\n    document.getElementById('loja-tx-conversao-comp').innerHTML = getComparisonHtml(currentData.tx_conversao_loja, comparisonData.tx_conversao_loja, '%');\n\n    renderLineChart(currentChartData, comparisonChartData);\n    \n    lastRankingData = rankingData;\n    renderRankingTable(lastRankingData);\n\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n}\n\n// --- Lógica Principal e Eventos ---\nexport function initAdminPage() {\n    const form = document.getElementById('form-filtros-dashboard');\n    if (!form) return;\n\n    const lojaSelect = document.getElementById('filtro-loja-dashboard');\n    const dataInicioInput = document.getElementById('filtro-data-inicio-dashboard');\n    const dataFimInput = document.getElementById('filtro-data-fim-dashboard');\n    const quickPeriodButtons = document.querySelectorAll('[data-period]');\n    const comparisonTypeSelect = document.getElementById('comparison-type-select');\n    const rankingSortSelect = document.getElementById('ranking-sort-select');\n\n    async function carregarLojas() {\n        try {\n            const response = await fetch('/api/lojas?status=ativa');\n            const lojas = await response.json();\n            lojas.forEach(loja => lojaSelect.add(new Option(loja.nome, loja.nome)));\n        } catch (error) { console.error('Falha ao carregar lojas', error); }\n    }\n    \n    function setDateRange(period) {\n        const hoje = new Date();\n        let inicio, fim = new Date(hoje);\n        switch (period) {\n            case 'hoje': inicio = hoje; break;\n            case '7d': inicio = new Date(); inicio.setDate(hoje.getDate() - 6); break;\n            case 'mes-atual': inicio = new Date(hoje.getFullYear(), hoje.getMonth(), 1); break;\n            case 'mes-passado':\n                inicio = new Date(hoje.getFullYear(), hoje.getMonth() - 1, 1);\n                fim = new Date(hoje.getFullYear(), hoje.getMonth(), 0);\n                break;\n        }\n        dataInicioInput.value = toISODateString(inicio);\n        dataFimInput.value = toISODateString(fim);\n    }\n\n    async function analisarDados(e) {\n        if(e) e.preventDefault();\n        setLoadingState(true);\n\n        const loja = lojaSelect.value;\n        const dataInicio = dataInicioInput.value;\n        const dataFim = dataFimInput.value;\n\n        if (!dataInicio || !dataFim) {\n            showToast(\"Atenção\", \"Por favor, selecione um período de datas.\", \"danger\");\n            setLoadingState(false);\n            return;\n        }\n        \n        const baseParams = { data_inicio: dataInicio, data_fim: dataFim };\n        if (loja !== 'todas') {\n            baseParams.loja = loja;\n        }\n\n        const currentParams = new URLSearchParams(baseParams);\n\n        const startDate = new Date(dataInicio + 'T00:00:00');\n        const endDate = new Date(dataFim + 'T00:00:00');\n        let compStartDate, compEndDate;\n        if (comparisonTypeSelect.value === 'ano-anterior') {\n            compStartDate = new Date(startDate); compStartDate.setFullYear(startDate.getFullYear() - 1);\n            compEndDate = new Date(endDate); compEndDate.setFullYear(endDate.getFullYear() - 1);\n        } else {\n            const diff = endDate.getTime() - startDate.getTime();\n            compEndDate = new Date(startDate.getTime() - 86400000);\n            compStartDate = new Date(compEndDate.getTime() - diff);\n        }\n        const compBaseParams = {...baseParams, data_inicio: toISODateString(compStartDate), data_fim: toISODateString(compEndDate) };\n        const comparisonParams = new URLSearchParams(compBaseParams);\n        \n        const apiCalls = [\n            fetch(`/api/dashboard-data?${currentParams.toString()}`),\n            fetch(`/api/ranking?${new URLSearchParams({ data_inicio: dataInicio, data_fim: dataFim })}`),\n            fetch(`/api/dashboard/chart-data?${currentParams.toString()}`),\n            fetch(`/api/dashboard-data?${comparisonParams.toString()}`),\n            fetch(`/api/dashboard/chart-data?${comparisonParams.toString()}`)\n        ];\n        \n        try {\n            const responses = await Promise.all(apiCalls);\n            const results = await Promise.all(responses.map(res => {\n                if(!res.ok) throw new Error(`Falha na API: ${res.status} ${res.statusText}`);\n                return res.json();\n            }));\n\n            updateUI(results);\n        } catch (error) {\n            console.error(\"Erro ao analisar dados:\", error);\n            showToast(\"Erro\", \"Não foi possível carregar os dados do dashboard.\", \"danger\");\n        } finally {\n            setLoadingState(false);\n        }\n    }\n    \n    form.addEventListener('submit', analisarDados);\n    \n    quickPeriodButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            quickPeriodButtons.forEach(btn => btn.classList.remove('active'));\n            e.currentTarget.classList.add('active');\n            setDateRange(e.currentTarget.dataset.period);\n        });\n    });\n\n    if (rankingSortSelect) {\n        rankingSortSelect.addEventListener('change', () => {\n            if (lastRankingData.length > 0) {\n                renderRankingTable(lastRankingData);\n            }\n        });\n    }\n\n    carregarLojas();\n    setDateRange('7d');\n    const initialActiveButton = document.querySelector('[data-period=\"7d\"]');\n    if(initialActiveButton) initialActiveButton.classList.add('active');\n    analisarDados();\n}","size_bytes":12240},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/novo-relatorio.js":{"content":"import { showToast } from '../utils.js';\n\nexport function initNovoRelatorioPage() {\n    const form = document.getElementById('form-novo-relatorio');\n    if (!form) return;\n\n    // --- Seleção de Elementos ---\n    const btnImportarPdf = document.getElementById(\"btn-importar-pdf\");\n    const pdfFileInput = document.getElementById(\"pdf-file-input\");\n    const btnSalvarTudo = document.getElementById(\"btn-salvar-tudo\");\n    const btnLimparFormulario = document.getElementById(\"btn-limpar-formulario\");\n    const btnAddVendedor = document.getElementById(\"btn-add-vendedor\");\n    const containerVendedores = document.getElementById(\"container-vendedores\");\n    const placeholderVendedores = document.getElementById(\"vendedores-placeholder\");\n    const lojaSelect = document.getElementById(\"loja\");\n    const dataInput = document.getElementById(\"data\");\n    const resultadosPdfContainer = document.getElementById('resultados-pdf-container');\n    const totalVendasDinheiroInput = form.querySelector('[name=\"total_vendas_dinheiro\"]');\n    const ticketMedioInput = form.querySelector('[name=\"ticket_medio\"]');\n    const paInput = form.querySelector('[name=\"pa\"]');\n    const clientesMonitoramentoInput = document.getElementById('clientes_monitoramento_input');\n    const vendasMonitoramentoInput = document.getElementById('vendas_monitoramento_input');\n    const clientesLojaInput = document.getElementById('clientes_loja_input');\n    const vendasLojaInput = document.getElementById('vendas_loja_input');\n    const omniInput = document.getElementById('quantidade_omni_input');\n    const monitoramentoDonutCanvas = document.getElementById('monitoramento-donut-chart');\n    const lojaDonutCanvas = document.getElementById('loja-donut-chart');\n    \n    // ADICIONADO: Selecionar os novos inputs de pagamento\n    const vendasCartaoInput = document.getElementById('vendas_cartao_input');\n    const vendasPixInput = document.getElementById('vendas_pix_input');\n    const vendasDinheiroInput = document.getElementById('vendas_dinheiro_input');\n    const vendasTotalPagamentoInput = document.getElementById('vendas_total_pagamento_input');\n\n    // --- Variáveis de Estado ---\n    let lojasCache = [];\n    const urlParams = new URLSearchParams(window.location.search);\n    const reportId = urlParams.get('edit');\n    let monitoramentoDonutChart = null;\n    let lojaDonutChart = null;\n    const DRAFT_KEY = 'draftRelatorio';\n\n    // --- Funções de Gerenciamento de Rascunho ---\n    function salvarRascunho() {\n        if (reportId) return;\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n        const nomes = formData.getAll('vendedor_nome');\n        const atendimentos = formData.getAll('vendedor_atendimentos');\n        const vendas = formData.getAll('vendedor_vendas');\n        data.vendedores = nomes.map((nome, index) => ({ nome: nome.trim(), atendimentos: atendimentos[index] || 0, vendas: vendas[index] || 0 }));\n        data.pdfSectionVisible = resultadosPdfContainer.style.display === 'block';\n        sessionStorage.setItem(DRAFT_KEY, JSON.stringify(data));\n    }\n\n    function carregarRascunho() {\n        if (reportId) return;\n        const draft = sessionStorage.getItem(DRAFT_KEY);\n        if (!draft) return;\n        const data = JSON.parse(draft);\n        for (const key in data) {\n            const input = form.querySelector(`[name=\"${key}\"]`);\n            if (input && key !== 'vendedores') input.value = data[key];\n        }\n        if (data.vendedores && Array.isArray(data.vendedores)) {\n            containerVendedores.innerHTML = '';\n            data.vendedores.forEach(vendedor => adicionarVendedor(vendedor));\n        }\n        if (data.pdfSectionVisible && resultadosPdfContainer) {\n            resultadosPdfContainer.style.display = 'block';\n        }\n        updateVendedoresPlaceholder();\n        handleSelecaoDeLoja();\n        calcularEAtualizarGraficos();\n        calcularTotalVendasPagamento(); // Adicionado para atualizar o total ao carregar rascunho\n        showToast(\"Rascunho Carregado\", \"Seu relatório não salvo foi restaurado.\", \"info\");\n    }\n\n    function limparRascunhoEFormulario() {\n        form.reset();\n        sessionStorage.removeItem(DRAFT_KEY);\n        const hoje = new Date();\n        const offset = hoje.getTimezoneOffset();\n        dataInput.value = new Date(hoje.getTime() - (offset * 60 * 1000)).toISOString().split('T')[0];\n        containerVendedores.innerHTML = '';\n        if(resultadosPdfContainer) resultadosPdfContainer.style.display = 'none';\n        updateVendedoresPlaceholder();\n        handleSelecaoDeLoja();\n        calcularEAtualizarGraficos();\n        calcularTotalVendasPagamento(); // Adicionado para resetar o total ao limpar\n        showToast(\"Formulário Limpo\", \"Todos os campos foram resetados.\", \"success\");\n    }\n\n    // --- Funções de UI e Lógica ---\n    const getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\n    \n    function renderDonutChart(canvas, percentage, color) {\n        if (!canvas) return null;\n        const textElement = document.getElementById(canvas.id.replace('chart', 'text'));\n        if (textElement) textElement.textContent = `${parseFloat(percentage).toFixed(1)}%`;\n        const data = { datasets: [{ data: [percentage, 100 - percentage > 0 ? 100 - percentage : 0], backgroundColor: [color, '#333333'], borderColor: getCssVar('--content-bg'), borderWidth: 3, cutout: '75%' }] };\n        const options = { responsive: true, maintainAspectRatio: true, plugins: { legend: { display: false }, tooltip: { enabled: false } } };\n        const ctx = canvas.getContext('2d');\n        if (canvas.chart) canvas.chart.destroy();\n        canvas.chart = new Chart(ctx, { type: 'doughnut', data, options });\n        return canvas.chart;\n    }\n\n    function updateDonutChart(chartInstance, percentage) {\n        if (!chartInstance) return;\n        const textElement = document.getElementById(chartInstance.canvas.id.replace('chart', 'text'));\n        if (textElement) textElement.textContent = `${parseFloat(percentage).toFixed(1)}%`;\n        chartInstance.data.datasets[0].data[0] = percentage;\n        chartInstance.data.datasets[0].data[1] = 100 - percentage > 0 ? 100 - percentage : 0;\n        chartInstance.update();\n    }\n    \n    // ADICIONADO: Nova função para somar os totais de pagamento\n    function calcularTotalVendasPagamento() {\n        const cartao = Number(vendasCartaoInput.value) || 0;\n        const pix = Number(vendasPixInput.value) || 0;\n        const dinheiro = Number(vendasDinheiroInput.value) || 0;\n        vendasTotalPagamentoInput.value = cartao + pix + dinheiro;\n    }\n\n    function calcularEAtualizarGraficos() {\n        const clientesM = Number(clientesMonitoramentoInput.value) || 0;\n        const vendasM = Number(vendasMonitoramentoInput.value) || 0;\n        const omni = omniInput ? (Number(omniInput.value) || 0) : 0;\n        const totalVendasM = vendasM + omni;\n        const txMonitoramento = clientesM > 0 ? (totalVendasM / clientesM) * 100 : 0;\n        updateDonutChart(monitoramentoDonutChart, txMonitoramento);\n        \n        const clientesL = Number(clientesLojaInput.value) || 0;\n        const vendasL = Number(vendasLojaInput.value) || 0;\n        const txLoja = clientesL > 0 ? (vendasL / clientesL) * 100 : 0;\n        updateDonutChart(lojaDonutChart, txLoja);\n    }\n\n    function updateVendedoresPlaceholder() { if(placeholderVendedores) placeholderVendedores.style.display = containerVendedores.children.length === 0 ? \"block\" : \"none\"; };\n    \n    async function carregarLojas() {\n        try {\n            const response = await fetch(\"/api/lojas\");\n            if (!response.ok) throw new Error('Falha ao carregar lojas.');\n            lojasCache = await response.json();\n            lojaSelect.innerHTML = '<option value=\"\" disabled selected>Selecione uma loja</option>';\n            const lojasFiltradas = reportId ? lojasCache : lojasCache.filter(l => l.status === 'ativa');\n            lojasFiltradas.forEach(l => lojaSelect.add(new Option(l.nome, l.nome)));\n        } catch (e) { console.error(\"Erro ao carregar lojas\", e); }\n    }\n    \n    function handleSelecaoDeLoja() {\n        const lojaSelecionada = lojasCache.find(loja => loja.nome === lojaSelect.value);\n        const containerEspecial = document.getElementById('container-funcao-especial');\n        const campoOmni = document.getElementById('campo-omni');\n        const campoBuscaAssist = document.getElementById('campo-busca-assist');\n\n        if(containerEspecial) containerEspecial.style.display = \"none\";\n        if(campoOmni) campoOmni.style.display = \"none\";\n        if(campoBuscaAssist) campoBuscaAssist.style.display = \"none\";\n\n        if (!lojaSelecionada || !lojaSelecionada.funcao_especial) {\n            calcularEAtualizarGraficos();\n            return;\n        }\n        containerEspecial.style.display = \"block\";\n        if (lojaSelecionada.funcao_especial === \"Omni\") campoOmni.style.display = \"block\";\n        else if (lojaSelecionada.funcao_especial === \"Busca por Assist. Tec.\") campoBuscaAssist.style.display = \"block\";\n        \n        calcularEAtualizarGraficos();\n    }\n    \n    function adicionarVendedor(vendedor = { nome: '', atendimentos: 0, vendas: 0 }) {\n        const div = document.createElement(\"div\");\n        div.className = \"input-group input-group-sm mb-2\";\n        div.innerHTML = `<input type=\"text\" class=\"form-control\" name=\"vendedor_nome\" placeholder=\"Nome do Vendedor\" value=\"${vendedor.nome||''}\" required><input type=\"number\" class=\"form-control\" name=\"vendedor_atendimentos\" value=\"${vendedor.atendimentos||0}\" min=\"0\" title=\"Atendimentos\"><input type=\"number\" class=\"form-control\" name=\"vendedor_vendas\" value=\"${vendedor.vendas||0}\" min=\"0\" title=\"Vendas\"><button type=\"button\" class=\"btn btn-outline-danger\" data-action=\"remover-vendedor\"><i class=\"bi bi-trash\"></i></button>`;\n        containerVendedores.appendChild(div);\n        updateVendedoresPlaceholder();\n    }\n    \n    async function carregarDadosParaEdicao() {\n        showToast(\"Modo de Edição\", \"Carregando dados do relatório...\", \"info\");\n        await carregarLojas();\n        try {\n            const response = await fetch(`/api/relatorios/${reportId}`);\n            if (!response.ok) throw new Error('Relatório não encontrado.');\n            const { relatorio } = await response.json();\n\n            if(resultadosPdfContainer && relatorio.total_vendas_dinheiro && parseFloat(String(relatorio.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) > 0) {\n                resultadosPdfContainer.style.display = 'block';\n            }\n            \n            const vendedores = JSON.parse(relatorio.vendedores||'[]');\n            for (const key in relatorio) { \n                const input = form.querySelector(`[name=\"${key}\"]`); \n                if (input) input.value = relatorio[key]; \n            }\n            containerVendedores.innerHTML = '';\n            vendedores.forEach(vend => adicionarVendedor(vend));\n            \n            updateVendedoresPlaceholder();\n            handleSelecaoDeLoja();\n            btnSalvarTudo.textContent = 'SALVAR ALTERAÇÕES';\n            calcularEAtualizarGraficos();\n            calcularTotalVendasPagamento(); // Adicionado para calcular o total ao carregar para edição\n        } catch(e) { showToast(\"Erro\", \"Não foi possível carregar os dados para edição.\", \"danger\"); }\n    }\n    \n    async function handleSalvarTudo() {\n        if (!form.checkValidity()) { \n            form.reportValidity(); \n            showToast(\"Campos Inválidos\", \"Por favor, preencha todos os campos obrigatórios.\", \"danger\");\n            return;\n        }\n        \n        const fd = new FormData(form);\n        const data = Object.fromEntries(fd.entries());\n        const n = fd.getAll('vendedor_nome'), a = fd.getAll('vendedor_atendimentos'), v = fd.getAll('vendedor_vendas');\n        data.vendedores = JSON.stringify(n.map((nome, i) => ({ nome: nome.trim(), atendimentos: parseInt(a[i],10)||0, vendas: parseInt(v[i],10)||0 })).filter(vend => vend.nome));\n        \n        const method = reportId ? 'PUT' : 'POST';\n        const url = reportId ? `/api/relatorios/${reportId}` : '/api/relatorios';\n        \n        btnSalvarTudo.disabled = true;\n        btnSalvarTudo.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Salvando...';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Erro desconhecido ao salvar.');\n            showToast('Sucesso!', reportId ? 'Relatório atualizado com sucesso!' : 'Relatório salvo com sucesso!', 'success');\n            \n            if (reportId) {\n                setTimeout(() => window.location.href = '/consulta', 1000);\n            } else {\n                limparRascunhoEFormulario();\n            }\n        } catch (e) {\n            showToast('Falha ao Salvar', e.message, 'danger');\n        } finally {\n            btnSalvarTudo.disabled = false;\n            btnSalvarTudo.textContent = reportId ? 'SALVAR ALTERAÇÕES' : 'SALVAR RELATÓRIO COMPLETO';\n        }\n    }\n    \n    // --- Lógica de Importação de PDF ---\n    btnImportarPdf.addEventListener('click', () => pdfFileInput.click());\n    pdfFileInput.addEventListener('change', async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        btnImportarPdf.disabled = true;\n        btnImportarPdf.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Processando...';\n\n        try {\n            const formData = new FormData();\n            formData.append('pdfFile', file);\n            const response = await fetch('/api/process-pdf', { method: 'POST', body: formData });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Erro ao processar PDF.');\n            \n            const { data: extractedData } = result;\n            \n            // PREENCHIMENTO EXPLÍCITO CORRIGIDO\n            if (extractedData.total_vendas_dinheiro) totalVendasDinheiroInput.value = extractedData.total_vendas_dinheiro;\n            if (extractedData.ticket_medio) ticketMedioInput.value = extractedData.ticket_medio;\n            if (extractedData.pa) paInput.value = extractedData.pa;\n            if (extractedData.data) dataInput.value = extractedData.data;\n            if (extractedData.loja) {\n                const storeExists = Array.from(lojaSelect.options).some(option => option.text.trim().toUpperCase() === extractedData.loja.trim().toUpperCase());\n                if (storeExists) {\n                    lojaSelect.value = Array.from(lojaSelect.options).find(option => option.text.trim().toUpperCase() === extractedData.loja.trim().toUpperCase()).value;\n                } else {\n                    showToast(\"Atenção\", `A loja \"${extractedData.loja}\" do PDF não foi encontrada no sistema.`, \"danger\");\n                }\n            }\n            containerVendedores.innerHTML = '';\n            if (extractedData.vendedores && extractedData.vendedores.length > 0) {\n                extractedData.vendedores.forEach(vendedor => adicionarVendedor(vendedor));\n            }\n            \n            if(resultadosPdfContainer) resultadosPdfContainer.style.display = 'block';\n            \n            // ATUALIZAÇÃO DA UI\n            updateVendedoresPlaceholder();\n            handleSelecaoDeLoja();\n            calcularEAtualizarGraficos();\n            salvarRascunho();\n            showToast(\"Sucesso!\", \"Dados do PDF importados com sucesso.\", \"success\");\n\n        } catch (error) {\n            showToast(\"Erro na Importação\", error.message, \"danger\");\n        } finally {\n            btnImportarPdf.disabled = false;\n            btnImportarPdf.innerHTML = '<i class=\"bi bi-file-earmark-arrow-up-fill me-2\"></i>Importar de PDF';\n            pdfFileInput.value = '';\n        }\n    });\n\n    // --- Inicialização dos Event Listeners ---\n    btnAddVendedor.addEventListener(\"click\", () => adicionarVendedor());\n    btnSalvarTudo.addEventListener(\"click\", handleSalvarTudo);\n    btnLimparFormulario.addEventListener(\"click\", limparRascunhoEFormulario);\n    lojaSelect.addEventListener(\"change\", handleSelecaoDeLoja);\n\n    form.addEventListener('input', () => {\n        calcularEAtualizarGraficos();\n        salvarRascunho();\n    });\n\n    // ADICIONADO: Event listeners para os novos campos de pagamento\n    vendasCartaoInput.addEventListener('input', calcularTotalVendasPagamento);\n    vendasPixInput.addEventListener('input', calcularTotalVendasPagamento);\n    vendasDinheiroInput.addEventListener('input', calcularTotalVendasPagamento);\n\n    containerVendedores.addEventListener(\"click\", e => {\n        if (e.target.closest('button[data-action=\"remover-vendedor\"]')) {\n            e.target.closest(\".input-group\").remove();\n            updateVendedoresPlaceholder();\n            salvarRascunho();\n        }\n    });\n\n    // --- Lógica de Inicialização da Página ---\n    monitoramentoDonutChart = renderDonutChart(monitoramentoDonutCanvas, 0, getCssVar('--accent-color'));\n    lojaDonutChart = renderDonutChart(lojaDonutCanvas, 0, getCssVar('--color-success'));\n\n    if (reportId) {\n        document.querySelector('h4.mb-0').textContent = 'Editar Relatório Existente';\n        carregarDadosParaEdicao();\n    } else {\n        carregarLojas();\n        updateVendedoresPlaceholder();\n        carregarRascunho();\n    }\n}","size_bytes":17636},"monitoramento-lojas-varejo-main/create-relatorio/public/js/app.js":{"content":"// =================================================================\n// IMPORTS E CONFIGURAÇÃO DE PÁGINAS\n// =================================================================\nimport { initAdminPage } from './pages/admin.js';\nimport { initConsultaPage } from './pages/consulta.js';\nimport { initGerenciarLojasPage } from './pages/gerenciar-lojas.js';\nimport { initDemandasPage } from './pages/demandas.js';\nimport { initNovoRelatorioPage } from './pages/novo-relatorio.js';\nimport { initGerenciarUsuariosPage } from './pages/gerenciar-usuarios.js';\n\nconst pageInitializers = {\n    'admin': initAdminPage,\n    'consulta': initConsultaPage,\n    'gerenciar-lojas': initGerenciarLojasPage,\n    'demandas': initDemandasPage,\n    'novo-relatorio': initNovoRelatorioPage,\n    // A página gerenciar-usuarios carrega o conteúdo de usuários e backup\n    'gerenciar-usuarios': initGerenciarUsuariosPage \n};\n\nlet currentUser = null;\n\n// =================================================================\n// LÓGICA DE NAVEGAÇÃO E CARREGAMENTO DE PÁGINAS\n// =================================================================\nasync function loadPage(path) {\n    const pageContent = document.getElementById('page-content');\n    if (!pageContent) return;\n\n    const defaultPage = 'admin';\n    const pageName = (path.startsWith('/') ? path.substring(1) : path).split('?')[0] || defaultPage;\n    const activePage = (pageName === '' || pageName === 'index.html') ? defaultPage : pageName;\n\n    // Atualiza a classe 'active' nos menus (desktop e mobile)\n    document.querySelectorAll('.sidebar-nav .nav-item').forEach(item => {\n        const link = item.querySelector('.nav-link');\n        const linkHrefPage = link.getAttribute('href').substring(1);\n        item.classList.toggle('active', linkHrefPage === activePage);\n    });\n\n    pageContent.innerHTML = '<div class=\"d-flex justify-content-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n\n    try {\n        const response = await fetch(`/content/${activePage}`);\n        if (!response.ok) throw new Error(`Página /content/${activePage} não encontrada.`);\n\n        pageContent.innerHTML = await response.text();\n        \n        // Garante que a função de inicialização da página seja chamada\n        const initFunc = pageInitializers[activePage];\n        if (typeof initFunc === 'function') {\n           \n            setTimeout(() => {\n                try {\n                    \n                    initFunc(currentUser);\n                } catch (err) {\n                    console.error(`Erro ao inicializar a página '${activePage}':`, err);\n                }\n            }, 0);\n        }\n    } catch (error) {\n        console.error(\"Erro ao carregar página:\", error);\n        pageContent.innerHTML = `<div class=\"p-3 text-center text-danger\"><h3>Oops!</h3><p>Erro ao carregar conteúdo da página.</p></div>`;\n    }\n}\n\nfunction navigateTo(path) {\n    if (location.pathname + location.search === path) return;\n    history.pushState(null, '', path);\n    loadPage(path);\n}\n\n// =================================================================\n// SESSÃO E INICIALIZAÇÃO PRINCIPAL\n// =================================================================\nasync function setupSessionAndUI() {\n    try {\n        const response = await fetch('/api/session-info');\n        if (!response.ok) { window.location.href = '/login'; return; }\n        currentUser = await response.json();\n        const userInfoContainer = document.getElementById('user-info-container');\n        if (userInfoContainer) {\n            let adminButtons = '';\n            // Mostra os links de admin se o usuário for admin\n            if (currentUser.role === 'admin') {\n                document.querySelectorAll('#nav-gerenciar').forEach(el => el?.classList.remove('d-none'));\n                 // A página de gerenciar usuários é acessada pelo link \"Lojas\", mas o botão fica no footer.\n                adminButtons = `<a href=\"/gerenciar-usuarios\" class=\"btn\" title=\"Configurações\"><i class=\"bi bi-gear-fill\"></i></a>`;\n            }\n            // Mostra o link de demandas para todos\n            document.querySelectorAll('#nav-demandas').forEach(el => el?.classList.remove('d-none'));\n\n            userInfoContainer.innerHTML = `<div class=\"user-info\"><span>Olá, <strong>${currentUser.username}</strong></span></div><div class=\"user-actions\"><a href=\"/live\" id=\"live-mode-btn\" class=\"btn\" title=\"Modo Live\"><i class=\"bi bi-broadcast\"></i></a>${adminButtons}<a href=\"/logout\" class=\"btn\" title=\"Sair\"><i class=\"bi bi-box-arrow-right\"></i></a></div>`;\n            \n            document.getElementById('live-mode-btn')?.addEventListener('click', (e) => {\n                e.preventDefault();\n                window.open(e.currentTarget.href, 'live-window', 'width=550,height=850,scrollbars=yes,resizable=yes');\n            });\n        }\n    } catch (e) { console.error(\"Falha na sessão:\", e); window.location.href = '/login'; }\n}\n\nasync function main() {\n    await setupSessionAndUI();\n    const mobileMenuModalEl = document.getElementById('mobileMenuModal');\n    const mobileMenuModal = mobileMenuModalEl ? new bootstrap.Modal(mobileMenuModalEl) : null;\n\n    document.body.addEventListener('click', e => {\n        const navLink = e.target.closest('a.nav-link');\n        if (navLink && navLink.closest('.sidebar-nav')) {\n            e.preventDefault();\n            const destination = navLink.getAttribute('href');\n            \n            if (navLink.closest('#mobileMenuModal')) {\n                mobileMenuModalEl.addEventListener('hidden.bs.modal', () => {\n                    navigateTo(destination);\n                }, { once: true });\n                if (mobileMenuModal) mobileMenuModal.hide();\n            } else {\n                navigateTo(destination);\n            }\n        }\n    });\n\n    window.addEventListener('popstate', () => loadPage(location.pathname + location.search));\n    loadPage(location.pathname + location.search);\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\n\n// =================================================================\n// FUNÇÕES DE UTILIDADE GLOBAIS\n// =================================================================\nexport function showToast(title, message, type = 'success') {\n    const toastEl = document.getElementById('notificationToast');\n    if (!toastEl) return;\n    const toast = bootstrap.Toast.getOrCreateInstance(toastEl);\n    \n    toastEl.querySelector('#toast-title').textContent = title;\n    toastEl.querySelector('#toast-body').textContent = message;\n    const toastHeader = toastEl.querySelector('.toast-header');\n    toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info');\n    if (type === 'success') toastHeader.classList.add('bg-success');\n    else if (type === 'danger') toastHeader.classList.add('bg-danger');\n    else toastHeader.classList.add('bg-info');\n    \n    toast.show();\n}\n\nexport function showConfirmModal(message) {\n    return new Promise((resolve) => {\n        const confirmModalEl = document.getElementById('confirmModal');\n        if (!confirmModalEl) { resolve(window.confirm(message)); return; }\n\n        const confirmModal = bootstrap.Modal.getOrCreateInstance(confirmModalEl);\n        confirmModalEl.querySelector('#confirmModalBody').textContent = message;\n\n        const btnYes = confirmModalEl.querySelector('#confirm-btn-yes');\n        const btnNo = confirmModalEl.querySelector('#confirm-btn-no');\n\n        const onYesClick = () => resolve(true);\n        const onNoClick = () => resolve(false);\n\n        btnYes.addEventListener('click', onYesClick, { once: true });\n        btnNo.addEventListener('click', onNoClick, { once: true });\n        \n        // Garante que se o modal for fechado de outra forma, ele resolve como 'false'\n        confirmModalEl.addEventListener('hidden.bs.modal', () => resolve(false), { once: true });\n\n        confirmModal.show();\n    });\n}","size_bytes":7920},"monitoramento-lojas-varejo-main/create-relatorio/public/css/style.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap');\n\n/* ============================================================\n   VARIÁVEIS\n============================================================ */\n:root {\n    --sidebar-width: 250px;\n    --main-bg: #1A1A1D;\n    --content-bg: rgba(28, 28, 28, 0.65);\n    --hover-bg: #000000;\n    --border-color: #383838;\n    --accent-color: #ff7b00;\n    --glow-color: rgba(255, 123, 0, 0.15);\n    --color-success: #2ea043;\n    --text-light: #ffffff;\n    --text-muted: #b0b0b0;\n    --text-input-color: #e5e7eb;\n    --border-radius-large: 16px;\n    --border-radius-small: 8px;\n    --transition-speed: 0.2s;\n}\n\n/* ============================================================\n   ESTRUTURA PRINCIPAL E ESTILOS GLOBAIS\n============================================================ */\nbody { background-color: var(--main-bg) !important; font-family: 'Inter', sans-serif; }\n.main-content { padding: 2.5rem; height: 100vh; overflow-y: auto; }\n#page-content { max-width: 1400px; margin: 0 auto; }\nbody, body *, .card, .card *, .modal, .modal * { color: var(--text-light) !important; }\nsmall { color: var(--text-muted) !important; }\n\nh4.mb-3 {\n    font-weight: 700; padding-bottom: 1rem; position: relative;\n    border-bottom: 1px solid var(--border-color); margin-bottom: 2.5rem !important;\n}\nh4.mb-3::after {\n    content: ''; position: absolute; bottom: -1px; left: 0; width: 100%; height: 1px;\n    background-color: transparent; box-shadow: 0 0 15px -2px var(--glow-color);\n}\n\n/* ============================================================\n   SIDEBAR DESKTOP\n============================================================ */\n.sidebar-desktop {\n    position: fixed; top: 0; left: 0; width: var(--sidebar-width); height: 100vh;\n    background-color: var(--content-bg); border-right: 1px solid var(--border-color);\n    padding: 1.5rem; z-index: 1000; display: flex; flex-direction: column;\n    -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px);\n}\n.sidebar-header { display: flex; align-items: center; gap: 0.75rem; font-size: 1.5rem; font-weight: 700; padding-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); }\n.sidebar-header i { color: var(--accent-color) !important; font-size: 1.8rem; }\n.sidebar-nav { list-style: none !important; padding: 0 !important; margin: 1.5rem 0; flex-grow: 1; }\n.sidebar-nav .nav-item { margin-bottom: 0.25rem !important; }\n.nav-link { display: flex; align-items: center; gap: 1rem; padding: 0.8rem 1rem; border-radius: var(--border-radius-small); color: var(--text-muted) !important; text-decoration: none; transition: all var(--transition-speed); }\n.nav-link:hover { color: var(--text-light) !important; background-color: var(--hover-bg); }\n.nav-item.active .nav-link { color: var(--text-light) !important; background-color: var(--main-bg); font-weight: 600; }\n.nav-item.active .nav-link i { color: var(--accent-color) !important; }\n.sidebar-footer { margin-top: auto; padding-top: 1.5rem; border-top: 1px solid var(--border-color); }\n#user-info-container { display: flex; flex-direction: column; gap: 1rem; }\n#user-info-container .user-info { font-weight: 600; }\n#user-info-container .user-actions { display: flex; gap: 0.5rem; }\n#user-info-container .btn { background-color: transparent !important; border: 1px solid var(--border-color) !important; color: var(--text-muted) !important; padding: 0.4rem 0.6rem; font-size: 1rem; }\n#user-info-container .btn:hover { background-color: var(--hover-bg) !important; color: var(--accent-color) !important; border-color: var(--accent-color) !important; }\n\n/* ============================================================\n   COMPONENTES GERAIS (Cards, Forms, Botões)\n============================================================ */\n.card, .alert, .list-group-item { background-color: var(--content-bg) !important; border-radius: var(--border-radius-large) !important; border: 1px solid var(--border-color) !important; margin-bottom: 1.5rem; }\n#page-content > .container-fluid > .card:first-of-type { box-shadow: 0 8px 32px -8px var(--glow-color); }\n.card-header { font-weight: 600; background-color: transparent !important; border-bottom: 1px solid var(--border-color) !important; padding: 1rem 1.5rem; }\n.card-body { padding: 1.5rem !important; }\n.form-control, .form-select { background-color: var(--main-bg) !important; border: 1px solid var(--border-color) !important; color: var(--text-input-color) !important; }\ninput[type=\"date\"]::-webkit-calendar-picker-indicator { filter: invert(1); opacity: 0.7; cursor: pointer; }\n.btn { transition: all var(--transition-speed) ease; font-weight: 600; border-radius: var(--border-radius-small); }\n.btn-primary { background-color: var(--accent-color) !important; color: var(--main-bg) !important; border: none !important; }\n\n/* ============================================================\n   LAYOUT RESPONSIVO\n============================================================ */\n@media (min-width: 992px) { .main-content { margin-left: var(--sidebar-width); } }\n@media (max-width: 991.98px) { .main-content { padding: 1.5rem; padding-top: 80px; } }\n\n/* ============================================================\n   HEADER E MENU MOBILE (MODAL)\n============================================================ */\n.mobile-header {\n    position: fixed; top: 0; left: 0; width: 100%; height: 60px; background-color: var(--content-bg);\n    border-bottom: 1px solid var(--border-color); display: flex; align-items: center; padding: 0 1rem;\n    z-index: 1030; -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px);\n}\n.mobile-header .btn { font-size: 1.5rem; color: var(--text-light) !important; }\n.mobile-header-title { display: flex; align-items: center; gap: 0.5rem; font-size: 1.2rem; font-weight: 700; margin-left: 1rem; }\n.mobile-header-title i { color: var(--accent-color) !important; }\n.modal-content.mobile-menu-content { background-color: #111111; border: none; -webkit-backdrop-filter: none; backdrop-filter: none; }\n.mobile-menu-content .modal-header { border-bottom-color: var(--border-color); }\n.mobile-menu-content .modal-header .modal-title { display: flex; align-items: center; gap: 0.5rem; font-weight: 700; font-size: 1.2rem; }\n.mobile-menu-content .modal-header .modal-title i { color: var(--accent-color) !important; }\n.mobile-menu-content .modal-body { padding-top: 2rem; }\n.mobile-menu-content .nav-link { font-size: 1.2rem; padding: 1rem; }\n\n/* ============================================================\n   CORREÇÕES DE COMPONENTES (Tabelas, Modais, Abas)\n============================================================ */\n.card .table-responsive, .card .table { background-color: transparent; }\n.card .table { --bs-table-bg: transparent; --bs-table-striped-bg: rgba(0, 0, 0, 0.05); }\n.modal-content { background-color: var(--content-bg) !important; border-radius: var(--border-radius-large) !important; border: 1px solid var(--border-color) !important; -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px); }\n.modal-header { border-bottom-color: var(--border-color) !important; }\n.modal-footer { border-top-color: var(--border-color) !important; }\n.nav-tabs { border-bottom: 2px solid var(--border-color) !important; }\n.nav-tabs .nav-link { background: transparent !important; border: none !important; border-bottom: 3px solid transparent !important; color: var(--text-muted) !important; margin-bottom: -2px; }\n.nav-tabs .nav-link:hover { border-bottom-color: var(--border-color) !important; }\n.nav-tabs .nav-link.active { color: var(--text-light) !important; font-weight: 600; border-bottom-color: var(--accent-color) !important; }\n\n/* ============================================================\n   REFORMULAÇÃO DO FORMULÁRIO DE FILTROS DO DASHBOARD\n============================================================ */\n#form-filtros-dashboard .form-label {\n    font-size: 0.8rem;\n    font-weight: 500;\n    color: var(--text-muted);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    margin-bottom: 0.5rem; /* Espaçamento consistente */\n}\n\n/* Container do controle segmentado */\n#form-filtros-dashboard .btn-group {\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius-small);\n    padding: 3px;\n    background-color: var(--main-bg);\n}\n\n/* Botões individuais dentro do controle */\n#form-filtros-dashboard .btn-group .btn {\n    background-color: transparent !important;\n    border: none !important;\n    color: var(--text-muted) !important;\n    font-weight: 500;\n    box-shadow: none !important;\n    transition: all 0.2s ease-in-out;\n    border-radius: 6px !important; /* Bordas arredondadas para todos */\n    padding-top: 0.375rem; /* Ajuste para alinhamento vertical */\n    padding-bottom: 0.375rem;\n    \n}\n\n#form-filtros-dashboard .btn-group .btn:hover {\n    color: var(--text-light) !important;\n    background-color: rgba(255, 255, 255, 0.05) !important;\n}\n\n/* Botão ATIVO no controle */\n#form-filtros-dashboard .btn-group .btn.active {\n    background-color: var(--hover-bg) !important;\n    color: var(--text-light) !important;\n    font-weight: 600;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.3) !important;\n}\n\n.input-group-text {\n    background-color: var(--border-color) !important; /* Um cinza um pouco mais escuro para destaque */\n    border-color: var(--border-color) !important;\n    color: var(--text-muted) !important;\n    font-weight: 600;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    opacity: 0.95;\n}\n\n/* Aplica o brilho laranja ao passar o mouse sobre botões primários */\n.btn-primary:hover {\n    box-shadow: 0 0 12px var(--glow-color);\n}\n\n/* Aplica um brilho verde ao passar o mouse sobre botões de sucesso */\n.btn-success:hover {\n    box-shadow: 0 0 12px rgba(46, 160, 67, 0.6);\n}\n\n/* Aplica um brilho vermelho ao passar o mouse sobre botões de perigo */\n.btn-danger:hover, .btn-outline-danger:hover {\n    box-shadow: 0 0 12px rgba(248, 113, 113, 0.6);\n}\n\n/* Aplica um brilho cinza ao passar o mouse sobre botões secundários */\n.btn-secondary:hover, .btn-outline-secondary:hover {\n    box-shadow: 0 0 12px rgba(108, 117, 125, 0.4);\n}","size_bytes":10143},"monitoramento-lojas-varejo-main/create-relatorio/public/js/utils.js":{"content":"/**\n * Exibe uma notificação toast no canto da tela.\n * @param {string} title Título do toast.\n * @param {string} message Mensagem do corpo do toast.\n * @param {'success'|'danger'|'info'} type O tipo de notificação (muda a cor).\n */\nexport function showToast(title, message, type = 'success') {\n    const toastEl = document.getElementById('notificationToast');\n    if (!toastEl) return;\n    const toastHeader = toastEl.querySelector('.toast-header');\n    const toastTitle = document.getElementById('toast-title');\n    const toastBody = document.getElementById('toast-body');\n\n    toastTitle.textContent = title;\n    toastBody.textContent = message;\n\n    toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info');\n    if (type === 'success') toastHeader.classList.add('bg-success');\n    else if (type === 'danger') toastHeader.classList.add('bg-danger');\n    else toastHeader.classList.add('bg-info');\n\n    const toast = new bootstrap.Toast(toastEl);\n    toast.show();\n}\n\n/**\n * Exibe um modal de confirmação e retorna uma Promise que resolve como true ou false.\n * @param {string} message A pergunta a ser exibida no modal.\n * @returns {Promise<boolean>} Retorna true se o usuário clicar \"Sim\", senão false.\n */\nexport function showConfirmModal(message) {\n    return new Promise((resolve) => {\n        const confirmModalEl = document.getElementById('confirmModal');\n        if (!confirmModalEl) {\n            resolve(window.confirm(message));\n            return;\n        }\n\n        const confirmModal = new bootstrap.Modal(confirmModalEl);\n        document.getElementById('confirmModalBody').textContent = message;\n\n        const btnYes = document.getElementById('confirm-btn-yes');\n        const btnNo = document.getElementById('confirm-btn-no');\n        const btnClose = confirmModalEl.querySelector('.btn-close');\n\n        const handleResolve = (value) => {\n            btnYes.removeEventListener('click', onYesClick);\n            btnNo.removeEventListener('click', onNoClick);\n            btnClose.removeEventListener('click', onNoClick);\n            confirmModalEl.removeEventListener('hidden.bs.modal', onHidden);\n\n            if (confirmModal._isShown) {\n                confirmModal.hide();\n            }\n            resolve(value);\n        };\n\n        const onYesClick = () => handleResolve(true);\n        const onNoClick = () => handleResolve(false);\n        const onHidden = () => handleResolve(false);\n\n        btnYes.addEventListener('click', onYesClick, { once: true });\n        btnNo.addEventListener('click', onNoClick, { once: true });\n        btnClose.addEventListener('click', onNoClick, { once: true });\n        confirmModalEl.addEventListener('hidden.bs.modal', onHidden, { once: true });\n\n        confirmModal.show();\n    });\n}","size_bytes":2767},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/gerenciar-lojas.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initGerenciarLojasPage() {\n    const tableBody = document.getElementById('tabela-lojas-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-loja');\n    const modalEl = document.getElementById('modal-loja');\n    \n    if (!tableBody || !btnAdicionar || !modalEl) return;\n    \n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-loja');\n    const modalTitle = document.getElementById('modalLojaLabel');\n    let lojasCache = [];\n\n    async function carregarLojas() {\n        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch('/api/lojas');\n            lojasCache = await response.json();\n            if (lojasCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Nenhuma loja cadastrada.</td></tr>';\n                return;\n            }\n            tableBody.innerHTML = lojasCache.map(loja => {\n                const statusBadge = loja.status === 'ativa' ? `<span class=\"badge bg-success\">Ativa</span>` : `<span class=\"badge bg-secondary\">Inativa</span>`;\n                return `<tr><td>${loja.nome}</td><td>${statusBadge}</td><td>${loja.funcao_especial || '-'}</td><td>${loja.observacoes || '-'}</td><td class=\"text-end pe-3\"><button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${loja.id}\"><i class=\"bi bi-pencil\"></i></button> <button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${loja.id}\"><i class=\"bi bi-trash\"></i></button></td></tr>`;\n            }).join('');\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar.</td></tr>';\n        }\n    }\n\n    function abrirModalParaAdicionar() {\n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Nova Loja';\n        document.getElementById('loja-id').value = '';\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const loja = lojasCache.find(l => l.id === id);\n        if (!loja) return;\n        modalForm.reset();\n        modalTitle.textContent = 'Editar Loja';\n        document.getElementById('loja-id').value = loja.id;\n        document.getElementById('loja-nome').value = loja.nome;\n        document.getElementById('loja-status').value = loja.status;\n        document.getElementById('loja-funcao-especial').value = loja.funcao_especial || '';\n        document.getElementById('loja-observacoes').value = loja.observacoes || '';\n        modal.show();\n    }\n\n    async function excluirLoja(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir esta loja?`);\n        if (!confirmed) return;\n        try {\n            const response = await fetch(`/api/lojas/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir.');\n            showToast('Sucesso', 'Loja excluída.', 'success');\n            carregarLojas();\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir a loja.', 'danger');\n        }\n    }\n\n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const id = document.getElementById('loja-id').value;\n        const data = { nome: document.getElementById('loja-nome').value, status: document.getElementById('loja-status').value, funcao_especial: document.getElementById('loja-funcao-especial').value, observacoes: document.getElementById('loja-observacoes').value };\n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/lojas/${id}` : '/api/lojas';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            if (!response.ok) throw new Error('Falha ao salvar. Nome já existe?');\n            showToast('Sucesso', `Loja salva.`, 'success');\n            modal.hide();\n            carregarLojas();\n        } catch(e) { showToast('Erro', e.message, 'danger'); }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirLoja(id);\n    });\n    carregarLojas();\n}","size_bytes":4587},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/demandas.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initDemandasPage() {\n    const containerPendentes = document.getElementById('demandas-pendentes-container');\n    const containerHistorico = document.getElementById('demandas-historico-container');\n    const abas = document.querySelectorAll('#demandasTab .nav-link');\n    const modalDemandaEl = document.getElementById('modal-add-demanda');\n    \n    // ===== A MUDANÇA ESTÁ AQUI =====\n    // Trocamos 'page-content' pelo nosso novo wrapper específico da página.\n    const demandasWrapper = document.getElementById('demandas-page-wrapper');\n    // ===============================\n\n    if (!modalDemandaEl || !demandasWrapper) return; // Adicionada verificação para o wrapper\n\n    const modalDemanda = new bootstrap.Modal(modalDemandaEl);\n    const formDemanda = document.getElementById('form-add-demanda');\n    const selectLojaModal = document.getElementById('demanda-loja');\n\n    async function carregarLojasNoModal() {\n        try {\n            const response = await fetch('/api/lojas?status=ativa');\n            const lojas = await response.json();\n            selectLojaModal.innerHTML = '<option value=\"\" selected disabled>Selecione uma loja</option>';\n            lojas.forEach(loja => {\n                selectLojaModal.add(new Option(loja.nome, loja.nome));\n            });\n        } catch (error) {\n            console.error(\"Falha ao carregar lojas:\", error);\n        }\n    }\n\n    async function carregarDemandas(tipo) {\n        const container = tipo === 'pendentes' ? containerPendentes : containerHistorico;\n        const url = `/api/demandas/${tipo}`;\n        if (!container) return;\n\n        container.innerHTML = '<p class=\"text-center\">Carregando...</p>';\n        try {\n            const response = await fetch(url);\n            const demandas = await response.json();\n            if (demandas.length === 0) {\n                container.innerHTML = '<p class=\"text-center text-muted\">Nenhuma demanda encontrada.</p>';\n                return;\n            }\n\n            container.innerHTML = demandas.map(d => {\n                const tagCores = { 'Urgente': 'bg-danger', 'Alta': 'bg-warning text-dark', 'Normal': 'bg-info text-dark', 'Baixa': 'bg-secondary' };\n                let acoesHtml = '';\n                // A lógica para tipo 'concluidas' estava errada, corrigido para 'historico'\n                if (tipo === 'pendentes') {\n                    acoesHtml = `<div class=\"d-flex justify-content-end mt-2\"><button class=\"btn btn-sm btn-success me-2\" data-action=\"concluir\" data-id=\"${d.id}\" title=\"Concluir\"><i class=\"bi bi-check-lg\"></i></button><button class=\"btn btn-sm btn-danger\" data-action=\"excluir\" data-id=\"${d.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button></div>`;\n                } else if (tipo === 'historico') { // CORREÇÃO LÓGICA\n                    acoesHtml = `<div class=\"d-flex justify-content-end mt-2\"><button class=\"btn btn-sm btn-danger\" data-action=\"excluir\" data-id=\"${d.id}\" title=\"Excluir do Histórico\"><i class=\"bi bi-trash\"></i></button></div>`;\n                }\n                const footerHtml = tipo === 'pendentes' ? `Criado por <strong>${d.criado_por_usuario}</strong> em ${new Date(d.criado_em).toLocaleDateString('pt-BR')}` : `Concluído por <strong>${d.concluido_por_usuario || 'N/A'}</strong> em ${new Date(d.concluido_em).toLocaleDateString('pt-BR')}`;\n\n                return `<div class=\"card mb-3\"><div class=\"card-body\"><div class=\"d-flex justify-content-between align-items-start\"><div><h5 class=\"card-title mb-1\">${d.loja_nome}</h5><p class=\"card-text mb-0\">${d.descricao}</p></div><span class=\"badge ${tagCores[d.tag] || 'bg-light text-dark'}\">${d.tag}</span></div>${acoesHtml}</div><div class=\"card-footer text-muted small\">${footerHtml}</div></div>`;\n            }).join('');\n        } catch (e) {\n            container.innerHTML = '<p class=\"text-center text-danger\">Erro ao carregar demandas.</p>';\n        }\n    }\n\n    formDemanda.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const data = Object.fromEntries(new FormData(e.target).entries());\n        if (!data.loja_nome) {\n            showToast('Atenção', 'Selecione uma loja.', 'danger');\n            return;\n        }\n        try {\n            const response = await fetch('/api/demandas', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            if (!response.ok) throw new Error('Falha ao adicionar demanda.');\n            modalDemanda.hide();\n            e.target.reset();\n            showToast('Sucesso', 'Demanda adicionada.', 'success');\n            carregarDemandas('pendentes');\n        } catch (error) {\n            showToast('Erro', error.message, 'danger');\n        }\n    });\n\n    abas.forEach(aba => {\n        aba.addEventListener('shown.bs.tab', (event) => {\n            const targetId = event.target.getAttribute('data-bs-target');\n            // A lógica para carregar o histórico estava errada, corrigido para 'historico'\n            if (targetId === '#pendentes') carregarDemandas('pendentes');\n            else if (targetId === '#historico') carregarDemandas('historico'); // CORREÇÃO LÓGICA\n        });\n    });\n\n    // ===== A MUDANÇA ESTÁ AQUI =====\n    // O ouvinte agora está no nosso wrapper, isolado do resto do app.\n    demandasWrapper.addEventListener('click', async (e) => {\n        const button = e.target.closest('button[data-action]');\n        // A verificação de containeres ainda é uma boa prática\n        if (!button || !button.closest('#demandas-pendentes-container, #demandas-historico-container')) return;\n\n        const id = button.dataset.id;\n        const action = button.dataset.action;\n        const isPendente = !!button.closest('#demandas-pendentes-container');\n\n        if (action === 'concluir') {\n            const confirmed = await showConfirmModal('Marcar esta demanda como concluída?');\n            if (!confirmed) return;\n            try {\n                const response = await fetch(`/api/demandas/${id}/concluir`, { method: 'PUT' });\n                if (!response.ok) throw new Error('Falha ao concluir demanda.');\n                showToast('Sucesso', 'Demanda movida para o histórico.', 'info');\n                carregarDemandas('pendentes');\n            } catch (e) { showToast('Erro', 'Não foi possível concluir.', 'danger'); }\n        }\n\n        if (action === 'excluir') {\n            const confirmed = await showConfirmModal('EXCLUIR PERMANENTEMENTE esta demanda?');\n            if (!confirmed) return;\n            try {\n                const response = await fetch(`/api/demandas/${id}`, { method: 'DELETE' });\n                if (!response.ok) throw new Error('Falha ao excluir demanda.');\n                showToast('Sucesso', 'Demanda excluída.', 'success');\n                // A lógica para recarregar o histórico estava errada, corrigido.\n                if (isPendente) carregarDemandas('pendentes');\n                else carregarDemandas('historico'); // CORREÇÃO LÓGICA\n            } catch (e) { showToast('Erro', 'Não foi possível excluir.', 'danger'); }\n        }\n    });\n\n    carregarLojasNoModal();\n    carregarDemandas('pendentes');\n}","size_bytes":7240},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/gerenciar-usuarios.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initGerenciarUsuariosPage(currentUser) {\n    // A função agora inicializa tanto usuários quanto backup\n    initUsuarios(currentUser);\n    initBackup();\n}\n\n// --- LÓGICA DE GERENCIAMENTO DE USUÁRIOS (Sem alterações) ---\nfunction initUsuarios(currentUser) {\n    const tableBody = document.getElementById('tabela-usuarios-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-usuario');\n    const modalEl = document.getElementById('modal-usuario');\n    \n    if (!tableBody || !btnAdicionar || !modalEl) return;\n\n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-usuario');\n    const modalTitle = document.getElementById('modalUsuarioLabel');\n    let usuariosCache = [];\n\n    async function carregarUsuarios() {\n        tableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch('/api/usuarios');\n            if (!response.ok) throw new Error('Falha ao carregar usuários.');\n            usuariosCache = await response.json();\n            \n            if (usuariosCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center\">Nenhum usuário cadastrado.</td></tr>';\n                return;\n            }\n            tableBody.innerHTML = usuariosCache.map(user => {\n                const isCurrentUser = user.id === currentUser.id;\n                const deleteButton = isCurrentUser ? `<button class=\"btn btn-sm btn-outline-secondary\" disabled title=\"Não é possível excluir o próprio usuário\"><i class=\"bi bi-trash\"></i></button>` : `<button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${user.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>`;\n                return `<tr><td class=\"ps-3\">${user.id}</td><td>${user.username}</td><td><span class=\"badge ${user.role === 'admin' ? 'bg-primary' : 'bg-secondary'}\">${user.role}</span></td><td class=\"text-end pe-3\"><button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${user.id}\" title=\"Editar\"><i class=\"bi bi-pencil\"></i></button> ${deleteButton}</td></tr>`;\n            }).join('');\n        } catch(e) {\n            tableBody.innerHTML = `<tr><td colspan=\"4\" class=\"text-center text-danger\">Erro ao carregar usuários.</td></tr>`;\n        }\n    }\n\n    function abrirModalParaAdicionar() {\n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Novo Usuário';\n        document.getElementById('usuario-id').value = '';\n        document.getElementById('usuario-password').required = true;\n        document.getElementById('usuario-password-label').textContent = 'Senha *';\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const user = usuariosCache.find(u => u.id === id);\n        if (!user) return;\n        modalForm.reset();\n        modalTitle.textContent = 'Editar Usuário';\n        document.getElementById('usuario-id').value = user.id;\n        document.getElementById('usuario-username').value = user.username;\n        document.getElementById('usuario-role').value = user.role;\n        document.getElementById('usuario-password').required = false;\n        document.getElementById('usuario-password-label').textContent = 'Nova Senha (deixe em branco para não alterar)';\n        modal.show();\n    }\n\n    async function excluirUsuario(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir o usuário #${id}?`);\n        if (!confirmed) return;\n        try { \n            const response = await fetch(`/api/usuarios/${id}`, { method: 'DELETE' });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', 'Usuário excluído com sucesso.', 'success');\n            carregarUsuarios();\n        } catch (e) {\n            showToast('Erro', e.message || 'Não foi possível excluir o usuário.', 'danger');\n        }\n    }\n    \n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const id = document.getElementById('usuario-id').value;\n        const data = { username: document.getElementById('usuario-username').value, password: document.getElementById('usuario-password').value, role: document.getElementById('usuario-role').value };\n        if (!data.password) delete data.password;\n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/usuarios/${id}` : '/api/usuarios';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', `Usuário ${id ? 'atualizado' : 'adicionado'} com sucesso.`, 'success');\n            modal.hide();\n            carregarUsuarios();\n        } catch(e) {\n            showToast('Erro', e.message || 'Não foi possível salvar o usuário.', 'danger');\n        }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n    \n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirUsuario(id);\n    });\n    \n    carregarUsuarios();\n}\n\n// --- LÓGICA DE BACKUP E RESTAURAÇÃO (NOVO) ---\nfunction initBackup() {\n    const dbSizeSpan = document.getElementById('db-size');\n    const btnLimparDb = document.getElementById('btn-limpar-db');\n    const btnRestaurarBackup = document.getElementById('btn-restaurar-backup');\n    const backupFileInput = document.getElementById('backup-file-input');\n\n    // Carrega o tamanho do DB ao entrar na aba\n    async function carregarInfoBackup() {\n        try {\n            const response = await fetch('/api/backup/info');\n            const data = await response.json();\n            dbSizeSpan.textContent = `${data.sizeMB} MB`;\n        } catch (error) {\n            dbSizeSpan.textContent = 'Erro ao carregar';\n            dbSizeSpan.classList.add('text-danger');\n        }\n    }\n\n    // Limpar DB\n    btnLimparDb.addEventListener('click', async () => {\n        const confirmed = await showConfirmModal('Você tem CERTEZA ABSOLUTA que deseja limpar todos os relatórios e demandas? Esta ação é IRREVERSÍVEL.');\n        if (!confirmed) return;\n\n        btnLimparDb.disabled = true;\n        btnLimparDb.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Limpando...';\n        try {\n            const response = await fetch('/api/backup/clear', { method: 'DELETE' });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', 'Banco de dados limpo com sucesso.', 'success');\n            carregarInfoBackup(); // Atualiza o tamanho\n        } catch (error) {\n            showToast('Erro', error.message, 'danger');\n        } finally {\n            btnLimparDb.disabled = false;\n            btnLimparDb.innerHTML = '<i class=\"bi bi-trash3-fill me-2\"></i>Limpar Relatórios e Demandas';\n        }\n    });\n\n    // Habilita/Desabilita o botão de restaurar conforme um arquivo é selecionado\n    backupFileInput.addEventListener('change', () => {\n        btnRestaurarBackup.disabled = !backupFileInput.files.length;\n    });\n\n    // Restaurar Backup\n    btnRestaurarBackup.addEventListener('click', async () => {\n        const file = backupFileInput.files[0];\n        if (!file) {\n            showToast('Atenção', 'Selecione um arquivo de backup (.db) primeiro.', 'info');\n            return;\n        }\n\n        const confirmed = await showConfirmModal('Você está prestes a SUBSTITUIR TODO o banco de dados atual. O sistema atual será perdido para sempre. Deseja continuar?');\n        if (!confirmed) return;\n\n        const formData = new FormData();\n        formData.append('backupFile', file);\n\n        btnRestaurarBackup.disabled = true;\n        btnRestaurarBackup.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Restaurando...';\n\n        try {\n            const response = await fetch('/api/backup/restore', {\n                method: 'POST',\n                body: formData\n            });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso!', result.message, 'success');\n            // Recarrega a página inteira para garantir que o sistema use o novo DB\n            setTimeout(() => window.location.reload(), 2000);\n        } catch (error) {\n            showToast('Erro na Restauração', error.message, 'danger');\n            btnRestaurarBackup.disabled = false;\n            btnRestaurarBackup.innerHTML = '<i class=\"bi bi-upload me-2\"></i>Restaurar';\n        }\n    });\n    \n    // Carrega as informações iniciais ao carregar a página\n    carregarInfoBackup();\n}","size_bytes":9189},"monitoramento-lojas-varejo-main/create-relatorio/server.js":{"content":"// =================================================================\n// SISTEMA DE FLUXO \n// =================================================================\nconst express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\nconst session = require('express-session');\nconst fs = require('fs');\nconst PDFDocument = require('pdfkit');\nconst ExcelJS = require('exceljs');\nconst multer = require('multer');\nconst pdf = require('pdf-parse');\n\n\nconst app = express();\nconst PORT = 3000;\n\n// --- CONFIGURAÇÃO GERAL ---\nconst dataDir = path.join(__dirname, 'data');\nif (!fs.existsSync(dataDir)) {\n    fs.mkdirSync(dataDir, { recursive: true });\n}\nconst DB_PATH = path.join(dataDir, 'relatorios.db');\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(session({\n    secret: 'chave-definitiva-123',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { httpOnly: true, maxAge: 24 * 60 * 60 * 1000 }\n}));\n\n// --- CONFIGURAÇÃO DO MULTER ---\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// --- MIDDLEWARES ---\nconst requirePageLogin = (req, res, next) => {\n    if (req.session && req.session.userId) {\n        return next();\n    }\n    res.redirect('/login');\n};\nconst requireAdmin = (req, res, next) => {\n    if (req.session && req.session.role === 'admin') {\n        return next();\n    }\n    res.status(403).json({ error: 'Acesso negado.' });\n};\n\n// --- BANCO DE DADOS ---\nlet db = new sqlite3.Database(DB_PATH, err => {\n    if (err) {\n        return console.error(\"Erro fatal ao conectar ao DB:\", err.message);\n    }\n    console.log(\"Conectado ao banco de dados SQLite.\");\n    db.serialize(() => {\n        db.run(`CREATE TABLE IF NOT EXISTS usuarios (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL, role TEXT NOT NULL)`);\n        db.run(`CREATE TABLE IF NOT EXISTS lojas (id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT UNIQUE NOT NULL, status TEXT, funcao_especial TEXT, observacoes TEXT)`);\n        db.run(`CREATE TABLE IF NOT EXISTS relatorios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT, loja TEXT, data TEXT, hora_abertura TEXT, hora_fechamento TEXT,\n            gerente_entrada TEXT, gerente_saida TEXT, clientes_monitoramento INTEGER, vendas_monitoramento INTEGER,\n            clientes_loja INTEGER, vendas_loja INTEGER, total_vendas_dinheiro REAL, ticket_medio TEXT, pa TEXT,\n            quantidade_trocas INTEGER, nome_funcao_especial TEXT, quantidade_funcao_especial INTEGER,\n            quantidade_omni INTEGER, vendedores TEXT, nome_arquivo TEXT, enviado_por_usuario TEXT,\n            enviado_em DATETIME DEFAULT CURRENT_TIMESTAMP, vendas_cartao INTEGER, vendas_pix INTEGER, vendas_dinheiro INTEGER\n        )`);\n        db.run(`CREATE TABLE IF NOT EXISTS demandas (id INTEGER PRIMARY KEY AUTOINCREMENT, loja_nome TEXT NOT NULL, descricao TEXT NOT NULL, tag TEXT DEFAULT 'Normal', status TEXT DEFAULT 'pendente', criado_por_usuario TEXT, concluido_por_usuario TEXT, criado_em DATETIME DEFAULT CURRENT_TIMESTAMP, concluido_em DATETIME)`);\n        const adminUsername = 'admin';\n        const correctPassword = 'admin';\n        db.get('SELECT * FROM usuarios WHERE username = ?', [adminUsername], (err, row) => {\n            if (err) return;\n            if (!row) {\n                db.run('INSERT INTO usuarios (username, password, role) VALUES (?, ?, ?)', [adminUsername, correctPassword, 'admin']);\n            } else if (row.password !== correctPassword) {\n                db.run('UPDATE usuarios SET password = ? WHERE username = ?', [correctPassword, adminUsername]);\n            }\n        });\n    });\n});\n\n// --- ROTAS DE PÁGINAS ---\napp.get('/login', (req, res) => res.sendFile(path.join(__dirname, 'views', 'login.html')));\napp.get('/live', requirePageLogin, (req, res) => res.sendFile(path.join(__dirname, 'views', 'live.html')));\napp.get(['/', '/admin', '/consulta', '/demandas', '/gerenciar-lojas', '/novo-relatorio', '/gerenciar-usuarios'], requirePageLogin, (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\napp.get('/content/:page', requirePageLogin, (req, res) => {\n    const allowedPages = ['admin', 'consulta', 'demandas', 'gerenciar-lojas', 'novo-relatorio', 'gerenciar-usuarios'];\n    if (allowedPages.includes(req.params.page)) {\n        res.sendFile(path.join(__dirname, 'views', `${req.params.page}.html`));\n    } else {\n        res.status(404).send('Página não encontrada');\n    }\n});\n\n\n// --- ROTAS DE API ---\n\n// <<<---------------------------------------------------->>>\n// <<<                    leitura PDF                     >>>\n// <<<---------------------------------------------------->>>\napp.post('/api/process-pdf', requirePageLogin, upload.single('pdfFile'), async (req, res) => {\n    if (!req.file) {\n        return res.status(400).json({ error: \"Nenhum arquivo PDF enviado.\" });\n    }\n\n    try {\n        const data = await pdf(req.file.buffer);\n        const text = data.text;\n        const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n\n        // Função para converter valores no formato \"1.234,56\" para número\n        const parseBrazilianNumber = (str) => {\n            if (!str) return 0;\n            return parseFloat(String(str).replace(/\\./g, '').replace(',', '.'));\n        };\n\n        let extractedData;\n\n        // VERIFICA O TIPO DE PDF\n        if (text.includes(\"Desempenho de vendedores\")) {\n            // --- LÓGICA PARA PDF TIPO OMNI ---\n            console.log(\"Processando PDF estilo Omni (Desempenho de vendedores)...\");\n\n            const linhaTotais = lines.find(l => l.startsWith('Totais:'));\n            if (!linhaTotais) {\n                throw new Error(\"Linha 'Totais:' não encontrada no PDF.\");\n            }\n\n            // Extrai todos os números da linha de totais\n            const valores = linhaTotais.replace('Totais:', '').trim().split(/\\s+/);\n            \n            // Mapeia os valores\n            const vendas_loja = Math.round(parseBrazilianNumber(valores[1])); // Total de Vendas\n            const pa = parseBrazilianNumber(valores[2]); // Peças/Venda\n            const total_vendas_dinheiro = parseBrazilianNumber(valores[3]); // Vl. Vendas\n            const ticket_medio = parseBrazilianNumber(valores[4]); // Ticket Médio\n            const clientes_loja = parseInt(valores[5], 10); // Abordagens\n\n            // Extrai dados \n            const storeNameMatch = text.match(/(\\d{1,}-\\d{6}-.+)/);\n            const storeName = storeNameMatch ? storeNameMatch[1].trim() : \"Loja não identificada\";\n            \n            const dateMatch = text.match(/Período: (\\d{2}\\/\\d{2}\\/\\d{4})/);\n            const reportDate = dateMatch ? new Date(dateMatch[1].split('/').reverse().join('-')).toISOString().split('T')[0] : null;\n\n            const vendorLines = lines.filter(line => line.match(/^\\d+\\s+.+\\s+\\(\\d+\\)/));\n            const vendedores = vendorLines.map(line => {\n                const nameMatch = line.match(/^\\d+\\s+(.*?)\\s+\\(\\d+\\)/);\n                const nome = nameMatch ? nameMatch[1].trim() : \"Desconhecido\";\n                \n                const statsPart = line.replace(nameMatch[0], '').trim();\n                const stats = statsPart.split(/\\s+/);\n                \n                const vendas = Math.round(parseBrazilianNumber(stats[1]));\n                const atendimentos = parseInt(stats[5], 10) || 0;\n                \n                return { nome, vendas, atendimentos };\n            });\n\n            extractedData = {\n                loja: storeName,\n                data: reportDate,\n                clientes_loja: clientes_loja,\n                vendas_loja: vendas_loja,\n                total_vendas_dinheiro: `R$ ${total_vendas_dinheiro.toFixed(2).replace('.', ',')}`,\n                ticket_medio: `R$ ${ticket_medio.toFixed(2).replace('.', ',')}`,\n                pa: pa.toFixed(2).replace('.', ','),\n                vendedores: vendedores\n            };\n\n        } else {\n            // --- LÓGICA PARA PDF TIPO BUSCA TÉCNICA ---\n            console.log(\"Processando PDF estilo Busca Técnica...\");\n            \n            const linhaTotais = lines.find(l => l.includes('Totais:'));\n            const idxTotais = lines.indexOf(linhaTotais);\n            const linhaDados = lines[idxTotais + 1] || '';\n            const linhaLimpa = linhaDados.replace(/(\\d{1,3})\\.(\\d{3},\\d{2})/g, '$1.$2 ').replace(/ +/g, ' ').trim();\n            const valoresTotais = linhaLimpa.match(/(\\d{1,3}(?:\\.\\d{3})*,\\d{2})|(\\d+\\.\\d{2})|(\\d+)/g);\n            \n            if (!valoresTotais || valoresTotais.length < 7) {\n                throw new Error(\"Não foi possível extrair os valores corretamente da linha Totais do PDF.\");\n            }\n            \n            const totalVendasValor = parseBrazilianNumber(valoresTotais[0]);\n            const pa = parseBrazilianNumber(valoresTotais[valoresTotais.length - 4]);\n            const ticketMedio = parseBrazilianNumber(valoresTotais[valoresTotais.length - 3]);\n            \n            const linhaSplitada = linhaLimpa.split(' ');\n            const indexDoValorTotal = linhaSplitada.findIndex(v => v.includes(valoresTotais[0]));\n            const totalAtendimentos = parseInt(linhaSplitada[indexDoValorTotal + 2], 10) || 0;\n            \n            const storeNameMatch = text.match(/^\\s*\\d{3}\\s*-\\s*(.+)/m);\n            const storeName = storeNameMatch ? storeNameMatch[1].trim().replace(/\\s+STORE$/, \"\") : \"Loja não identificada\";\n            \n            const dateMatch = text.match(/Período de (\\d{2}\\/\\d{2}\\/\\d{4}) a (\\d{2}\\/\\d{2}\\/\\d{4})/);\n            const reportDate = dateMatch ? new Date(dateMatch[1].split('/').reverse().join('-')).toISOString().split('T')[0] : null;\n\n            const vendorLines = lines.filter(line => /^\\d+º/.test(line));\n            const vendedores = vendorLines.map(line => {\n                const vendorParts = line.trim().split(/\\s+/);\n                const nome = vendorParts.slice(2, -7).join(' ');\n                const atendimentos = parseInt(vendorParts[vendorParts.length - 4], 10) || 0;\n                return { nome, vendas: atendimentos, atendimentos };\n            });\n\n            extractedData = {\n                loja: storeName,\n                data: reportDate,\n                clientes_loja: totalAtendimentos,\n                vendas_loja: totalAtendimentos,\n                total_vendas_dinheiro: `R$ ${totalVendasValor.toFixed(2).replace('.', ',')}`,\n                ticket_medio: `R$ ${ticketMedio.toFixed(2).replace('.', ',')}`,\n                pa: pa.toFixed(2).replace('.', ','),\n                vendedores: vendedores\n            };\n        }\n\n        res.json({ success: true, data: extractedData });\n\n    } catch (error) {\n        console.error(\"### ERRO NO PROCESSAMENTO DO PDF ###\", error);\n        res.status(500).json({ error: error.message || \"Erro ao processar o PDF.\" });\n    }\n});\n// <<<---------------------------------------------------->>>\n// <<<          FIM DA API DE PDF                         >>>\n// <<<---------------------------------------------------->>>\n\n\n// APIs DE SESSÃO E USUÁRIOS \napp.post('/api/login', (req, res) => { const { username, password } = req.body; db.get('SELECT * FROM usuarios WHERE username = ? AND password = ?', [username, password], (err, user) => { if (err || !user) return res.status(401).json({ message: 'Credenciais inválidas.' }); req.session.userId = user.id; req.session.username = user.username; req.session.role = user.role; res.json({ success: true }); }); });\napp.get('/logout', (req, res) => { req.session.destroy(() => res.redirect('/login')); });\napp.get('/api/session-info', requirePageLogin, (req, res) => { res.json({ id: req.session.userId, username: req.session.username, role: req.session.role }); });\napp.get('/api/usuarios', requirePageLogin, requireAdmin, (req, res) => { db.all(\"SELECT id, username, role FROM usuarios ORDER BY username\", (err, users) => { if (err) return res.status(500).json({ error: err.message }); res.json(users || []); }); });\napp.post('/api/usuarios', requirePageLogin, requireAdmin, (req, res) => { const { username, password, role } = req.body; if (!username || !password || !role) return res.status(400).json({ error: 'Todos os campos são obrigatórios.' }); db.run('INSERT INTO usuarios (username, password, role) VALUES (?, ?, ?)', [username, password, role], function (err) { if (err) return res.status(500).json({ error: 'Erro ao criar usuário. O nome de usuário já pode existir.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.put('/api/usuarios/:id', requirePageLogin, requireAdmin, (req, res) => { const { id } = req.params; const { username, password, role } = req.body; if (!username || !role) return res.status(400).json({ error: 'Username e Cargo são obrigatórios.' }); const sql = password ? 'UPDATE usuarios SET username = ?, password = ?, role = ? WHERE id = ?' : 'UPDATE usuarios SET username = ?, role = ? WHERE id = ?'; const params = password ? [username, password, role, id] : [username, role, id]; db.run(sql, params, function (err) { if (err) return res.status(500).json({ error: 'Erro ao atualizar usuário.' }); res.json({ success: true }); }); });\napp.delete('/api/usuarios/:id', requirePageLogin, requireAdmin, (req, res) => { const { id } = req.params; if (id == req.session.userId) return res.status(403).json({ error: 'Não é permitido excluir o próprio usuário logado.' }); db.run(\"DELETE FROM usuarios WHERE id = ?\", [id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir usuário.' }); if (this.changes === 0) return res.status(404).json({ error: \"Usuário não encontrado.\" }); res.json({ success: true }); }); });\n\n// APIs DE LOJAS \napp.get('/api/lojas', requirePageLogin, (req, res) => { let query = \"SELECT * FROM lojas\"; const params = []; if (req.query.status) { query += \" WHERE status = ?\"; params.push(req.query.status); } query += \" ORDER BY nome\"; db.all(query, params, (err, lojas) => { if (err) return res.status(500).json({ error: err.message }); res.json(lojas || []); }); });\napp.post('/api/lojas', requirePageLogin, (req, res) => { const { nome, status, funcao_especial, observacoes } = req.body; db.run('INSERT INTO lojas (nome, status, funcao_especial, observacoes) VALUES (?, ?, ?, ?)', [nome, status, funcao_especial, observacoes], function (err) { if (err) return res.status(500).json({ error: 'Erro ao criar loja. O nome já pode existir.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.put('/api/lojas/:id', requirePageLogin, (req, res) => { const { id } = req.params; const { nome, status, funcao_especial, observacoes } = req.body; db.run('UPDATE lojas SET nome = ?, status = ?, funcao_especial = ?, observacoes = ? WHERE id = ?', [nome, status, funcao_especial, observacoes, id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao atualizar loja.' }); res.json({ success: true }); }); });\napp.delete('/api/lojas/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM lojas WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir loja.' }); if (this.changes === 0) return res.status(404).json({ error: \"Loja não encontrada.\" }); res.json({ success: true }); }); });\n\n// APIs DE RELATÓRIOS\nconst processarRelatorio = (r) => { if (!r) return null; const vendas_monitoramento_total = (parseInt(r.vendas_monitoramento, 10) || 0) + (parseInt(r.quantidade_omni, 10) || 0); const tx_conversao_monitoramento = (parseInt(r.clientes_monitoramento, 10) || 0) > 0 ? (vendas_monitoramento_total / r.clientes_monitoramento) * 100 : 0; const tx_conversao_loja = (parseInt(r.clientes_loja, 10) || 0) > 0 ? ((parseInt(r.vendas_loja, 10) || 0) / r.clientes_loja) * 100 : 0; let vendedores_processados = []; try { const vendedores = JSON.parse(r.vendedores || '[]'); vendedores_processados = vendedores.map(v => ({ ...v, tx_conversao: (v.atendimentos > 0 ? ((v.vendas / v.atendimentos) * 100) : 0).toFixed(2) })); } catch (e) {} return { ...r, vendas_monitoramento_total, tx_conversao_monitoramento: tx_conversao_monitoramento.toFixed(2), tx_conversao_loja: tx_conversao_loja.toFixed(2), vendedores_processados }; };\napp.get('/api/relatorios', requirePageLogin, (req, res) => { const whereClauses = []; const params = []; if (req.query.loja) { whereClauses.push(\"loja = ?\"); params.push(req.query.loja); } if (req.query.data_inicio) { whereClauses.push(\"data >= ?\"); params.push(req.query.data_inicio); } if (req.query.data_fim) { whereClauses.push(\"data <= ?\"); params.push(req.query.data_fim); } const whereString = whereClauses.length > 0 ? \" WHERE \" + whereClauses.join(\" AND \") : \"\"; const sortOrder = req.query.sortOrder === 'asc' ? 'ASC' : 'DESC'; db.get(`SELECT COUNT(*) as total FROM relatorios` + whereString, params, (err, row) => { if (err) return res.status(500).json({ error: err.message }); const total = row ? row.total : 0; const limit = parseInt(req.query.limit) || 20; const offset = parseInt(req.query.offset) || 0; const query = `SELECT id, loja, data, total_vendas_dinheiro FROM relatorios` + whereString + ` ORDER BY id ${sortOrder} LIMIT ? OFFSET ?`; db.all(query, [...params, limit, offset], (err, relatorios) => { if (err) return res.status(500).json({ error: err.message }); res.json({ relatorios: relatorios || [], total }); }); }); });\napp.post('/api/relatorios', requirePageLogin, (req, res) => { const d = req.body; const sql = `INSERT INTO relatorios (loja, data, hora_abertura, hora_fechamento, gerente_entrada, gerente_saida, clientes_monitoramento, vendas_monitoramento, clientes_loja, vendas_loja, total_vendas_dinheiro, ticket_medio, pa, quantidade_trocas, quantidade_omni, quantidade_funcao_especial, vendedores, enviado_por_usuario, vendas_cartao, vendas_pix, vendas_dinheiro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`; const params = [ d.loja, d.data, d.hora_abertura, d.hora_fechamento, d.gerente_entrada, d.gerente_saida, parseInt(d.clientes_monitoramento, 10) || 0, parseInt(d.vendas_monitoramento, 10) || 0, parseInt(d.clientes_loja, 10) || 0, parseInt(d.vendas_loja, 10) || 0, parseFloat(String(d.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) || 0, d.ticket_medio || 'R$ 0,00', d.pa || '0.00', parseInt(d.quantidade_trocas, 10) || 0, parseInt(d.quantidade_omni, 10) || 0, parseInt(d.quantidade_funcao_especial, 10) || 0, d.vendedores || '[]', req.session.username, parseInt(d.vendas_cartao, 10) || 0, parseInt(d.vendas_pix, 10) || 0, parseInt(d.vendas_dinheiro, 10) || 0 ]; db.run(sql, params, function (err) { if (err) { console.error(\"Erro ao inserir relatório:\", err.message); return res.status(500).json({ error: 'Falha ao salvar relatório.' }); } res.status(201).json({ success: true, id: this.lastID }); }); });\napp.get('/api/relatorios/:id', requirePageLogin, (req, res) => { db.get(\"SELECT * FROM relatorios WHERE id = ?\", [req.params.id], (err, relatorio) => { if (err) return res.status(500).json({ error: err.message }); if (!relatorio) return res.status(404).json({ error: \"Relatório não encontrado\" }); res.json({ relatorio }); }); });\napp.put('/api/relatorios/:id', requirePageLogin, (req, res) => { const { id } = req.params; const d = req.body; const sql = `UPDATE relatorios SET loja=?, data=?, hora_abertura=?, hora_fechamento=?, gerente_entrada=?, gerente_saida=?, clientes_monitoramento=?, vendas_monitoramento=?, clientes_loja=?, vendas_loja=?, total_vendas_dinheiro=?, ticket_medio=?, pa=?, quantidade_trocas=?, quantidade_omni=?, quantidade_funcao_especial=?, vendedores=?, vendas_cartao=?, vendas_pix=?, vendas_dinheiro=? WHERE id=?`; const params = [ d.loja, d.data, d.hora_abertura, d.hora_fechamento, d.gerente_entrada, d.gerente_saida, parseInt(d.clientes_monitoramento, 10) || 0, parseInt(d.vendas_monitoramento, 10) || 0, parseInt(d.clientes_loja, 10) || 0, parseInt(d.vendas_loja, 10) || 0, parseFloat(String(d.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) || 0, d.ticket_medio || 'R$ 0,00', d.pa || '0.00', parseInt(d.quantidade_trocas, 10) || 0, parseInt(d.quantidade_omni, 10) || 0, parseInt(d.quantidade_funcao_especial, 10) || 0, d.vendedores || '[]', parseInt(d.vendas_cartao, 10) || 0, parseInt(d.vendas_pix, 10) || 0, parseInt(d.vendas_dinheiro, 10) || 0, id ]; db.run(sql, params, function (err) { if (err) { console.error(\"Erro ao atualizar relatório:\", err.message); return res.status(500).json({ error: 'Falha ao atualizar o relatório.' }); } if (this.changes === 0) return res.status(404).json({ error: \"Relatório não encontrado.\" }); res.json({ success: true, id: id }); }); });\napp.delete('/api/relatorios/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM relatorios WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: err.message }); if (this.changes === 0) return res.status(404).json({ error: \"Relatório não encontrado\" }); res.json({ success: true, message: \"Relatório excluído.\" }); }); });\nconst formatCurrency = (value) => { const numberValue = Number(value) || 0; return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(numberValue); };\nconst formatarRelatorioTexto = (r) => { const rp = processarRelatorio(r); if (!rp) return \"Erro ao processar relatório.\"; let equipeInfo = 'Nenhum vendedor registrado.\\n'; if (rp.vendedores_processados && rp.vendedores_processados.length > 0) { equipeInfo = rp.vendedores_processados.map(v => { return `${v.nome}: ${v.atendimentos} Atendimentos / ${v.vendas} Vendas / ${v.tx_conversao}%`; }).join('\\n'); } let funcaoEspecialInfo = ''; if (rp.funcao_especial === \"Omni\") { funcaoEspecialInfo = `Omni: ${rp.quantidade_omni || 0}\\n`; } else if (rp.funcao_especial === \"Busca por Assist. Tec.\") { funcaoEspecialInfo = `Busca por assist tec: ${rp.quantidade_funcao_especial || 0}\\n`; } const totalVendasQuantidade = (rp.vendas_cartao || 0) + (rp.vendas_pix || 0) + (rp.vendas_dinheiro || 0); const content = ` DATA: ${new Date(rp.data).toLocaleDateString('pt-BR', { timeZone: 'UTC' })} \\n\\nClientes: ${rp.clientes_monitoramento || 0}\\nBluve: ${rp.clientes_loja || 0}\\nVendas / Monitoramento: ${rp.vendas_monitoramento_total || 0}\\nVendas / Loja: ${rp.vendas_loja || 0}\\nTaxa de conversão da loja: ${rp.tx_conversao_loja || '0.00'}%\\nTaxa de conversão do monitoramento: ${rp.tx_conversao_monitoramento || '0.00'}%\\n\\nAbertura: ${rp.hora_abertura || '--:--'} - ${rp.hora_fechamento || '--:--'}\\nGerente: ${rp.gerente_entrada || '--:--'} - ${rp.gerente_saida || '--:--'}\\nVendas em Cartão: ${rp.vendas_cartao || 0}\\nVendas em Pix: ${rp.vendas_pix || 0}\\nVendas em Dinheiro: ${rp.vendas_dinheiro || 0}\\n${funcaoEspecialInfo}Total vendas: ${totalVendasQuantidade}\\nTroca/Devolução: ${rp.quantidade_trocas || 0}\\n\\nDesempenho Equipe:\\n\\n${equipeInfo}\\n\\nTM: ${rp.ticket_medio || 'R$ 0,00'} / P.A: ${rp.pa || '0.00'} / Total: ${formatCurrency(rp.total_vendas_dinheiro)} / `; return content.trim(); };\napp.get('/api/relatorios/:id/txt', requirePageLogin, (req, res) => { const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE r.id = ? `; db.get(sql, [req.params.id], (err, r) => { if (err || !r) return res.status(404).send('Relatório não encontrado'); res.setHeader('Content-disposition', `attachment; filename=relatorio_${r.loja.replace(/ /g, '_')}_${r.data}.txt`); res.setHeader('Content-type', 'text/plain; charset=utf-8'); res.send(formatarRelatorioTexto(r)); }); });\napp.get('/api/relatorios/:id/pdf', requirePageLogin, (req, res) => { const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE r.id = ? `; db.get(sql, [req.params.id], (err, r) => { if (err || !r) return res.status(404).send('Relatório não encontrado'); const doc = new PDFDocument({ margin: 50, size: 'A4' }); res.setHeader('Content-disposition', `inline; filename=\"relatorio_${r.loja.replace(/ /g, '_')}_${r.data}.pdf\"`); res.setHeader('Content-type', 'application/pdf'); doc.pipe(res); doc.fontSize(18).font('Helvetica-Bold').text(r.loja.toUpperCase(), { align: 'center' }).moveDown(1); doc.fontSize(11).font('Helvetica').text(formatarRelatorioTexto(r), { align: 'left' }); doc.end(); }); });\n\n\n// ROTA DE EXPORTAÇÃO PARA EXCEL \napp.get('/api/export/excel', requirePageLogin, async (req, res) => { const { month, year } = req.query; if (!month || !year) { return res.status(400).json({ error: 'Mês e ano são obrigatórios.' }); } const monthFormatted = month.toString().padStart(2, '0'); const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE strftime('%Y-%m', r.data) = ? ORDER BY r.loja, r.data `; db.all(sql, [`${year}-${monthFormatted}`], async (err, rows) => { if (err) { console.error(\"Erro ao buscar relatórios para Excel:\", err); return res.status(500).json({ error: 'Erro ao buscar relatórios.' }); } if (rows.length === 0) { return res.status(404).json({ error: 'Nenhum relatório encontrado para o período.' }); } const workbook = new ExcelJS.Workbook(); const safeParseFloat = (value) => { if (typeof value === 'number') { return value; } if (typeof value === 'string') { const cleaned = value.replace(/[R$\\s]/g, '').replace(/\\./g, '').replace(',', '.'); const num = parseFloat(cleaned); return isNaN(num) ? 0 : num; } return 0; }; const relatoriosPorLoja = rows.reduce((acc, row) => { const loja = row.loja; if (!acc[loja]) { acc[loja] = { funcao_especial: row.funcao_especial || 'Não definido', relatorios: [] }; } acc[loja].relatorios.push(processarRelatorio(row)); return acc; }, {}); for (const lojaNome in relatoriosPorLoja) { const lojaData = relatoriosPorLoja[lojaNome]; const worksheet = workbook.addWorksheet(lojaNome.substring(0, 30)); worksheet.mergeCells('A1:M1'); const tituloCell = worksheet.getCell('A1'); tituloCell.value = lojaNome.toUpperCase(); tituloCell.font = { name: 'Arial Black', size: 16, bold: true, color: { argb: 'FF44546A' } }; tituloCell.alignment = { vertical: 'middle', horizontal: 'center' }; worksheet.getRow(1).height = 30; const headers = [ 'DATA', 'BLUVE', 'VENDAS (L)', 'TX DE CONVERSÃO (L)', 'CLIENTES (M)', 'VENDAS (M)', 'TX DE CONVERSÃO (M)', 'P.A', 'TM', 'VALOR TOTAL', 'TROCAS' ]; let funcaoEspecialHeader = 'FUNÇÃO ESPECIAL'; if (lojaData.funcao_especial === 'Omni') { funcaoEspecialHeader = 'OMNI'; } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { funcaoEspecialHeader = 'BUSCA P/ ASSIST. TEC.'; } headers.push(funcaoEspecialHeader); headers.push('ENVIADO POR'); const headerRow = worksheet.getRow(3); headerRow.values = headers; headerRow.height = 35; headerRow.eachCell(cell => { cell.font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 10 }; cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true }; cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } }; cell.border = { top: { style: 'thin', color: { argb: 'FFBFBFBF' } }, left: { style: 'thin', color: { argb: 'FFBFBFBF' } }, bottom: { style: 'thin', color: { argb: 'FFBFBFBF' } }, right: { style: 'thin', color: { argb: 'FFBFBFBF' } } }; }); lojaData.relatorios.forEach(r => { const rowData = [ new Date(r.data + 'T00:00:00'), parseInt(r.clientes_loja, 10) || 0, parseInt(r.vendas_loja, 10) || 0, parseFloat(r.tx_conversao_loja) / 100, parseInt(r.clientes_monitoramento, 10) || 0, parseInt(r.vendas_monitoramento_total, 10) || 0, parseFloat(r.tx_conversao_monitoramento) / 100, parseFloat(String(r.pa).replace(',', '.')) || 0, safeParseFloat(r.ticket_medio), r.total_vendas_dinheiro, parseInt(r.quantidade_trocas, 10) || 0 ]; if (lojaData.funcao_especial === 'Omni') { rowData.push(parseInt(r.quantidade_omni, 10) || 0); } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { rowData.push(parseInt(r.quantidade_funcao_especial, 10) || 0); } else { rowData.push(0); } rowData.push(r.enviado_por_usuario || '-'); const row = worksheet.addRow(rowData); row.getCell(1).numFmt = 'DD/MM/YYYY'; row.getCell(4).numFmt = '0.00%'; row.getCell(7).numFmt = '0.00%'; row.getCell(8).numFmt = '0.00'; row.getCell(9).numFmt = 'R$ #,##0.00'; row.getCell(10).numFmt = 'R$ #,##0.00'; row.eachCell(cell => { cell.alignment = { vertical: 'middle', horizontal: 'center' }; }); }); worksheet.columns.forEach(column => { let maxLength = 0; column.eachCell({ includeEmpty: true }, cell => { const length = cell.value ? cell.value.toString().length : 10; if (length > maxLength) { maxLength = length; } }); column.width = Math.max(12, maxLength + 3); }); worksheet.getColumn(4).width = 20; worksheet.getColumn(7).width = 20; worksheet.getColumn(12).width = 22; } res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); res.setHeader('Content-Disposition', `attachment; filename=\"Relatorios_${year}-${monthFormatted}.xlsx\"`); await workbook.xlsx.write(res); res.end(); }); });\n\n// APIs DE DASHBOARD, DEMANDAS, BACKUP E RESTORE \napp.get('/api/dashboard-data', requirePageLogin, (req, res) => { let whereClauses = []; let params = []; if (req.query.loja && req.query.loja !== 'todas') { whereClauses.push('loja = ?'); params.push(req.query.loja); } if (req.query.data_inicio) { whereClauses.push('data >= ?'); params.push(req.query.data_inicio); } if (req.query.data_fim) { whereClauses.push('data <= ?'); params.push(req.query.data_fim); } const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : ''; const sql = `SELECT COALESCE(SUM(clientes_monitoramento),0) as total_clientes_monitoramento, COALESCE(SUM(vendas_monitoramento),0) as total_vendas_monitoramento, COALESCE(SUM(clientes_loja),0) as total_clientes_loja, COALESCE(SUM(vendas_loja),0) as total_vendas_loja, COALESCE(SUM(quantidade_omni),0) as total_omni FROM relatorios ${whereString}`; db.get(sql, params, (err, row) => { if (err) return res.status(500).json({ error: err.message }); const vendas_m_total = (row.total_vendas_monitoramento || 0) + (row.total_omni || 0); res.json({ ...row, tx_conversao_monitoramento: (row.total_clientes_monitoramento > 0 ? (vendas_m_total / row.total_clientes_monitoramento) * 100 : 0), tx_conversao_loja: (row.total_clientes_loja > 0 ? (row.total_vendas_loja / row.total_clientes_loja) * 100 : 0) }); }); });\napp.get('/api/ranking', requirePageLogin, (req, res) => { let whereClauses = []; let params = []; if (req.query.data_inicio) { whereClauses.push('r.data >= ?'); params.push(req.query.data_inicio); } if (req.query.data_fim) { whereClauses.push('r.data <= ?'); params.push(req.query.data_fim); } const joinCondition = whereClauses.length > 0 ? `AND ${whereClauses.join(' AND ')}` : ''; const sql = `SELECT l.nome as loja, COALESCE(SUM(r.clientes_loja), 0) as total_clientes_loja, COALESCE(SUM(r.vendas_loja), 0) as total_vendas_loja, COALESCE(SUM(r.clientes_monitoramento), 0) as total_clientes_monitoramento, COALESCE(SUM(r.vendas_monitoramento), 0) as total_vendas_monitoramento, COALESCE(SUM(r.quantidade_omni), 0) as total_omni FROM lojas l LEFT JOIN relatorios r ON l.nome = r.loja ${joinCondition} WHERE l.status = 'ativa' GROUP BY l.nome`; db.all(sql, params, (err, rows) => { if (err) return res.status(500).json({ error: err.message }); const ranking = rows.map(r => { const vendas_m_total = (r.total_vendas_monitoramento || 0) + (r.total_omni || 0); return { ...r, tx_loja: (r.total_clientes_loja > 0 ? (r.total_vendas_loja / r.total_clientes_loja) * 100 : 0), tx_monitoramento: (r.total_clientes_monitoramento > 0 ? (vendas_m_total / r.total_clientes_monitoramento) * 100 : 0) } }); res.json(ranking); }); });\napp.get('/api/dashboard/chart-data', requirePageLogin, (req, res) => { const { loja, data_inicio, data_fim } = req.query; let whereClauses = []; let params = []; if (loja && loja !== 'todas') { whereClauses.push('loja = ?'); params.push(loja); } if (data_inicio) { whereClauses.push('data >= ?'); params.push(data_inicio); } if (data_fim) { whereClauses.push('data <= ?'); params.push(data_fim); } if (whereClauses.length === 0) { const date = new Date(); date.setDate(date.getDate() - 30); const startDate = date.toISOString().slice(0, 10); whereClauses.push('data >= ?'); params.push(startDate); } const whereString = `WHERE ${whereClauses.join(' AND ')}`; const sql = `SELECT data, SUM(clientes_loja) as total_clientes_loja, SUM(vendas_loja) as total_vendas_loja, SUM(clientes_monitoramento) as total_clientes_monitoramento, SUM(vendas_monitoramento) as total_vendas_monitoramento, SUM(quantidade_omni) as total_omni FROM relatorios ${whereString} GROUP BY data ORDER BY data ASC`; db.all(sql, params, (err, rows) => { if (err) return res.status(500).json({ error: 'Erro ao buscar dados para o gráfico.' }); const labels = []; const txConversaoLoja = []; const txConversaoMonitoramento = []; rows.forEach(row => { labels.push(new Date(row.data).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', timeZone: 'UTC' })); const vendas_m_total = (row.total_vendas_monitoramento || 0) + (row.total_omni || 0); const tx_m = row.total_clientes_monitoramento > 0 ? (vendas_m_total / row.total_clientes_monitoramento) * 100 : 0; const tx_l = row.total_clientes_loja > 0 ? (row.total_vendas_loja / row.total_clientes_loja) * 100 : 0; txConversaoLoja.push(tx_l.toFixed(2)); txConversaoMonitoramento.push(tx_m.toFixed(2)); }); res.json({ labels, txConversaoLoja, txConversaoMonitoramento }); }); });\napp.post('/api/demandas', requirePageLogin, (req, res) => { const { loja_nome, descricao, tag } = req.body; db.run('INSERT INTO demandas (loja_nome, descricao, tag, criado_por_usuario) VALUES (?, ?, ?, ?)', [loja_nome, descricao, tag, req.session.username], function (err) { if (err) return res.status(500).json({ error: 'Falha ao salvar demanda.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.get('/api/demandas/:status', requirePageLogin, (req, res) => { const status = req.params.status === 'pendentes' ? 'pendente' : 'concluido'; db.all(`SELECT * FROM demandas WHERE status = ? ORDER BY criado_em DESC`, [status], (err, demandas) => { if (err) return res.status(500).json({ error: err.message }); res.json(demandas || []); }); });\napp.put('/api/demandas/:id/concluir', requirePageLogin, (req, res) => { db.run(\"UPDATE demandas SET status = 'concluido', concluido_por_usuario = ?, concluido_em = CURRENT_TIMESTAMP WHERE id = ?\", [req.session.username, req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao concluir demanda.' }); if (this.changes === 0) return res.status(404).json({ error: 'Demanda não encontrada.' }); res.json({ success: true }); }); });\napp.delete('/api/demandas/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM demandas WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir demanda.' }); if (this.changes === 0) return res.status(404).json({ error: \"Demanda não encontrada.\" }); res.json({ success: true }); }); });\napp.get('/api/backup/info', requirePageLogin, requireAdmin, (req, res) => {\n    try {\n        const stats = fs.statSync(DB_PATH);\n        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);\n        res.json({ sizeMB });\n    } catch (error) {\n        console.error(\"Erro ao obter informações do backup:\", error);\n        res.status(500).json({ error: 'Não foi possível obter informações do banco de dados.' });\n    }\n});\n\n// API para limpar tabelas específicas do banco de dados\napp.delete('/api/backup/clear', requirePageLogin, requireAdmin, (req, res) => {\n    db.serialize(() => {\n        db.run(\"DELETE FROM relatorios\", (err) => {\n            if (err) return res.status(500).json({ error: 'Erro ao limpar relatórios.' });\n        });\n        db.run(\"DELETE FROM demandas\", (err) => {\n            if (err) return res.status(500).json({ error: 'Erro ao limpar demandas.' });\n        });\n        res.json({ success: true, message: 'Relatórios e demandas foram limpos.' });\n    });\n});\napp.get('/api/backup/download', requirePageLogin, requireAdmin, (req, res) => { const date = new Date().toISOString().slice(0, 10); const fileName = `backup_reports_${date}.db`; res.download(DB_PATH, fileName, (err) => { if (err && !res.headersSent) { res.status(500).send(\"Não foi possível baixar o arquivo de backup.\"); } }); });\napp.post('/api/backup/restore', requirePageLogin, requireAdmin, upload.single('backupFile'), (req, res) => { if (!req.file) { return res.status(400).json({ error: \"Nenhum arquivo de backup foi enviado.\" }); } const backupBuffer = req.file.buffer; db.close((err) => { if (err) { console.error(\"Erro ao fechar o DB antes de restaurar:\", err.message); return res.status(500).json({ error: \"Não foi possível fechar a conexão com o banco de dados atual.\" }); } fs.writeFile(DB_PATH, backupBuffer, (err) => { if (err) { console.error(\"Falha ao escrever o arquivo de backup:\", err.message); db = new sqlite3.Database(DB_PATH); return res.status(500).json({ error: \"Falha ao substituir o arquivo de banco de dados.\" }); } db = new sqlite3.Database(DB_PATH, (err) => { if (err) { console.error(\"DB restaurado, mas falha ao reconectar:\", err.message); return res.status(500).json({ error: \"Banco de dados restaurado, mas falha ao reconectar. Reinicie o servidor.\" }); } console.log(\"Banco de dados restaurado e reconectado com sucesso.\"); res.json({ success: true, message: \"Banco de dados restaurado com sucesso. A página será recarregada.\" }); }); }); }); });\napp.get(\"/api/export/excel-all\", requirePageLogin, async (req, res) => {\n  try {\n    const ExcelJS = require(\"exceljs\");\n\n    const relatorios = await new Promise((resolve, reject) => {\n      db.all(\"SELECT * FROM relatorios ORDER BY data DESC\", (err, rows) => {\n        if (err) reject(err);\n        else resolve(rows);\n      });\n    });\n\n    if (!relatorios.length) {\n      return res.status(404).json({ error: \"Nenhum relatório encontrado.\" });\n    }\n\n    const workbook = new ExcelJS.Workbook();\n    const ws = workbook.addWorksheet(\"Relatórios\");\n\n    ws.columns = [\n      { header: \"ID\", key: \"id\", width: 8 },\n      { header: \"Loja\", key: \"loja\", width: 25 },\n      { header: \"Data\", key: \"data\", width: 15 },\n      { header: \"Total (R$)\", key: \"total_vendas\", width: 15 },\n      { header: \"Atendimentos\", key: \"atendimentos\", width: 15 },\n      { header: \"Taxa Conversão\", key: \"taxa_conversao\", width: 15 },\n    ];\n\n    relatorios.forEach(r => ws.addRow(r));\n\n    res.setHeader(\"Content-Type\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n    res.setHeader(\"Content-Disposition\", \"attachment; filename=Relatorios_Completos.xlsx\");\n\n    await workbook.xlsx.write(res);\n    res.end();\n  } catch (error) {\n    console.error(\"Erro ao exportar todos os relatórios:\", error);\n    res.status(500).json({ error: \"Falha ao gerar o arquivo Excel.\" });\n  }\n});\n// =================================================================\n// INICIALIZAÇÃO DO SERVIDOR\n// =================================================================\napp.listen(PORT, () => console.log(`Servidor rodando em http://localhost:${PORT}`));","size_bytes":39189},"monitoramento-lojas-varejo-main/README.md":{"content":"# Gerador de Relatórios para Lojas\n\nSistema simples para **geração e consulta de relatórios** de lojas, desenvolvido utilizando **HTML**, **CSS**, **JavaScript** e diversas APIs. O sistema permite gerar relatórios em formatos como **PDF** e **Excel**.\n\n## 🎯 Tecnologias Utilizadas\n\n- **HTML**\n- **CSS**\n- **JavaScript**\n- **APIs**:\n  - `express`: Framework para criação do servidor.\n  - `express-session`: Gerenciamento de sessões do usuário.\n  - `multer`: Upload de arquivos.\n  - `pdf-parse`: Leitura de arquivos PDF.\n  - `pdfkit`: Geração de arquivos PDF.\n  - `exceljs`: Criação de arquivos Excel.\n  - `pg`: Conexão com banco de dados PostgreSQL.\n\n## 🚀 Como Baixar e Rodar o Sistema\n\nSiga os passos abaixo para **baixar** e **rodar** o sistema localmente:\n\n### 1. Clonar o Repositório\n\nPrimeiro, clone o repositório para sua máquina local. Abra o terminal e execute o comando:\n\n```bash\ngit clone https://github.com/bggcreate/gerador-relatorios-lojas.git\n```\n### 2. Acessar o Diretório do Projeto\n\nDepois de clonado, entre no diretório do projeto:\n\n```bash\ncd gerador-relatorios-lojas\n```\n### 3. Instalar as Dependências\n\nEm seguida, instale as dependências necessárias com o comando:\n\n```bash\nnpm install\n```\n\n4. Iniciar o Servidor\n\nAgora, inicie o servidor local:\n\n```bash\nnpm start\n```\n5. Acessar o Sistema\n\nAbra o navegador e acesse o sistema localmente no seguinte endereço (ou vincule em alguma host/servidor):\n\n```bash\nhttp://localhost:3000\n```\n\n\n---\n\nAgora é só **copiar e colar**. Todo o texto está pronto para ser usado diretamente no seu repositório ou onde você precisar!\n","size_bytes":1619},"README.md":{"content":"# Gerador de Relatórios para Lojas\n\nSistema simples para **geração e consulta de relatórios** de lojas, desenvolvido utilizando **HTML**, **CSS**, **JavaScript** e diversas APIs. O sistema permite gerar relatórios em formatos como **PDF** e **Excel**.\n\n## 🎯 Tecnologias Utilizadas\n\n- **HTML**\n- **CSS**\n- **JavaScript**\n- **APIs**:\n  - `express`: Framework para criação do servidor.\n  - `express-session`: Gerenciamento de sessões do usuário.\n  - `multer`: Upload de arquivos.\n  - `pdf-parse`: Leitura de arquivos PDF.\n  - `pdfkit`: Geração de arquivos PDF.\n  - `exceljs`: Criação de arquivos Excel.\n  - `pg`: Conexão com banco de dados PostgreSQL.\n\n## 🚀 Como Baixar e Rodar o Sistema\n\nSiga os passos abaixo para **baixar** e **rodar** o sistema localmente:\n\n### 1. Clonar o Repositório\n\nPrimeiro, clone o repositório para sua máquina local. Abra o terminal e execute o comando:\n\n```bash\ngit clone https://github.com/bggcreate/gerador-relatorios-lojas.git\n```\n### 2. Acessar o Diretório do Projeto\n\nDepois de clonado, entre no diretório do projeto:\n\n```bash\ncd gerador-relatorios-lojas\n```\n### 3. Instalar as Dependências\n\nEm seguida, instale as dependências necessárias com o comando:\n\n```bash\nnpm install\n```\n\n4. Iniciar o Servidor\n\nAgora, inicie o servidor local:\n\n```bash\nnpm start\n```\n5. Acessar o Sistema\n\nAbra o navegador e acesse o sistema localmente no seguinte endereço (ou vincule em alguma host/servidor):\n\n```bash\nhttp://localhost:3000\n```\n\n\n---\n\nAgora é só **copiar e colar**. Todo o texto está pronto para ser usado diretamente no seu repositório ou onde você precisar!\n","size_bytes":1619},"public/js/theme.js":{"content":"// ============================================================\n// GERENCIADOR DE TEMA DARK/LIGHT MODE\n// Inspirado no estilo Apple com transições suaves\n// ============================================================\n\nclass ThemeManager {\n    constructor() {\n        this.THEME_KEY = 'theme-preference';\n        this.currentTheme = this.getStoredTheme() || 'light';\n        this.init();\n    }\n\n    init() {\n        // Aplica tema inicial sem transição\n        document.documentElement.setAttribute('data-theme', this.currentTheme);\n        \n        // Aguarda o DOM estar pronto\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.setupToggleButton());\n        } else {\n            this.setupToggleButton();\n        }\n    }\n\n    setupToggleButton() {\n        const toggleBtn = document.getElementById('theme-toggle');\n        const toggleBtnMobile = document.getElementById('theme-toggle-mobile');\n        const toggleBtnFloating = document.getElementById('theme-toggle-floating');\n        \n        if (toggleBtn) {\n            this.updateButtonIcon(toggleBtn);\n            toggleBtn.addEventListener('click', () => this.toggle());\n        }\n        \n        if (toggleBtnMobile) {\n            this.updateButtonIcon(toggleBtnMobile);\n            toggleBtnMobile.addEventListener('click', () => this.toggle());\n        }\n        \n        if (toggleBtnFloating) {\n            this.updateButtonIcon(toggleBtnFloating);\n            toggleBtnFloating.addEventListener('click', () => this.toggle());\n        }\n    }\n\n    toggle() {\n        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';\n        document.documentElement.setAttribute('data-theme', this.currentTheme);\n        this.saveTheme();\n        this.updateAllButtons();\n    }\n\n    updateButtonIcon(button) {\n        const icon = button.querySelector('i');\n        if (icon) {\n            if (this.currentTheme === 'dark') {\n                icon.className = 'bi bi-sun-fill';\n            } else {\n                icon.className = 'bi bi-moon-fill';\n            }\n        }\n    }\n\n    updateAllButtons() {\n        const toggleBtn = document.getElementById('theme-toggle');\n        const toggleBtnMobile = document.getElementById('theme-toggle-mobile');\n        const toggleBtnFloating = document.getElementById('theme-toggle-floating');\n        \n        if (toggleBtn) this.updateButtonIcon(toggleBtn);\n        if (toggleBtnMobile) this.updateButtonIcon(toggleBtnMobile);\n        if (toggleBtnFloating) this.updateButtonIcon(toggleBtnFloating);\n    }\n\n    getStoredTheme() {\n        return localStorage.getItem(this.THEME_KEY);\n    }\n\n    saveTheme() {\n        localStorage.setItem(this.THEME_KEY, this.currentTheme);\n    }\n\n    getTheme() {\n        return this.currentTheme;\n    }\n}\n\n// Inicializa o gerenciador de tema\nconst themeManager = new ThemeManager();\n\n// Exporta para uso global\nwindow.themeManager = themeManager;\n","size_bytes":2968},"public/js/utils.js":{"content":"/**\n * Exibe uma notificação toast no canto da tela.\n * @param {string} title Título do toast.\n * @param {string} message Mensagem do corpo do toast.\n * @param {'success'|'danger'|'info'} type O tipo de notificação (muda a cor).\n */\nexport function showToast(title, message, type = 'success') {\n    const toastEl = document.getElementById('notificationToast');\n    if (!toastEl) return;\n    const toastHeader = toastEl.querySelector('.toast-header');\n    const toastTitle = document.getElementById('toast-title');\n    const toastBody = document.getElementById('toast-body');\n\n    toastTitle.textContent = title;\n    toastBody.textContent = message;\n\n    toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info');\n    if (type === 'success') toastHeader.classList.add('bg-success');\n    else if (type === 'danger') toastHeader.classList.add('bg-danger');\n    else toastHeader.classList.add('bg-info');\n\n    const toast = new bootstrap.Toast(toastEl);\n    toast.show();\n}\n\n/**\n * Exibe um modal de confirmação e retorna uma Promise que resolve como true ou false.\n * @param {string} message A pergunta a ser exibida no modal.\n * @returns {Promise<boolean>} Retorna true se o usuário clicar \"Sim\", senão false.\n */\nexport function showConfirmModal(message) {\n    return new Promise((resolve) => {\n        const confirmModalEl = document.getElementById('confirmModal');\n        if (!confirmModalEl) {\n            resolve(window.confirm(message));\n            return;\n        }\n\n        const confirmModal = new bootstrap.Modal(confirmModalEl);\n        document.getElementById('confirmModalBody').textContent = message;\n\n        const btnYes = document.getElementById('confirm-btn-yes');\n        const btnNo = document.getElementById('confirm-btn-no');\n        const btnClose = confirmModalEl.querySelector('.btn-close');\n\n        const handleResolve = (value) => {\n            btnYes.removeEventListener('click', onYesClick);\n            btnNo.removeEventListener('click', onNoClick);\n            btnClose.removeEventListener('click', onNoClick);\n            confirmModalEl.removeEventListener('hidden.bs.modal', onHidden);\n\n            if (confirmModal._isShown) {\n                confirmModal.hide();\n            }\n            resolve(value);\n        };\n\n        const onYesClick = () => handleResolve(true);\n        const onNoClick = () => handleResolve(false);\n        const onHidden = () => handleResolve(false);\n\n        btnYes.addEventListener('click', onYesClick, { once: true });\n        btnNo.addEventListener('click', onNoClick, { once: true });\n        btnClose.addEventListener('click', onNoClick, { once: true });\n        confirmModalEl.addEventListener('hidden.bs.modal', onHidden, { once: true });\n\n        confirmModal.show();\n    });\n}\n\n/**\n * Inicializa animações de scroll para elementos\n * Adiciona a classe 'fade-in-up' aos elementos que entram na viewport\n */\nexport function initScrollAnimations() {\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('animate-in');\n                observer.unobserve(entry.target);\n            }\n        });\n    }, observerOptions);\n\n    const animateElements = document.querySelectorAll('.card, .animate-on-scroll');\n    animateElements.forEach(el => {\n        el.classList.add('will-animate');\n        observer.observe(el);\n    });\n}\n\n/**\n * Adiciona efeito de loading suave em botões\n * @param {HTMLElement} button O botão a ser modificado\n * @param {boolean} isLoading Se está carregando ou não\n */\nexport function setButtonLoading(button, isLoading) {\n    if (isLoading) {\n        button.dataset.originalText = button.innerHTML;\n        button.disabled = true;\n        button.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>Carregando...';\n    } else {\n        button.disabled = false;\n        button.innerHTML = button.dataset.originalText || button.innerHTML;\n    }\n}\n\n/**\n * Inicializa animações globais da página\n */\nexport function initPageAnimations() {\n    document.body.classList.add('page-loaded');\n    \n    setTimeout(() => {\n        initScrollAnimations();\n    }, 100);\n}","size_bytes":4355},"public/js/pages/novo-relatorio.js":{"content":"import { showToast } from '../utils.js';\n\nexport function initNovoRelatorioPage() {\n    const form = document.getElementById('form-novo-relatorio');\n    if (!form) return;\n\n    // --- Seleção de Elementos ---\n    const btnImportarPdf = document.getElementById(\"btn-importar-pdf\");\n    const pdfFileInput = document.getElementById(\"pdf-file-input\");\n    const btnSalvarTudo = document.getElementById(\"btn-salvar-tudo\");\n    const btnLimparFormulario = document.getElementById(\"btn-limpar-formulario\");\n    const btnAddVendedor = document.getElementById(\"btn-add-vendedor\");\n    const btnAddVendedorManual = document.getElementById(\"btn-add-vendedor-manual\");\n    const containerVendedores = document.getElementById(\"container-vendedores\");\n    const placeholderVendedores = document.getElementById(\"vendedores-placeholder\");\n    const lojaSelect = document.getElementById(\"loja\");\n    const dataInput = document.getElementById(\"data\");\n    const resultadosPdfContainer = document.getElementById('resultados-pdf-container');\n    const totalVendasDinheiroInput = form.querySelector('[name=\"total_vendas_dinheiro\"]');\n    const ticketMedioInput = form.querySelector('[name=\"ticket_medio\"]');\n    const paInput = form.querySelector('[name=\"pa\"]');\n    const clientesMonitoramentoInput = document.getElementById('clientes_monitoramento_input');\n    const vendasMonitoramentoInput = document.getElementById('vendas_monitoramento_input');\n    const clientesLojaInput = document.getElementById('clientes_loja_input');\n    const vendasLojaInput = document.getElementById('vendas_loja_input');\n    const omniInput = document.getElementById('quantidade_omni_input');\n    const monitoramentoDonutCanvas = document.getElementById('monitoramento-donut-chart');\n    const lojaDonutCanvas = document.getElementById('loja-donut-chart');\n    \n    // ADICIONADO: Selecionar os novos inputs de pagamento\n    const vendasCartaoInput = document.getElementById('vendas_cartao_input');\n    const vendasPixInput = document.getElementById('vendas_pix_input');\n    const vendasDinheiroInput = document.getElementById('vendas_dinheiro_input');\n    const vendasTotalPagamentoInput = document.getElementById('vendas_total_pagamento_input');\n\n    // --- Variáveis de Estado ---\n    let lojasCache = [];\n    let vendedoresCache = [];\n    const urlParams = new URLSearchParams(window.location.search);\n    const reportId = urlParams.get('edit');\n    let monitoramentoDonutChart = null;\n    let lojaDonutChart = null;\n    const DRAFT_KEY = 'draftRelatorio';\n    let vendedorCounter = 0;\n\n    // --- Funções de Gerenciamento de Rascunho ---\n    function salvarRascunho() {\n        if (reportId) return;\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n        const nomes = formData.getAll('vendedor_nome');\n        const atendimentos = formData.getAll('vendedor_atendimentos');\n        const vendas = formData.getAll('vendedor_vendas');\n        data.vendedores = nomes.map((nome, index) => ({ nome: nome.trim(), atendimentos: atendimentos[index] || 0, vendas: vendas[index] || 0 }));\n        data.pdfSectionVisible = resultadosPdfContainer.style.display === 'block';\n        sessionStorage.setItem(DRAFT_KEY, JSON.stringify(data));\n    }\n\n    function carregarRascunho() {\n        if (reportId) return;\n        const draft = sessionStorage.getItem(DRAFT_KEY);\n        if (!draft) return;\n        const data = JSON.parse(draft);\n        for (const key in data) {\n            const input = form.querySelector(`[name=\"${key}\"]`);\n            if (input && key !== 'vendedores') input.value = data[key];\n        }\n        if (data.vendedores && Array.isArray(data.vendedores)) {\n            containerVendedores.innerHTML = '';\n            data.vendedores.forEach(vendedor => adicionarVendedor(vendedor));\n        }\n        if (data.pdfSectionVisible && resultadosPdfContainer) {\n            resultadosPdfContainer.style.display = 'block';\n        }\n        updateVendedoresPlaceholder();\n        handleSelecaoDeLoja();\n        calcularEAtualizarGraficos();\n        calcularTotalVendasPagamento(); // Adicionado para atualizar o total ao carregar rascunho\n        showToast(\"Rascunho Carregado\", \"Seu relatório não salvo foi restaurado.\", \"info\");\n    }\n\n    function limparRascunhoEFormulario() {\n        form.reset();\n        sessionStorage.removeItem(DRAFT_KEY);\n        const hoje = new Date();\n        const offset = hoje.getTimezoneOffset();\n        dataInput.value = new Date(hoje.getTime() - (offset * 60 * 1000)).toISOString().split('T')[0];\n        containerVendedores.innerHTML = '';\n        if(resultadosPdfContainer) resultadosPdfContainer.style.display = 'none';\n        updateVendedoresPlaceholder();\n        handleSelecaoDeLoja();\n        calcularEAtualizarGraficos();\n        calcularTotalVendasPagamento(); // Adicionado para resetar o total ao limpar\n        showToast(\"Formulário Limpo\", \"Todos os campos foram resetados.\", \"success\");\n    }\n\n    // --- Funções de UI e Lógica ---\n    const getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\n    \n    function renderDonutChart(canvas, percentage, color) {\n        if (!canvas) return null;\n        const textElement = document.getElementById(canvas.id.replace('chart', 'text'));\n        if (textElement) textElement.textContent = `${parseFloat(percentage).toFixed(1)}%`;\n        const data = { datasets: [{ data: [percentage, 100 - percentage > 0 ? 100 - percentage : 0], backgroundColor: [color, '#e5e5e5'], borderColor: getCssVar('--content-bg'), borderWidth: 3, cutout: '75%' }] };\n        const options = { responsive: true, maintainAspectRatio: true, plugins: { legend: { display: false }, tooltip: { enabled: false } } };\n        const ctx = canvas.getContext('2d');\n        if (canvas.chart) canvas.chart.destroy();\n        canvas.chart = new Chart(ctx, { type: 'doughnut', data, options });\n        return canvas.chart;\n    }\n\n    function updateDonutChart(chartInstance, percentage) {\n        if (!chartInstance) return;\n        const textElement = document.getElementById(chartInstance.canvas.id.replace('chart', 'text'));\n        if (textElement) textElement.textContent = `${parseFloat(percentage).toFixed(1)}%`;\n        chartInstance.data.datasets[0].data[0] = percentage;\n        chartInstance.data.datasets[0].data[1] = 100 - percentage > 0 ? 100 - percentage : 0;\n        chartInstance.update();\n    }\n    \n    // ADICIONADO: Nova função para somar os totais de pagamento\n    function calcularTotalVendasPagamento() {\n        const cartao = Number(vendasCartaoInput.value) || 0;\n        const pix = Number(vendasPixInput.value) || 0;\n        const dinheiro = Number(vendasDinheiroInput.value) || 0;\n        vendasTotalPagamentoInput.value = cartao + pix + dinheiro;\n    }\n\n    function calcularEAtualizarGraficos() {\n        const clientesM = Number(clientesMonitoramentoInput.value) || 0;\n        const vendasM = Number(vendasMonitoramentoInput.value) || 0;\n        const omni = omniInput ? (Number(omniInput.value) || 0) : 0;\n        const totalVendasM = vendasM + omni;\n        const txMonitoramento = clientesM > 0 ? (totalVendasM / clientesM) * 100 : 0;\n        updateDonutChart(monitoramentoDonutChart, txMonitoramento);\n        \n        const clientesL = Number(clientesLojaInput.value) || 0;\n        const vendasL = Number(vendasLojaInput.value) || 0;\n        const txLoja = clientesL > 0 ? (vendasL / clientesL) * 100 : 0;\n        updateDonutChart(lojaDonutChart, txLoja);\n    }\n\n    function updateVendedoresPlaceholder() { if(placeholderVendedores) placeholderVendedores.style.display = containerVendedores.children.length === 0 ? \"block\" : \"none\"; };\n    \n    async function carregarLojas() {\n        try {\n            const response = await fetch(\"/api/lojas\");\n            if (!response.ok) throw new Error('Falha ao carregar lojas.');\n            lojasCache = await response.json();\n            lojaSelect.innerHTML = '<option value=\"\" disabled selected>Selecione uma loja</option>';\n            const lojasFiltradas = reportId ? lojasCache : lojasCache.filter(l => l.status === 'ativa');\n            lojasFiltradas.forEach(l => lojaSelect.add(new Option(l.nome, l.nome)));\n        } catch (e) { console.error(\"Erro ao carregar lojas\", e); }\n    }\n    \n    async function carregarVendedoresDaLoja() {\n        const lojaSelecionada = lojasCache.find(loja => loja.nome === lojaSelect.value);\n        if (!lojaSelecionada) {\n            vendedoresCache = [];\n            return;\n        }\n        \n        try {\n            const response = await fetch(`/api/vendedores?loja_id=${lojaSelecionada.id}`);\n            if (!response.ok) throw new Error('Falha ao carregar vendedores.');\n            const todosVendedores = await response.json();\n            vendedoresCache = todosVendedores.filter(v => v.ativo === 1 || v.ativo === true);\n        } catch (e) {\n            console.error(\"Erro ao carregar vendedores\", e);\n            vendedoresCache = [];\n        }\n    }\n    \n    async function handleSelecaoDeLoja() {\n        const lojaSelecionada = lojasCache.find(loja => loja.nome === lojaSelect.value);\n        const containerEspecial = document.getElementById('container-funcao-especial');\n        const campoOmni = document.getElementById('campo-omni');\n        const campoBuscaAssist = document.getElementById('campo-busca-assist');\n\n        if(containerEspecial) containerEspecial.style.display = \"none\";\n        if(campoOmni) campoOmni.style.display = \"none\";\n        if(campoBuscaAssist) campoBuscaAssist.style.display = \"none\";\n\n        if (!lojaSelecionada || !lojaSelecionada.funcao_especial) {\n            calcularEAtualizarGraficos();\n        } else {\n            containerEspecial.style.display = \"block\";\n            if (lojaSelecionada.funcao_especial === \"Omni\") campoOmni.style.display = \"block\";\n            else if (lojaSelecionada.funcao_especial === \"Busca por Assist. Tec.\") campoBuscaAssist.style.display = \"block\";\n            calcularEAtualizarGraficos();\n        }\n        \n        // Carregar vendedores da loja selecionada\n        await carregarVendedoresDaLoja();\n    }\n    \n    function adicionarVendedor(vendedor = { nome: '', atendimentos: 0, vendas: 0, id_vendedor: null }, forcarManual = false) {\n        if (!lojaSelect.value) {\n            showToast(\"Atenção\", \"Selecione uma loja antes de adicionar vendedores.\", \"warning\");\n            return;\n        }\n        \n        vendedorCounter++;\n        const uniqueId = `vendedor-${vendedorCounter}`;\n        \n        const card = document.createElement(\"div\");\n        card.className = \"vendedor-card\";\n        card.dataset.uniqueId = uniqueId;\n        \n        // Se forçar manual OU não tiver vendedores cadastrados, mostrar INPUT. Caso contrário, mostrar SELECT\n        const temVendedoresCadastrados = vendedoresCache.length > 0;\n        const mostrarInput = forcarManual || !temVendedoresCadastrados;\n        \n        let selectHtml = '';\n        if (!mostrarInput && temVendedoresCadastrados) {\n            selectHtml = '<select class=\"form-select vendedor-select\" data-id=\"' + uniqueId + '\">';\n            selectHtml += '<option value=\"\">Selecione</option>';\n            vendedoresCache.forEach(v => {\n                const selected = vendedor.id_vendedor === v.id ? 'selected' : '';\n                selectHtml += `<option value=\"${v.id}\" ${selected}>${v.nome}</option>`;\n            });\n            selectHtml += '</select>';\n        }\n        \n        card.innerHTML = `\n            <span class=\"vendedor-numero\">#${vendedorCounter}</span>\n            <div class=\"vendedor-field vendedor-nome\">\n                <label>Vendedor</label>\n                ${mostrarInput ? \n                `<input type=\"text\" class=\"form-control vendedor-nome-input\" \n                    placeholder=\"Nome do vendedor\" value=\"${vendedor.nome || ''}\" required>` : selectHtml}\n                <input type=\"hidden\" class=\"vendedor-nome-hidden\" name=\"vendedor_nome\" value=\"${vendedor.nome || ''}\">\n                <input type=\"hidden\" class=\"vendedor-id-input\" name=\"vendedor_id\" value=\"${vendedor.id_vendedor || ''}\">\n            </div>\n            <div class=\"vendedor-field vendedor-atend\">\n                <label>Atend.</label>\n                <input type=\"number\" class=\"form-control vendedor-atendimentos-input\" \n                    name=\"vendedor_atendimentos\" value=\"${vendedor.atendimentos || 0}\" min=\"0\" required>\n            </div>\n            <div class=\"vendedor-field vendedor-vendas\">\n                <label>Vendas</label>\n                <input type=\"number\" class=\"form-control vendedor-vendas-input\" \n                    name=\"vendedor_vendas\" value=\"${vendedor.vendas || 0}\" min=\"0\" required>\n            </div>\n            <div class=\"vendedor-taxa-conversao\">\n                <span class=\"taxa-valor\">0%</span>\n            </div>\n            <button type=\"button\" class=\"btn-remove-vendedor\">×</button>\n        `;\n        \n        containerVendedores.appendChild(card);\n        updateVendedoresPlaceholder();\n        \n        // Calcular taxa de conversão inicial\n        calcularTaxaConversao(card);\n        \n        // Event listeners para este card\n        const selectVendedor = card.querySelector('.vendedor-select');\n        const nomeInput = card.querySelector('.vendedor-nome-input');\n        const nomeHidden = card.querySelector('.vendedor-nome-hidden');\n        const idInput = card.querySelector('.vendedor-id-input');\n        const atendimentosInput = card.querySelector('.vendedor-atendimentos-input');\n        const vendasInput = card.querySelector('.vendedor-vendas-input');\n        \n        // Se tem SELECT (vendedores cadastrados), adicionar listener\n        if (selectVendedor) {\n            selectVendedor.addEventListener('change', (e) => {\n                const vendedorId = e.target.value;\n                if (vendedorId) {\n                    const vendedorSelecionado = vendedoresCache.find(v => v.id == vendedorId);\n                    if (vendedorSelecionado) {\n                        nomeHidden.value = vendedorSelecionado.nome;\n                        idInput.value = vendedorSelecionado.id;\n                    }\n                } else {\n                    nomeHidden.value = '';\n                    idInput.value = '';\n                }\n                salvarRascunho();\n            });\n        }\n        \n        // Se tem INPUT manual, adicionar listener\n        if (nomeInput) {\n            nomeInput.addEventListener('input', (e) => {\n                nomeHidden.value = e.target.value;\n                salvarRascunho();\n            });\n        }\n        \n        atendimentosInput.addEventListener('input', () => {\n            calcularTaxaConversao(card);\n            salvarRascunho();\n        });\n        \n        vendasInput.addEventListener('input', () => {\n            calcularTaxaConversao(card);\n            salvarRascunho();\n        });\n        \n        // Botão de remover vendedor\n        const btnRemover = card.querySelector('.btn-remove-vendedor');\n        btnRemover.addEventListener('click', () => {\n            card.remove();\n            updateVendedoresPlaceholder();\n            salvarRascunho();\n        });\n    }\n    \n    function calcularTaxaConversao(card) {\n        const atendimentos = Number(card.querySelector('.vendedor-atendimentos-input').value) || 0;\n        const vendas = Number(card.querySelector('.vendedor-vendas-input').value) || 0;\n        const taxa = atendimentos > 0 ? (vendas / atendimentos) * 100 : 0;\n        card.querySelector('.taxa-valor').textContent = `${taxa.toFixed(1)}%`;\n    }\n    \n    async function carregarDadosParaEdicao() {\n        showToast(\"Modo de Edição\", \"Carregando dados do relatório...\", \"info\");\n        await carregarLojas();\n        try {\n            const response = await fetch(`/api/relatorios/${reportId}`);\n            if (!response.ok) throw new Error('Relatório não encontrado.');\n            const { relatorio } = await response.json();\n\n            if(resultadosPdfContainer && relatorio.total_vendas_dinheiro && parseFloat(String(relatorio.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) > 0) {\n                resultadosPdfContainer.style.display = 'block';\n            }\n            \n            const vendedores = JSON.parse(relatorio.vendedores||'[]');\n            for (const key in relatorio) { \n                const input = form.querySelector(`[name=\"${key}\"]`); \n                if (input) input.value = relatorio[key]; \n            }\n            containerVendedores.innerHTML = '';\n            vendedores.forEach(vend => adicionarVendedor(vend));\n            \n            updateVendedoresPlaceholder();\n            handleSelecaoDeLoja();\n            btnSalvarTudo.textContent = 'SALVAR ALTERAÇÕES';\n            calcularEAtualizarGraficos();\n            calcularTotalVendasPagamento(); // Adicionado para calcular o total ao carregar para edição\n        } catch(e) { showToast(\"Erro\", \"Não foi possível carregar os dados para edição.\", \"danger\"); }\n    }\n    \n    async function handleSalvarTudo() {\n        if (!form.checkValidity()) { \n            form.reportValidity(); \n            showToast(\"Campos Inválidos\", \"Por favor, preencha todos os campos obrigatórios.\", \"danger\");\n            return;\n        }\n        \n        const fd = new FormData(form);\n        const data = Object.fromEntries(fd.entries());\n        const n = fd.getAll('vendedor_nome'), a = fd.getAll('vendedor_atendimentos'), v = fd.getAll('vendedor_vendas');\n        data.vendedores = JSON.stringify(n.map((nome, i) => ({ nome: nome.trim(), atendimentos: parseInt(a[i],10)||0, vendas: parseInt(v[i],10)||0 })).filter(vend => vend.nome));\n        \n        const method = reportId ? 'PUT' : 'POST';\n        const url = reportId ? `/api/relatorios/${reportId}` : '/api/relatorios';\n        \n        btnSalvarTudo.disabled = true;\n        btnSalvarTudo.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Salvando...';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Erro desconhecido ao salvar.');\n            showToast('Sucesso!', reportId ? 'Relatório atualizado com sucesso!' : 'Relatório salvo com sucesso!', 'success');\n            \n            if (reportId) {\n                setTimeout(() => window.location.href = '/consulta', 1000);\n            } else {\n                limparRascunhoEFormulario();\n            }\n        } catch (e) {\n            showToast('Falha ao Salvar', e.message, 'danger');\n        } finally {\n            btnSalvarTudo.disabled = false;\n            btnSalvarTudo.textContent = reportId ? 'SALVAR ALTERAÇÕES' : 'SALVAR RELATÓRIO COMPLETO';\n        }\n    }\n    \n    // --- Lógica de Importação de PDF ---\n    btnImportarPdf.addEventListener('click', () => pdfFileInput.click());\n    pdfFileInput.addEventListener('change', async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        btnImportarPdf.disabled = true;\n        btnImportarPdf.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Processando...';\n\n        try {\n            const formData = new FormData();\n            formData.append('pdfFile', file);\n            const response = await fetch('/api/process-pdf', { method: 'POST', body: formData });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Erro ao processar PDF.');\n            \n            const { data: extractedData } = result;\n            \n            // PREENCHIMENTO EXPLÍCITO CORRIGIDO\n            if (extractedData.total_vendas_dinheiro) totalVendasDinheiroInput.value = extractedData.total_vendas_dinheiro;\n            if (extractedData.ticket_medio) ticketMedioInput.value = extractedData.ticket_medio;\n            if (extractedData.pa) paInput.value = extractedData.pa;\n            if (extractedData.data) dataInput.value = extractedData.data;\n            if (extractedData.loja) {\n                const storeExists = Array.from(lojaSelect.options).some(option => option.text.trim().toUpperCase() === extractedData.loja.trim().toUpperCase());\n                if (storeExists) {\n                    lojaSelect.value = Array.from(lojaSelect.options).find(option => option.text.trim().toUpperCase() === extractedData.loja.trim().toUpperCase()).value;\n                } else {\n                    showToast(\"Atenção\", `A loja \"${extractedData.loja}\" do PDF não foi encontrada no sistema.`, \"danger\");\n                }\n            }\n            containerVendedores.innerHTML = '';\n            if (extractedData.vendedores && extractedData.vendedores.length > 0) {\n                extractedData.vendedores.forEach(vendedor => adicionarVendedor(vendedor));\n            }\n            \n            if(resultadosPdfContainer) resultadosPdfContainer.style.display = 'block';\n            \n            // ATUALIZAÇÃO DA UI\n            updateVendedoresPlaceholder();\n            handleSelecaoDeLoja();\n            calcularEAtualizarGraficos();\n            salvarRascunho();\n            showToast(\"Sucesso!\", \"Dados do PDF importados com sucesso.\", \"success\");\n\n        } catch (error) {\n            showToast(\"Erro na Importação\", error.message, \"danger\");\n        } finally {\n            btnImportarPdf.disabled = false;\n            btnImportarPdf.innerHTML = '<i class=\"bi bi-file-earmark-arrow-up-fill me-2\"></i>Importar de PDF';\n            pdfFileInput.value = '';\n        }\n    });\n\n    // --- Inicialização dos Event Listeners ---\n    btnAddVendedor.addEventListener(\"click\", () => adicionarVendedor());\n    btnAddVendedorManual.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        adicionarVendedor({}, true); // true = forçar modo manual\n    });\n    btnSalvarTudo.addEventListener(\"click\", handleSalvarTudo);\n    btnLimparFormulario.addEventListener(\"click\", limparRascunhoEFormulario);\n    lojaSelect.addEventListener(\"change\", handleSelecaoDeLoja);\n\n    form.addEventListener('input', () => {\n        calcularEAtualizarGraficos();\n        salvarRascunho();\n    });\n\n    // ADICIONADO: Event listeners para os novos campos de pagamento\n    if(vendasCartaoInput) vendasCartaoInput.addEventListener('input', calcularTotalVendasPagamento);\n    if(vendasPixInput) vendasPixInput.addEventListener('input', calcularTotalVendasPagamento);\n    if(vendasDinheiroInput) vendasDinheiroInput.addEventListener('input', calcularTotalVendasPagamento);\n\n    // --- Lógica de Inicialização da Página ---\n    monitoramentoDonutChart = renderDonutChart(monitoramentoDonutCanvas, 0, '#60a5fa');\n    lojaDonutChart = renderDonutChart(lojaDonutCanvas, 0, '#4ade80');\n\n    if (reportId) {\n        document.querySelector('h4.mb-0').textContent = 'Editar Relatório Existente';\n        carregarDadosParaEdicao();\n    } else {\n        carregarLojas();\n        updateVendedoresPlaceholder();\n        carregarRascunho();\n    }\n}","size_bytes":23163},"EXPORT_ALL_FEATURE.md":{"content":"# 📥 Funcionalidade: Exportar TODOS os Relatórios\n\n## 📋 Resumo\nNova funcionalidade adicionada na aba **Consulta** que permite exportar TODOS os relatórios do sistema em um único arquivo Excel, mantendo o mesmo formato e organização da exportação mensal.\n\n---\n\n## ✨ O Que Foi Implementado\n\n### 1. **Dropdown no Botão de Exportação**\n- O botão \"Exportar Mês Selecionado\" agora possui um dropdown\n- Nova opção: **\"Exportar TODOS os Relatórios\"**\n- Interface intuitiva usando Bootstrap split button\n\n### 2. **Nova Rota no Servidor**\n- **Endpoint**: `/api/export/excel/all`\n- **Método**: GET\n- **Autenticação**: Requer login\n- **Função**: Exporta todos os relatórios do banco de dados\n\n### 3. **Organização do Excel**\n- ✅ Cada loja tem sua própria aba\n- ✅ Mesmo formato da exportação mensal\n- ✅ Headers formatados com cores\n- ✅ Dados organizados cronologicamente\n- ✅ Colunas com formatação adequada (datas, percentuais, moeda)\n\n### 4. **Nome do Arquivo**\n- Formato: `Todos_Relatorios_DD-MM-YYYY.xlsx`\n- Exemplo: `Todos_Relatorios_29-10-2025.xlsx`\n\n---\n\n## 🎯 Como Usar\n\n1. **Acesse a aba Consulta**\n2. **Localize o card \"Exportar para Excel\"**\n3. **Clique na seta dropdown** ao lado do botão \"Exportar Mês Selecionado\"\n4. **Selecione** \"Exportar TODOS os Relatórios\"\n5. **Aguarde** o processamento (pode levar alguns segundos com muitos relatórios)\n6. **Download automático** do arquivo Excel\n\n---\n\n## 📁 Arquivos Modificados\n\n### 1. `views/consulta.html`\n- Transformado botão simples em split button com dropdown\n- Adicionado novo item de menu para exportar todos\n\n### 2. `public/js/pages/consulta.js`\n- Adicionado evento de click para o novo botão\n- Implementado tratamento de erros e feedback visual\n- Toast de sucesso ao completar exportação\n\n### 3. `server.js`\n- Nova rota `/api/export/excel/all`\n- Lógica de busca sem filtro de data\n- Mesma estrutura e formatação do Excel mensal\n- Organização por loja em abas separadas\n\n### 4. `replit.md`\n- Documentação atualizada com a nova funcionalidade\n\n---\n\n## 🔧 Detalhes Técnicos\n\n### Estrutura do Excel Gerado\n\n**Para cada loja:**\n- Aba nomeada com o nome da loja (máx 30 caracteres)\n- Título da loja na primeira linha (merged cells)\n- Headers na linha 3 com formatação azul\n- Dados organizados por data (crescente)\n\n**Colunas incluídas:**\n1. DATA\n2. BLUVE (Clientes Loja)\n3. VENDAS (L)\n4. TX DE CONVERSÃO (L)\n5. CLIENTES (M)\n6. VENDAS (M)\n7. TX DE CONVERSÃO (M)\n8. P.A\n9. TM (Ticket Médio)\n10. VALOR TOTAL\n11. TROCAS\n12. FUNÇÃO ESPECIAL (OMNI ou BUSCA P/ ASSIST. TEC.)\n13. ENVIADO POR\n\n### Formatação Aplicada\n- **Datas**: DD/MM/YYYY\n- **Percentuais**: 0.00%\n- **Moeda**: R$ #,##0.00\n- **Alinhamento**: Centralizado\n- **Bordas**: Todas as células\n- **Cores**: Headers em azul (#4472C4)\n\n---\n\n## ⚡ Performance\n\n- **Otimizado** para grandes volumes de dados\n- **Processamento assíncrono** para não travar o servidor\n- **Download via Blob** para economizar memória no navegador\n- **Feedback visual** durante o processamento\n\n---\n\n## 🛡️ Segurança\n\n- ✅ Requer autenticação (middleware `requirePageLogin`)\n- ✅ Validação de dados no servidor\n- ✅ Tratamento de erros adequado\n- ✅ Mensagens de erro amigáveis\n\n---\n\n## 📊 Casos de Uso\n\n### 1. **Backup Completo**\nExportar todos os relatórios para backup externo antes de limpar o banco\n\n### 2. **Análise Histórica**\nAnálise de tendências de longo prazo de todas as lojas\n\n### 3. **Relatório Anual**\nConsolidação de dados do ano inteiro para apresentações\n\n### 4. **Auditoria**\nExportação completa para fins de auditoria ou conformidade\n\n---\n\n## 🐛 Tratamento de Erros\n\n### Erros Possíveis:\n- **Nenhum relatório no sistema**: Exibe mensagem específica\n- **Erro no servidor**: Log detalhado e mensagem genérica ao usuário\n- **Falha na exportação**: Toast de erro e restauração do botão\n\n### Feedback ao Usuário:\n- **Durante processamento**: Spinner no botão\n- **Sucesso**: Toast verde + download automático\n- **Erro**: Toast vermelho com mensagem clara\n\n---\n\n## 🚀 Melhorias Futuras Sugeridas\n\n1. **Filtros Opcionais**\n   - Por período de datas\n   - Por lojas específicas\n   - Por status da loja\n\n2. **Indicador de Progresso**\n   - Barra de progresso para grandes volumes\n   - Contagem de relatórios processados\n\n3. **Opções de Formato**\n   - CSV além de Excel\n   - Compressão ZIP para múltiplos arquivos\n\n4. **Agendamento**\n   - Exportação automática mensal\n   - Envio por email\n\n---\n\n## ✅ Checklist de Implementação\n\n- [x] Dropdown criado no HTML\n- [x] Evento JavaScript implementado\n- [x] Rota no servidor criada\n- [x] Formatação Excel aplicada\n- [x] Tratamento de erros implementado\n- [x] Feedback visual adicionado\n- [x] Documentação atualizada\n- [x] Testado e funcionando\n\n---\n\n## 📝 Notas Importantes\n\n1. **Compatibilidade**: Funciona em todos os navegadores modernos\n2. **Limite**: Não há limite de relatórios (cuidado com volumes muito grandes)\n3. **Formato**: Idêntico à exportação mensal para facilitar comparações\n4. **Organização**: Mantém a mesma estrutura familiar aos usuários\n\n---\n\n**Data de Implementação**: 29/10/2025  \n**Versão**: 1.0  \n**Status**: ✅ Pronto para Uso\n","size_bytes":5246},"public/js/pages/assistencia.js":{"content":"export function initAssistenciaPage() {\n    if (!window.currentUser) {\n        setTimeout(initAssistenciaPage, 100);\n        return;\n    }\n    \n    init();\n}\n\nlet estoquePecas = [];\nlet assistencias = [];\nlet assistenciaEdit = null;\nlet lojaAtiva = null;\n\nlet modalPeca, modalDetalhes;\n\nasync function init() {\n    modalPeca = new bootstrap.Modal(document.getElementById('modal-peca'));\n    modalDetalhes = new bootstrap.Modal(document.getElementById('modal-detalhes'));\n    \n    await carregarLojas();\n    await renderCardsLojas();\n    await carregarFiltrosLoja();\n    \n    // Controlar visibilidade das abas baseado no cargo\n    controlarVisibilidadeAbas();\n    \n    // Carregar dados iniciais (todas as lojas para quem tem acesso múltiplo)\n    await carregarChamados();\n    await carregarHistorico();\n    \n    // Se já tiver loja ativa (Gerente/Técnico), carregar estoque também\n    if (lojaAtiva) {\n        await carregarEstoque();\n    }\n    \n    document.getElementById('filter-status').addEventListener('change', carregarChamados);\n    document.getElementById('filter-loja-chamados').addEventListener('change', carregarChamados);\n    document.getElementById('search-chamados').addEventListener('input', debounce(carregarChamados, 300));\n    document.getElementById('search-estoque').addEventListener('input', debounce(carregarEstoque, 300));\n    document.getElementById('filter-disponivel').addEventListener('change', carregarEstoque);\n    document.getElementById('filter-loja-historico').addEventListener('change', carregarHistorico);\n    document.getElementById('search-historico').addEventListener('input', debounce(carregarHistorico, 300));\n    \n    document.getElementById('btn-adicionar-peca').addEventListener('click', () => {\n        document.getElementById('modalPecaLabel').textContent = 'Adicionar Peça';\n        document.getElementById('form-peca').reset();\n        document.getElementById('peca-id').value = '';\n        modalPeca.show();\n    });\n    \n    document.getElementById('form-peca').addEventListener('submit', salvarPeca);\n    document.getElementById('form-assistencia').addEventListener('submit', salvarAssistencia);\n    \n    document.getElementById('btn-cancelar').addEventListener('click', () => {\n        assistenciaEdit = null;\n        document.getElementById('form-assistencia').reset();\n        document.getElementById('assistencia-id').value = '';\n        document.getElementById('data-entrada').value = new Date().toISOString().split('T')[0];\n    });\n    \n    document.getElementById('data-entrada').value = new Date().toISOString().split('T')[0];\n    \n    // Ocultar botão de adicionar peça apenas para técnicos\n    if (window.currentUser && window.currentUser.role === 'tecnico') {\n        const btnAdicionarPeca = document.getElementById('btn-adicionar-peca');\n        if (btnAdicionarPeca) {\n            btnAdicionarPeca.style.display = 'none';\n        }\n    }\n    \n    document.querySelectorAll('button[data-bs-toggle=\"tab\"]').forEach(tab => {\n        tab.addEventListener('shown.bs.tab', (e) => {\n            if (e.target.id === 'historico-tab') {\n                carregarHistorico();\n            }\n        });\n    });\n}\n\nasync function carregarLojas() {\n    try {\n        const response = await fetch('/api/lojas');\n        const lojas = await response.json();\n        \n        const lojaSelect = document.getElementById('loja-assist');\n        \n        // Se for técnico, mostrar apenas a loja dele\n        if (window.currentUser && window.currentUser.role === 'tecnico' && window.currentUser.loja_tecnico) {\n            lojaSelect.innerHTML = `<option value=\"${window.currentUser.loja_tecnico}\" selected>${window.currentUser.loja_tecnico}</option>`;\n            lojaSelect.disabled = true;\n            lojaSelect.title = 'Técnicos só podem criar assistências para sua loja cadastrada';\n        } else if (window.currentUser && window.currentUser.role === 'gerente' && window.currentUser.loja_gerente) {\n            // Gerente vê apenas sua loja\n            lojaSelect.innerHTML = `<option value=\"${window.currentUser.loja_gerente}\" selected>${window.currentUser.loja_gerente}</option>`;\n            lojaSelect.disabled = true;\n            lojaSelect.title = 'Gerentes só podem criar assistências para sua loja';\n        } else if (lojaAtiva) {\n            // Se houver loja ativa (selecionada via card), pré-selecionar e desabilitar\n            lojaSelect.innerHTML = `<option value=\"${lojaAtiva}\" selected>${lojaAtiva}</option>`;\n            lojaSelect.disabled = true;\n            lojaSelect.title = 'Loja pré-selecionada. Clique em Voltar para trocar de loja';\n        } else {\n            // Admin/Dev/Consultor/Monitoramento sem loja selecionada veem todas as lojas\n            lojaSelect.innerHTML = '<option value=\"\">Selecione uma loja...</option>' + \n                lojas.map(loja => `<option value=\"${loja.nome}\">${loja.nome}</option>`).join('');\n            lojaSelect.disabled = false;\n        }\n    } catch (error) {\n        console.error('Erro ao carregar lojas:', error);\n    }\n}\n\nasync function carregarFiltrosLoja() {\n    // Mostrar filtro de loja apenas para cargos que veem múltiplas lojas\n    const role = window.currentUser.role;\n    const showFilter = ['consultor', 'admin', 'dev', 'monitoramento'].includes(role);\n    \n    if (showFilter) {\n        try {\n            const response = await fetch('/api/lojas');\n            const lojas = await response.json();\n            \n            // Preencher filtro de chamados\n            const filterChamados = document.getElementById('filter-loja-chamados');\n            filterChamados.innerHTML = '<option value=\"\">Todas as Lojas</option>' + \n                lojas.map(loja => `<option value=\"${loja.nome}\">${loja.nome}</option>`).join('');\n            filterChamados.style.display = 'block';\n            \n            // Preencher filtro de histórico\n            const filterHistorico = document.getElementById('filter-loja-historico');\n            filterHistorico.innerHTML = '<option value=\"\">Todas as Lojas</option>' + \n                lojas.map(loja => `<option value=\"${loja.nome}\">${loja.nome}</option>`).join('');\n            filterHistorico.style.display = 'block';\n        } catch (error) {\n            console.error('Erro ao carregar filtros de loja:', error);\n        }\n    }\n}\n\nasync function renderCardsLojas() {\n    const role = window.currentUser.role;\n    \n    // Gerente e Técnico: auto-selecionar sua loja\n    if (role === 'gerente' && window.currentUser.loja_gerente) {\n        lojaAtiva = window.currentUser.loja_gerente;\n        return;\n    }\n    if (role === 'tecnico' && window.currentUser.loja_tecnico) {\n        lojaAtiva = window.currentUser.loja_tecnico;\n        return;\n    }\n    \n    // Consultor, Admin, Dev, Monitoramento: mostrar cards\n    if (['consultor', 'admin', 'dev', 'monitoramento'].includes(role)) {\n        try {\n            const response = await fetch('/api/lojas');\n            const lojas = await response.json();\n            \n            console.log('Total de lojas retornadas:', lojas.length);\n            console.log('Lojas:', lojas);\n            \n            // Filtrar apenas lojas com funcao_especial \"Busca por Assist. Tec.\"\n            const lojasFiltradas = lojas.filter(loja => loja.funcao_especial === 'Busca por Assist. Tec.');\n            \n            console.log('Lojas filtradas (Busca por Assist. Tec.):', lojasFiltradas.length);\n            console.log('Lojas filtradas:', lojasFiltradas);\n            \n            const seletorLojas = document.getElementById('seletor-lojas');\n            const cardsContainer = document.getElementById('cards-lojas');\n            \n            if (!seletorLojas || !cardsContainer) {\n                console.error('Elementos seletor-lojas ou cards-lojas não encontrados!');\n                return;\n            }\n            \n            seletorLojas.style.display = 'block';\n            \n            if (lojasFiltradas.length === 0) {\n                cardsContainer.innerHTML = '<div class=\"col-12\"><p class=\"text-muted text-center\">Nenhuma loja com \"Função especial\" = \"Busca por Assist. Tec.\" encontrada.</p></div>';\n            } else {\n                cardsContainer.innerHTML = lojasFiltradas.map(loja => `\n                    <div class=\"col-md-3\">\n                        <div class=\"card loja-card h-100\" data-loja=\"${loja.nome}\" onclick=\"window.selecionarLoja('${loja.nome}')\" style=\"cursor: pointer; transition: all 0.2s;\">\n                            <div class=\"card-body text-center\">\n                                <h5 class=\"card-title\">${loja.nome}</h5>\n                                <p class=\"text-muted small mb-0\">${loja.status}</p>\n                            </div>\n                        </div>\n                    </div>\n                `).join('');\n            }\n        } catch (error) {\n            console.error('Erro ao renderizar cards de lojas:', error);\n        }\n    }\n}\n\nwindow.selecionarLoja = async function(nomeLoja) {\n    lojaAtiva = nomeLoja;\n    \n    // Esconder todos os cards\n    document.getElementById('seletor-lojas').style.display = 'none';\n    \n    // Mostrar título da loja selecionada\n    document.getElementById('titulo-loja-selecionada').style.display = 'block';\n    document.getElementById('texto-loja-selecionada').textContent = `Assistência ${nomeLoja}`;\n    \n    // Mostrar todas as abas\n    controlarVisibilidadeAbas();\n    \n    // Atualizar campo Loja no formulário\n    await carregarLojas();\n    \n    // Recarregar dados filtrados pela loja\n    await carregarEstoque();\n    await carregarChamados();\n    await carregarHistorico();\n    \n    showToast(`Loja selecionada: ${nomeLoja}`, 'success');\n};\n\nwindow.voltarParaTodasLojas = async function() {\n    lojaAtiva = null;\n    \n    // Esconder título da loja selecionada\n    document.getElementById('titulo-loja-selecionada').style.display = 'none';\n    \n    // Mostrar cards novamente\n    document.getElementById('seletor-lojas').style.display = 'block';\n    \n    // Limpar seleção visual dos cards\n    document.querySelectorAll('.loja-card').forEach(card => {\n        card.classList.remove('border-primary', 'bg-primary', 'bg-opacity-10');\n    });\n    \n    // Esconder abas de Nova Assistência e Estoque\n    controlarVisibilidadeAbas();\n    \n    // Atualizar campo Loja no formulário\n    await carregarLojas();\n    \n    // Voltar para aba de Chamados\n    document.getElementById('chamados-tab').click();\n    \n    // Recarregar dados de todas as lojas\n    await carregarChamados();\n    await carregarHistorico();\n    \n    showToast('Visualizando todas as lojas', 'info');\n};\n\nfunction controlarVisibilidadeAbas() {\n    const role = window.currentUser.role;\n    \n    // Para cargos com acesso a múltiplas lojas\n    if (['consultor', 'admin', 'dev', 'monitoramento'].includes(role)) {\n        const cadastroTab = document.querySelector('#cadastro-tab').parentElement;\n        const estoqueTab = document.querySelector('#estoque-tab').parentElement;\n        \n        if (lojaAtiva) {\n            // Com loja selecionada: mostrar todas as abas\n            cadastroTab.style.display = 'block';\n            estoqueTab.style.display = 'block';\n        } else {\n            // Sem loja selecionada: esconder Nova Assistência e Estoque\n            cadastroTab.style.display = 'none';\n            estoqueTab.style.display = 'none';\n        }\n    }\n    // Gerente e Técnico sempre veem todas as abas (loja já está definida)\n};\n\nasync function carregarEstoque() {\n    if (!lojaAtiva) {\n        document.getElementById('tabela-estoque').innerHTML = '<tr><td colspan=\"6\" class=\"text-center text-muted\">Selecione uma loja para ver o estoque</td></tr>';\n        return;\n    }\n    \n    const search = document.getElementById('search-estoque').value;\n    const disponivel = document.getElementById('filter-disponivel').checked;\n    \n    try {\n        const params = new URLSearchParams({ search, disponivel, loja: lojaAtiva });\n        const response = await fetch(`/api/estoque-tecnico?${params.toString()}`);\n        estoquePecas = await response.json();\n        \n        atualizarSelectPecas();\n        renderEstoque();\n    } catch (error) {\n        showToast('Erro ao carregar estoque', 'error');\n    }\n}\n\nfunction renderEstoque() {\n    const tbody = document.getElementById('tabela-estoque');\n    \n    if (estoquePecas.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center\">Nenhuma peça encontrada</td></tr>';\n        return;\n    }\n    \n    const isReadOnly = window.currentUser && window.currentUser.role === 'tecnico';\n    \n    tbody.innerHTML = estoquePecas.map(peca => `\n        <tr>\n            <td>${peca.nome_peca}</td>\n            <td><code>${peca.codigo_interno}</code></td>\n            <td>\n                <span class=\"badge bg-${peca.quantidade > 5 ? 'success' : peca.quantidade > 0 ? 'warning' : 'danger'}\">\n                    ${peca.quantidade}\n                </span>\n            </td>\n            <td>R$ ${parseFloat(peca.valor_custo).toFixed(2)}</td>\n            <td>\n                ${peca.quantidade > 0 \n                    ? '<span class=\"badge bg-success\">Disponível</span>' \n                    : '<span class=\"badge bg-danger\">Esgotado</span>'}\n            </td>\n            <td class=\"text-end pe-3\">\n                ${!isReadOnly ? `\n                    <button class=\"btn btn-sm btn-outline-primary\" onclick=\"window.editarPeca(${peca.id})\">\n                        <i class=\"bi bi-pencil\"></i>\n                    </button>\n                    <button class=\"btn btn-sm btn-outline-danger\" onclick=\"window.deletarPeca(${peca.id})\">\n                        <i class=\"bi bi-trash\"></i>\n                    </button>\n                ` : '<span class=\"text-muted small\">Somente leitura</span>'}\n            </td>\n        </tr>\n    `).join('');\n}\n\nfunction atualizarSelectPecas() {\n    const select = document.getElementById('peca-select');\n    select.innerHTML = '<option value=\"\">Selecione uma peça...</option>' + \n        estoquePecas\n            .filter(p => p.quantidade > 0)\n            .map(p => `<option value=\"${p.id}\" data-nome=\"${p.nome_peca}\">${p.nome_peca} (${p.quantidade} disponíveis)</option>`)\n            .join('');\n}\n\nasync function salvarPeca(e) {\n    e.preventDefault();\n    \n    if (!lojaAtiva) {\n        showToast('Selecione uma loja antes de adicionar peças', 'error');\n        return;\n    }\n    \n    const id = document.getElementById('peca-id').value;\n    const data = {\n        nome_peca: document.getElementById('peca-nome').value,\n        codigo_interno: document.getElementById('peca-codigo').value,\n        quantidade: parseInt(document.getElementById('peca-quantidade').value),\n        valor_custo: parseFloat(document.getElementById('peca-valor').value),\n        loja: lojaAtiva\n    };\n    \n    try {\n        const url = id ? `/api/estoque-tecnico/${id}` : '/api/estoque-tecnico';\n        const method = id ? 'PUT' : 'POST';\n        \n        const response = await fetch(url, {\n            method,\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n            showToast(id ? 'Peça atualizada!' : 'Peça adicionada!', 'success');\n            modalPeca.hide();\n            await carregarEstoque();\n        } else {\n            showToast(result.error || 'Erro ao salvar peça', 'error');\n        }\n    } catch (error) {\n        showToast('Erro ao salvar peça', 'error');\n    }\n}\n\nwindow.editarPeca = async function(id) {\n    const peca = estoquePecas.find(p => p.id === id);\n    if (!peca) return;\n    \n    document.getElementById('modalPecaLabel').textContent = 'Editar Peça';\n    document.getElementById('peca-id').value = peca.id;\n    document.getElementById('peca-nome').value = peca.nome_peca;\n    document.getElementById('peca-codigo').value = peca.codigo_interno;\n    document.getElementById('peca-quantidade').value = peca.quantidade;\n    document.getElementById('peca-valor').value = peca.valor_custo;\n    \n    modalPeca.show();\n};\n\nwindow.deletarPeca = async function(id) {\n    if (!confirm('Tem certeza que deseja remover esta peça do estoque?')) return;\n    \n    try {\n        const response = await fetch(`/api/estoque-tecnico/${id}`, { method: 'DELETE' });\n        \n        if (response.ok) {\n            showToast('Peça removida do estoque', 'success');\n            await carregarEstoque();\n        } else {\n            showToast('Erro ao remover peça', 'error');\n        }\n    } catch (error) {\n        showToast('Erro ao remover peça', 'error');\n    }\n};\n\nasync function carregarChamados() {\n    const status = document.getElementById('filter-status').value;\n    const search = document.getElementById('search-chamados').value;\n    const loja = document.getElementById('filter-loja-chamados').value;\n    \n    try {\n        const params = new URLSearchParams({ status, search });\n        \n        // Se houver loja ativa, filtrar por ela (ignora filtro manual)\n        if (lojaAtiva) {\n            params.append('loja', lojaAtiva);\n        } else if (loja) {\n            // Se não houver loja ativa, usar filtro manual\n            params.append('loja', loja);\n        }\n        // Se não houver loja ativa nem filtro, carrega de todas as lojas\n        \n        const response = await fetch(`/api/assistencias?${params.toString()}`);\n        assistencias = await response.json();\n        \n        renderChamados();\n    } catch (error) {\n        showToast('Erro ao carregar chamados', 'error');\n    }\n}\n\nfunction renderChamados() {\n    const tbody = document.getElementById('tabela-chamados');\n    \n    if (assistencias.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"7\" class=\"text-center\">Nenhum chamado encontrado</td></tr>';\n        return;\n    }\n    \n    const canDelete = window.currentUser && ['gerente', 'consultor', 'admin', 'dev'].includes(window.currentUser.role);\n    const canEdit = window.currentUser && ['tecnico', 'gerente', 'consultor', 'admin', 'dev'].includes(window.currentUser.role);\n    \n    tbody.innerHTML = assistencias.map(assist => `\n        <tr>\n            <td>${assist.cliente_nome}</td>\n            <td>${formatCPF(assist.cliente_cpf)}</td>\n            <td>${assist.numero_pedido || '-'}</td>\n            <td>${assist.aparelho}</td>\n            <td>\n                <span class=\"badge bg-${getStatusColor(assist.status)}\">\n                    ${assist.status}\n                </span>\n            </td>\n            <td>${formatDate(assist.data_entrada)}</td>\n            <td class=\"text-end pe-3\">\n                <button class=\"btn btn-sm btn-outline-info\" onclick=\"window.verDetalhes(${assist.id})\">\n                    <i class=\"bi bi-eye\"></i>\n                </button>\n                ${canEdit ? `\n                    <button class=\"btn btn-sm btn-outline-primary\" onclick=\"window.editarAssistencia(${assist.id})\">\n                        <i class=\"bi bi-pencil\"></i>\n                    </button>\n                    ${assist.status !== 'Concluído' ? `\n                        <button class=\"btn btn-sm btn-outline-success\" onclick=\"window.concluirAssistencia(${assist.id})\">\n                            <i class=\"bi bi-check-circle\"></i>\n                        </button>\n                    ` : ''}\n                ` : ''}\n                ${canDelete && assist.status === 'Concluído' ? `\n                    <button class=\"btn btn-sm btn-outline-danger\" onclick=\"window.deletarAssistencia(${assist.id})\">\n                        <i class=\"bi bi-trash\"></i>\n                    </button>\n                ` : ''}\n            </td>\n        </tr>\n    `).join('');\n}\n\nasync function salvarAssistencia(e) {\n    e.preventDefault();\n    \n    const pecaSelect = document.getElementById('peca-select');\n    const pecaOption = pecaSelect.selectedOptions[0];\n    \n    const id = document.getElementById('assistencia-id').value;\n    const data = {\n        cliente_nome: document.getElementById('cliente-nome').value,\n        cliente_cpf: document.getElementById('cliente-cpf').value.replace(/\\D/g, ''),\n        numero_pedido: document.getElementById('numero-pedido').value,\n        data_entrada: document.getElementById('data-entrada').value,\n        valor_peca_loja: parseFloat(document.getElementById('valor-peca').value) || 0,\n        valor_servico_cliente: parseFloat(document.getElementById('valor-servico').value) || 0,\n        aparelho: document.getElementById('aparelho').value,\n        peca_id: pecaSelect.value || null,\n        peca_nome: pecaOption ? pecaOption.dataset.nome : null,\n        observacoes: document.getElementById('observacoes').value,\n        status: document.getElementById('status-select').value,\n        loja: document.getElementById('loja-assist').value\n    };\n    \n    if (id) {\n        data.data_conclusao = assistenciaEdit?.data_conclusao || null;\n    }\n    \n    try {\n        const url = id ? `/api/assistencias/${id}` : '/api/assistencias';\n        const method = id ? 'PUT' : 'POST';\n        \n        const response = await fetch(url, {\n            method,\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n            showToast(id ? 'Assistência atualizada!' : 'Assistência cadastrada!', 'success');\n            document.getElementById('form-assistencia').reset();\n            document.getElementById('assistencia-id').value = '';\n            document.getElementById('data-entrada').value = new Date().toISOString().split('T')[0];\n            assistenciaEdit = null;\n            \n            await carregarChamados();\n            \n            const tab = new bootstrap.Tab(document.getElementById('chamados-tab'));\n            tab.show();\n        } else {\n            showToast(result.error || 'Erro ao salvar assistência', 'error');\n        }\n    } catch (error) {\n        showToast('Erro ao salvar assistência', 'error');\n    }\n}\n\nwindow.editarAssistencia = async function(id) {\n    const assist = assistencias.find(a => a.id === id);\n    if (!assist) return;\n    \n    assistenciaEdit = assist;\n    \n    document.getElementById('assistencia-id').value = assist.id;\n    document.getElementById('cliente-nome').value = assist.cliente_nome;\n    document.getElementById('cliente-cpf').value = formatCPF(assist.cliente_cpf);\n    document.getElementById('numero-pedido').value = assist.numero_pedido || '';\n    document.getElementById('data-entrada').value = assist.data_entrada;\n    document.getElementById('valor-peca').value = assist.valor_peca_loja;\n    document.getElementById('valor-servico').value = assist.valor_servico_cliente;\n    document.getElementById('aparelho').value = assist.aparelho;\n    document.getElementById('peca-select').value = assist.peca_id || '';\n    document.getElementById('observacoes').value = assist.observacoes || '';\n    document.getElementById('status-select').value = assist.status;\n    document.getElementById('loja-assist').value = assist.loja || '';\n    \n    const tab = new bootstrap.Tab(document.getElementById('cadastro-tab'));\n    tab.show();\n};\n\nwindow.concluirAssistencia = async function(id) {\n    if (!confirm('Deseja marcar esta assistência como concluída?')) return;\n    \n    try {\n        const response = await fetch(`/api/assistencias/${id}/concluir`, { method: 'POST' });\n        const result = await response.json();\n        \n        if (response.ok) {\n            showToast(result.message, 'success');\n            await carregarChamados();\n        } else {\n            showToast(result.error || 'Erro ao concluir assistência', 'error');\n        }\n    } catch (error) {\n        showToast('Erro ao concluir assistência', 'error');\n    }\n};\n\nwindow.deletarAssistencia = async function(id) {\n    if (!confirm('Tem certeza que deseja excluir esta assistência?')) return;\n    \n    try {\n        const response = await fetch(`/api/assistencias/${id}`, { method: 'DELETE' });\n        const result = await response.json();\n        \n        if (response.ok) {\n            showToast('Assistência removida', 'success');\n            await carregarChamados();\n        } else {\n            showToast(result.error || 'Erro ao remover assistência', 'error');\n        }\n    } catch (error) {\n        showToast('Erro ao remover assistência', 'error');\n    }\n};\n\nwindow.verDetalhes = function(id) {\n    const assist = assistencias.find(a => a.id === id);\n    if (!assist) return;\n    \n    const valorTotal = (parseFloat(assist.valor_peca_loja) || 0) + (parseFloat(assist.valor_servico_cliente) || 0);\n    \n    document.getElementById('detalhes-content').innerHTML = `\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <h6>Informações do Cliente</h6>\n                <p><strong>Nome:</strong> ${assist.cliente_nome}</p>\n                <p><strong>CPF:</strong> ${formatCPF(assist.cliente_cpf)}</p>\n                <p><strong>Nº Pedido:</strong> ${assist.numero_pedido || '-'}</p>\n            </div>\n            <div class=\"col-md-6\">\n                <h6>Informações da Assistência</h6>\n                <p><strong>Aparelho:</strong> ${assist.aparelho}</p>\n                <p><strong>Peça:</strong> ${assist.peca_nome || 'Nenhuma'}</p>\n                <p><strong>Loja:</strong> ${assist.loja || '-'}</p>\n            </div>\n        </div>\n        <div class=\"row mt-3\">\n            <div class=\"col-md-6\">\n                <h6>Datas</h6>\n                <p><strong>Entrada:</strong> ${formatDate(assist.data_entrada)}</p>\n                <p><strong>Conclusão:</strong> ${assist.data_conclusao ? formatDate(assist.data_conclusao) : '-'}</p>\n            </div>\n            <div class=\"col-md-6\">\n                <h6>Valores</h6>\n                <p><strong>Peça (Loja):</strong> R$ ${parseFloat(assist.valor_peca_loja).toFixed(2)}</p>\n                <p><strong>Serviço (Cliente):</strong> R$ ${parseFloat(assist.valor_servico_cliente).toFixed(2)}</p>\n                <p><strong>Total:</strong> <strong>R$ ${valorTotal.toFixed(2)}</strong></p>\n            </div>\n        </div>\n        <div class=\"row mt-3\">\n            <div class=\"col-12\">\n                <h6>Status</h6>\n                <p><span class=\"badge bg-${getStatusColor(assist.status)}\">${assist.status}</span></p>\n            </div>\n        </div>\n        ${assist.observacoes ? `\n            <div class=\"row mt-3\">\n                <div class=\"col-12\">\n                    <h6>Observações</h6>\n                    <p>${assist.observacoes}</p>\n                </div>\n            </div>\n        ` : ''}\n        <div class=\"row mt-3\">\n            <div class=\"col-12\">\n                <p class=\"text-muted small mb-0\">\n                    <strong>Técnico:</strong> ${assist.tecnico_responsavel || '-'}<br>\n                    <strong>Criado em:</strong> ${new Date(assist.created_at).toLocaleString('pt-BR')}\n                </p>\n            </div>\n        </div>\n    `;\n    \n    modalDetalhes.show();\n};\n\nasync function carregarHistorico() {\n    const search = document.getElementById('search-historico').value;\n    const loja = document.getElementById('filter-loja-historico').value;\n    \n    try {\n        const params = new URLSearchParams({ search });\n        \n        // Se houver loja ativa, filtrar por ela (ignora filtro manual)\n        if (lojaAtiva) {\n            params.append('loja', lojaAtiva);\n        } else if (loja) {\n            // Se não houver loja ativa, usar filtro manual\n            params.append('loja', loja);\n        }\n        // Se não houver loja ativa nem filtro, carrega de todas as lojas\n        \n        const response = await fetch(`/api/assistencias/historico?${params.toString()}`);\n        const historico = await response.json();\n        \n        renderHistorico(historico);\n    } catch (error) {\n        showToast('Erro ao carregar histórico', 'error');\n    }\n}\n\nfunction renderHistorico(historico) {\n    const tbody = document.getElementById('tabela-historico');\n    \n    if (historico.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"9\" class=\"text-center\">Nenhuma assistência encontrada</td></tr>';\n        return;\n    }\n    \n    const canDelete = window.currentUser && ['gerente', 'consultor', 'admin', 'dev'].includes(window.currentUser.role);\n    \n    tbody.innerHTML = historico.map(assist => {\n        const dataAtualizacao = assist.data_saida || assist.data_conclusao || assist.created_at;\n        return `\n            <tr>\n                <td>${assist.cliente_nome}</td>\n                <td>${formatCPF(assist.cliente_cpf)}</td>\n                <td>${assist.numero_pedido || '-'}</td>\n                <td>${assist.loja || '-'}</td>\n                <td>${assist.tecnico_responsavel || '-'}</td>\n                <td>\n                    <span class=\"badge bg-${getStatusColor(assist.status)}\">\n                        ${assist.status}\n                    </span>\n                </td>\n                <td>${formatDate(assist.data_entrada)}</td>\n                <td>${formatDateTime(dataAtualizacao)}</td>\n                <td class=\"text-end pe-3\">\n                    <button class=\"btn btn-sm btn-outline-info\" onclick=\"window.verDetalhesHistorico(${assist.id})\" title=\"Ver Detalhes\">\n                        <i class=\"bi bi-eye\"></i>\n                    </button>\n                    ${canDelete && assist.status === 'Concluído' ? `\n                        <button class=\"btn btn-sm btn-outline-danger\" onclick=\"window.deletarAssistencia(${assist.id})\" title=\"Excluir\">\n                            <i class=\"bi bi-trash\"></i>\n                        </button>\n                    ` : ''}\n                </td>\n            </tr>\n        `;\n    }).join('');\n}\n\nwindow.verDetalhesHistorico = async function(id) {\n    try {\n        const response = await fetch(`/api/assistencias?status=Concluído`);\n        const historico = await response.json();\n        const assist = historico.find(a => a.id === id);\n        \n        if (assist) {\n            assistencias.push(assist);\n            window.verDetalhes(id);\n        }\n    } catch (error) {\n        showToast('Erro ao carregar detalhes', 'error');\n    }\n};\n\nfunction getStatusColor(status) {\n    const colors = {\n        'Em andamento': 'primary',\n        'Falta de peças': 'warning',\n        'Concluído': 'success'\n    };\n    return colors[status] || 'secondary';\n}\n\nfunction formatCPF(cpf) {\n    if (!cpf) return '';\n    const cleaned = cpf.replace(/\\D/g, '');\n    return cleaned.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n}\n\nfunction formatDate(dateStr) {\n    if (!dateStr) return '-';\n    const [year, month, day] = dateStr.split('-');\n    return `${day}/${month}/${year}`;\n}\n\nfunction formatDateTime(dateTimeStr) {\n    if (!dateTimeStr) return '-';\n    try {\n        const date = new Date(dateTimeStr);\n        return date.toLocaleString('pt-BR', {\n            day: '2-digit',\n            month: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    } catch (e) {\n        return '-';\n    }\n}\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), wait);\n    };\n}\n\nfunction showToast(message, type = 'info') {\n    const toast = document.createElement('div');\n    toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0`;\n    toast.setAttribute('role', 'alert');\n    toast.innerHTML = `\n        <div class=\"d-flex\">\n            <div class=\"toast-body\">${message}</div>\n            <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n        </div>\n    `;\n    \n    let container = document.querySelector('.toast-container');\n    if (!container) {\n        container = document.createElement('div');\n        container.className = 'toast-container position-fixed top-0 end-0 p-3';\n        document.body.appendChild(container);\n    }\n    \n    container.appendChild(toast);\n    const bsToast = new bootstrap.Toast(toast);\n    bsToast.show();\n    \n    toast.addEventListener('hidden.bs.toast', () => toast.remove());\n}\n","size_bytes":32289},"public/js/pages/admin.js":{"content":"import { showToast } from '../utils.js';\n\n// --- Variáveis de Estado Globais no Módulo ---\nlet dashboardLineChart = null;\nlet dashboardBarChart = null;\nlet dashboardDonutChart = null;\nlet lastRankingData = [];\n\n// --- Funções Auxiliares ---\nconst getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\nconst toISODateString = (date) => date.toISOString().split('T')[0];\n\nfunction setLoadingState(isLoading) {\n    const kpiElements = document.querySelectorAll('[id^=\"geral-\"], [id^=\"loja-\"], [id^=\"overview-\"], [id^=\"assist-\"]');\n    const chartCanvases = ['dashboard-line-chart', 'dashboard-bar-chart', 'dashboard-donut-chart'];\n\n    if (isLoading) {\n        kpiElements.forEach(el => {\n            if (el.tagName === 'H2' || el.tagName === 'H3' || el.tagName === 'H5') {\n                el.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span>';\n            } else { el.innerHTML = ''; }\n        });\n        \n        chartCanvases.forEach(canvasId => {\n            const canvas = document.getElementById(canvasId);\n            if (canvas) canvas.style.opacity = '0.5';\n        });\n    } else {\n        chartCanvases.forEach(canvasId => {\n            const canvas = document.getElementById(canvasId);\n            if (canvas) canvas.style.opacity = '1';\n        });\n    }\n}\n\nfunction getComparisonHtml(current, previous, unit = '') {\n    const currentNum = parseFloat(current);\n    const previousNum = parseFloat(previous);\n    if (isNaN(currentNum) || isNaN(previousNum)) return '';\n\n    if (previousNum === 0) return currentNum > 0 ? '<span class=\"text-success\">▲ Novo</span>' : '';\n    \n    const diff = ((currentNum - previousNum) / previousNum) * 100;\n    if (Math.abs(diff) < 0.1) return '';\n\n    const icon = diff > 0 ? '▲' : '▼';\n    const colorClass = diff > 0 ? 'text-success' : 'text-danger';\n    \n    const previousFormatted = unit === '%' ? previousNum.toFixed(2) : previousNum.toLocaleString('pt-BR');\n    const tooltipTitle = `Valor anterior: ${previousFormatted}${unit}`;\n\n    return `<span class=\"${colorClass}\" data-bs-toggle=\"tooltip\" data-bs-title=\"${tooltipTitle}\">${icon} ${diff.toFixed(1)}%</span>`;\n}\n\n// --- Funções de Renderização de Gráficos ---\n\nfunction renderBarChart(rankingData) {\n    const ctx = document.getElementById('dashboard-bar-chart').getContext('2d');\n    const metricSelect = document.getElementById('bar-chart-metric-select');\n    const metric = metricSelect.value;\n\n    let sortedData = [...rankingData];\n    if (metric === 'vendas') {\n        sortedData.sort((a, b) => b.total_vendas_loja - a.total_vendas_loja);\n    } else if (metric === 'clientes') {\n        sortedData.sort((a, b) => b.total_clientes_loja - a.total_clientes_loja);\n    } else if (metric === 'conversao') {\n        sortedData.sort((a, b) => parseFloat(b.tx_loja) - parseFloat(a.tx_loja));\n    }\n    \n    const topLojas = sortedData.slice(0, 10);\n    const labels = topLojas.map(l => l.loja.length > 20 ? l.loja.substring(0, 20) + '...' : l.loja);\n    \n    let data, label, backgroundColor;\n    if (metric === 'vendas') {\n        data = topLojas.map(l => l.total_vendas_loja);\n        label = 'Vendas';\n        backgroundColor = getCssVar('--accent-color');\n    } else if (metric === 'clientes') {\n        data = topLojas.map(l => l.total_clientes_loja);\n        label = 'Clientes';\n        backgroundColor = getCssVar('--color-success');\n    } else {\n        data = topLojas.map(l => parseFloat(l.tx_loja));\n        label = 'Taxa de Conversão (%)';\n        backgroundColor = '#4169E1';\n    }\n\n    if (dashboardBarChart) dashboardBarChart.destroy();\n    dashboardBarChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: labels,\n            datasets: [{\n                label: label,\n                data: data,\n                backgroundColor: backgroundColor,\n                borderRadius: 6,\n                borderSkipped: false\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: { display: true, position: 'top' },\n                tooltip: {\n                    callbacks: {\n                        label: function(context) {\n                            let label = context.dataset.label || '';\n                            if (label) label += ': ';\n                            if (metric === 'conversao') {\n                                label += context.parsed.y.toFixed(2) + '%';\n                            } else {\n                                label += context.parsed.y.toLocaleString('pt-BR');\n                            }\n                            return label;\n                        }\n                    }\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    ticks: {\n                        callback: function(value) {\n                            if (metric === 'conversao') {\n                                return value.toFixed(1) + '%';\n                            }\n                            return value.toLocaleString('pt-BR');\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\nfunction renderDonutChart(rankingData) {\n    const ctx = document.getElementById('dashboard-donut-chart').getContext('2d');\n    \n    const topLojas = [...rankingData]\n        .sort((a, b) => parseFloat(b.tx_loja) - parseFloat(a.tx_loja))\n        .slice(0, 5);\n    \n    const labels = topLojas.map(l => l.loja.length > 15 ? l.loja.substring(0, 15) + '...' : l.loja);\n    const data = topLojas.map(l => parseFloat(l.tx_loja));\n    \n    // Cores claras e vibrantes (diferentes do gráfico de linha)\n    const colors = ['#f472b6', '#60a5fa', '#fbbf24', '#a78bfa', '#34d399'];\n\n    if (dashboardDonutChart) dashboardDonutChart.destroy();\n    dashboardDonutChart = new Chart(ctx, {\n        type: 'doughnut',\n        data: {\n            labels: labels,\n            datasets: [{\n                data: data,\n                backgroundColor: colors,\n                borderWidth: 2,\n                borderColor: getCssVar('--main-bg')\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'bottom',\n                    labels: {\n                        padding: 15,\n                        font: { size: 11 }\n                    }\n                },\n                tooltip: {\n                    callbacks: {\n                        label: function(context) {\n                            return context.label + ': ' + context.parsed.toFixed(2) + '%';\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\nasync function loadAssistenciaStats() {\n    try {\n        const response = await fetch('/api/assistencias/stats');\n        if (!response.ok) {\n            console.error('Erro ao carregar estatísticas de assistência técnica');\n            // Valores padrão em caso de erro\n            document.getElementById('assist-top-tecnico').textContent = '-';\n            document.getElementById('assist-top-tecnico-count').textContent = '0';\n            document.getElementById('assist-top-loja').textContent = '-';\n            document.getElementById('assist-top-loja-count').textContent = '0';\n            document.getElementById('assist-concluidas').textContent = '0';\n            document.getElementById('assist-em-andamento').textContent = '0';\n            document.getElementById('assist-valor-total').textContent = 'R$ 0,00';\n            return;\n        }\n        const data = await response.json();\n        \n        // Atualizar cards de assistência técnica com proteção contra valores null/undefined\n        const topTecnico = data?.topTecnico || {};\n        const topLoja = data?.topLoja || {};\n        const totais = data?.totais || {};\n        \n        document.getElementById('assist-top-tecnico').textContent = topTecnico.tecnico_responsavel || '-';\n        document.getElementById('assist-top-tecnico-count').textContent = topTecnico.total || 0;\n        \n        document.getElementById('assist-top-loja').textContent = topLoja.loja || '-';\n        document.getElementById('assist-top-loja-count').textContent = topLoja.total || 0;\n        \n        document.getElementById('assist-concluidas').textContent = totais.concluidas || 0;\n        document.getElementById('assist-em-andamento').textContent = totais.em_andamento || 0;\n        \n        const valorTotal = totais.valor_total || 0;\n        document.getElementById('assist-valor-total').textContent = 'R$ ' + valorTotal.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n    } catch (error) {\n        console.error('Erro ao carregar estatísticas de assistência técnica:', error);\n        // Valores padrão em caso de erro\n        document.getElementById('assist-top-tecnico').textContent = '-';\n        document.getElementById('assist-top-tecnico-count').textContent = '0';\n        document.getElementById('assist-top-loja').textContent = '-';\n        document.getElementById('assist-top-loja-count').textContent = '0';\n        document.getElementById('assist-concluidas').textContent = '0';\n        document.getElementById('assist-em-andamento').textContent = '0';\n        document.getElementById('assist-valor-total').textContent = 'R$ 0,00';\n    }\n}\n\nasync function loadDemandas() {\n    const container = document.getElementById('dashboard-demandas-container');\n    if (!container) return;\n    \n    try {\n        const response = await fetch('/api/demandas/pendentes');\n        if (!response.ok) {\n            throw new Error('Erro ao carregar demandas');\n        }\n        const demandas = await response.json();\n        \n        if (demandas.length === 0) {\n            container.innerHTML = `\n                <div class=\"text-center text-muted py-3\">\n                    <i class=\"bi bi-check-circle fs-1\"></i>\n                    <p class=\"mb-0 mt-2\">Nenhuma demanda pendente</p>\n                </div>\n            `;\n            return;\n        }\n        \n        // Mostrar apenas as 5 primeiras demandas\n        const demandasToShow = demandas.slice(0, 5);\n        \n        container.innerHTML = `\n            <div class=\"list-group list-group-flush\">\n                ${demandasToShow.map(demanda => {\n                    const tagColors = {\n                        'urgente': 'danger',\n                        'importante': 'warning',\n                        'normal': 'info'\n                    };\n                    const tagColor = tagColors[demanda.tag] || 'secondary';\n                    const dataFormatada = new Date(demanda.criado_em).toLocaleDateString('pt-BR');\n                    \n                    return `\n                        <div class=\"list-group-item list-group-item-action p-3\">\n                            <div class=\"d-flex w-100 justify-content-between align-items-start\">\n                                <div class=\"flex-grow-1\">\n                                    <h6 class=\"mb-1\">\n                                        <i class=\"bi bi-shop me-1\"></i>${demanda.loja_nome}\n                                    </h6>\n                                    <p class=\"mb-1 small\">${demanda.descricao}</p>\n                                    <small class=\"text-muted\">\n                                        <i class=\"bi bi-person me-1\"></i>${demanda.criado_por_usuario} • ${dataFormatada}\n                                    </small>\n                                </div>\n                                <span class=\"badge bg-${tagColor} ms-2\">${demanda.tag}</span>\n                            </div>\n                        </div>\n                    `;\n                }).join('')}\n            </div>\n            ${demandas.length > 5 ? `\n                <div class=\"text-center mt-2\">\n                    <small class=\"text-muted\">+ ${demandas.length - 5} demandas pendentes</small>\n                </div>\n            ` : ''}\n        `;\n    } catch (error) {\n        console.error('Erro ao carregar demandas:', error);\n        container.innerHTML = `\n            <div class=\"text-center text-danger py-3\">\n                <i class=\"bi bi-exclamation-triangle\"></i>\n                <p class=\"mb-0 mt-2 small\">Erro ao carregar demandas</p>\n            </div>\n        `;\n    }\n}\n\nasync function loadAssistenciasPorLoja() {\n    try {\n        const response = await fetch('/api/assistencias/por-loja');\n        if (!response.ok) {\n            console.error('Erro ao carregar assistências por loja');\n            return;\n        }\n        const data = await response.json();\n        \n        const tbody = document.getElementById('assist-por-loja-tbody');\n        if (!tbody) return;\n        \n        if (data.length === 0) {\n            tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center p-4\">Nenhuma assistência técnica registrada</td></tr>';\n            return;\n        }\n        \n        tbody.innerHTML = data.map(loja => {\n            const taxaConclusao = loja.total > 0 ? ((loja.concluidas / loja.total) * 100).toFixed(1) : '0.0';\n            const valorFormatado = (loja.valor_total || 0).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n            \n            return `\n                <tr>\n                    <td class=\"ps-3\"><strong>${loja.loja}</strong></td>\n                    <td>${loja.total}</td>\n                    <td class=\"text-success\"><strong>${loja.concluidas || 0}</strong></td>\n                    <td class=\"text-warning\"><strong>${loja.em_andamento || 0}</strong></td>\n                    <td>R$ ${valorFormatado}</td>\n                    <td>\n                        <div class=\"d-flex align-items-center gap-2\">\n                            <div class=\"progress\" style=\"width: 100px; height: 20px;\">\n                                <div class=\"progress-bar bg-success\" role=\"progressbar\" style=\"width: ${taxaConclusao}%\" \n                                     aria-valuenow=\"${taxaConclusao}\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                                </div>\n                            </div>\n                            <span class=\"small\">${taxaConclusao}%</span>\n                        </div>\n                    </td>\n                </tr>\n            `;\n        }).join('');\n    } catch (error) {\n        console.error('Erro ao carregar assistências por loja:', error);\n    }\n}\n\nfunction renderLineChart(currentChartData, comparisonChartData, hideMonitData = false) {\n    const ctx = document.getElementById('dashboard-line-chart').getContext('2d');\n    \n    const datasets = [\n        {\n            label: 'Tx. Conv. Loja (Atual)',\n            data: currentChartData.txConversaoLoja,\n            borderColor: '#4ade80',\n            backgroundColor: 'rgba(74, 222, 128, 0.2)',\n            fill: true, tension: 0.4, borderWidth: 3\n        },\n        {\n            label: 'Tx. Conv. Loja (Comparado)',\n            data: comparisonChartData.txConversaoLoja,\n            borderColor: '#4ade80',\n            borderDash: [5, 5], fill: false, tension: 0.4, borderWidth: 2\n        }\n    ];\n    \n    // Adicionar dados de monitoramento apenas se não for gerente\n    if (!hideMonitData) {\n        datasets.push(\n            {\n                label: 'Tx. Conv. Monit. (Atual)',\n                data: currentChartData.txConversaoMonitoramento,\n                borderColor: '#60a5fa',\n                backgroundColor: 'rgba(96, 165, 250, 0.2)',\n                fill: true, tension: 0.4, borderWidth: 3\n            },\n            {\n                label: 'Tx. Conv. Monit. (Comparado)',\n                data: comparisonChartData.txConversaoMonitoramento,\n                borderColor: '#60a5fa',\n                borderDash: [5, 5], fill: false, tension: 0.4, borderWidth: 2\n            }\n        );\n    }\n    \n    if (dashboardLineChart) dashboardLineChart.destroy();\n    dashboardLineChart = new Chart(ctx, {\n        type: 'line',\n        data: { labels: currentChartData.labels, datasets: datasets },\n        options: {\n            responsive: true, maintainAspectRatio: false,\n            interaction: { mode: 'index', intersect: false },\n            plugins: { \n                legend: { position: 'top' }, \n                tooltip: { position: 'nearest' } \n            },\n            scales: { \n                y: { \n                    beginAtZero: true, \n                    ticks: { callback: (value) => value + '%' } \n                } \n            }\n        }\n    });\n}\n\n\nfunction updateOverviewCards(rankingData, currentData) {\n    // Total de lojas ativas\n    document.getElementById('overview-total-lojas').textContent = rankingData.length;\n    \n    // Melhor loja (por taxa de conversão)\n    if (rankingData.length > 0) {\n        const melhorLoja = [...rankingData].sort((a, b) => parseFloat(b.tx_loja) - parseFloat(a.tx_loja))[0];\n        const nomeLoja = melhorLoja.loja.length > 25 ? melhorLoja.loja.substring(0, 25) + '...' : melhorLoja.loja;\n        document.getElementById('overview-melhor-loja').textContent = `${nomeLoja} (${parseFloat(melhorLoja.tx_loja).toFixed(2)}%)`;\n    } else {\n        document.getElementById('overview-melhor-loja').textContent = '-';\n    }\n    \n    // Média de conversão\n    if (rankingData.length > 0) {\n        const somaConversao = rankingData.reduce((acc, loja) => acc + parseFloat(loja.tx_loja), 0);\n        const media = somaConversao / rankingData.length;\n        document.getElementById('overview-media-conversao').textContent = `${media.toFixed(2)}%`;\n    } else {\n        document.getElementById('overview-media-conversao').textContent = '0.00%';\n    }\n    \n    // Total de vendas\n    const totalVendas = currentData.total_vendas_loja || 0;\n    document.getElementById('overview-total-vendas').textContent = totalVendas.toLocaleString('pt-BR');\n}\n\nfunction updateUI(results, hideMonitData = false) {\n    const [currentData, rankingData, currentChartData, comparisonData, comparisonChartData] = results;\n\n    // Armazenar rankingData globalmente\n    lastRankingData = rankingData;\n\n    // Atualizar cards de visão geral\n    updateOverviewCards(rankingData, currentData);\n\n    // Atualizar métricas principais (apenas se não for gerente e dados existirem)\n    if (!hideMonitData && currentData.total_clientes_monitoramento !== undefined) {\n        document.getElementById('geral-clientes').textContent = (currentData.total_clientes_monitoramento || 0).toLocaleString('pt-BR');\n        document.getElementById('geral-vendas').textContent = ((currentData.total_vendas_monitoramento || 0) + (currentData.total_omni || 0)).toLocaleString('pt-BR');\n        document.getElementById('geral-tx-conversao').textContent = `${parseFloat(currentData.tx_conversao_monitoramento || 0).toFixed(2)}%`;\n        document.getElementById('geral-clientes-comp').innerHTML = getComparisonHtml(currentData.total_clientes_monitoramento, comparisonData.total_clientes_monitoramento || 0);\n        document.getElementById('geral-vendas-comp').innerHTML = getComparisonHtml((currentData.total_vendas_monitoramento || 0) + (currentData.total_omni || 0), (comparisonData.total_vendas_monitoramento || 0) + (comparisonData.total_omni || 0));\n        document.getElementById('geral-tx-conversao-comp').innerHTML = getComparisonHtml(currentData.tx_conversao_monitoramento, comparisonData.tx_conversao_monitoramento || 0, '%');\n    }\n    \n    // Atualizar métricas da loja\n    const lojaClientes = document.getElementById('loja-clientes');\n    const lojaVendas = document.getElementById('loja-vendas');\n    const lojaTxConversao = document.getElementById('loja-tx-conversao');\n    const lojaClientesComp = document.getElementById('loja-clientes-comp');\n    const lojaVendasComp = document.getElementById('loja-vendas-comp');\n    const lojaTxConversaoComp = document.getElementById('loja-tx-conversao-comp');\n    \n    if (lojaClientes) lojaClientes.textContent = (currentData.total_clientes_loja || 0).toLocaleString('pt-BR');\n    if (lojaVendas) lojaVendas.textContent = (currentData.total_vendas_loja || 0).toLocaleString('pt-BR');\n    if (lojaTxConversao) lojaTxConversao.textContent = `${parseFloat(currentData.tx_conversao_loja || 0).toFixed(2)}%`;\n    if (lojaClientesComp) lojaClientesComp.innerHTML = getComparisonHtml(currentData.total_clientes_loja, comparisonData.total_clientes_loja);\n    if (lojaVendasComp) lojaVendasComp.innerHTML = getComparisonHtml(currentData.total_vendas_loja, comparisonData.total_vendas_loja);\n    if (lojaTxConversaoComp) lojaTxConversaoComp.innerHTML = getComparisonHtml(currentData.tx_conversao_loja, comparisonData.tx_conversao_loja, '%');\n\n    // Renderizar gráficos\n    renderLineChart(currentChartData, comparisonChartData, hideMonitData);\n    renderBarChart(rankingData);\n    renderDonutChart(rankingData);\n    \n    // Carregar estatísticas de assistência técnica\n    loadAssistenciaStats();\n    loadAssistenciasPorLoja();\n\n    // Ativar tooltips\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n}\n\n// --- Lógica Principal e Eventos ---\nexport function initAdminPage(currentUser) {\n    const form = document.getElementById('form-filtros-dashboard');\n    if (!form) return;\n\n    const lojaSelect = document.getElementById('filtro-loja-dashboard');\n    const dataInicioInput = document.getElementById('filtro-data-inicio-dashboard');\n    const dataFimInput = document.getElementById('filtro-data-fim-dashboard');\n    const quickPeriodButtons = document.querySelectorAll('[data-period]');\n    const barChartMetricSelect = document.getElementById('bar-chart-metric-select');\n    \n    // Detectar se é gerente para adaptar dashboard\n    const isGerente = currentUser && currentUser.role === 'gerente';\n    \n    // Ocultar gráficos comparativos e dados de monitoramento para gerentes\n    if (isGerente) {\n        // Ocultar seção de análise comparativa (gráficos de barras e donut)\n        const comparativeSection = document.getElementById('comparative-charts-section');\n        if (comparativeSection) comparativeSection.style.display = 'none';\n        \n        // Ocultar card de Monitoramento\n        const monitoramentoCard = document.getElementById('monitoramento-card');\n        if (monitoramentoCard) monitoramentoCard.style.display = 'none';\n        \n        // Fazer card de Loja ocupar largura total\n        const lojaCardCol = document.getElementById('loja-card-col');\n        if (lojaCardCol) {\n            lojaCardCol.classList.remove('col-xl-6');\n            lojaCardCol.classList.add('col-xl-12');\n        }\n        \n        // Ocultar opção \"Todas as Lojas\" do filtro\n        if (lojaSelect) {\n            const todasOption = lojaSelect.querySelector('option[value=\"todas\"]');\n            if (todasOption) todasOption.remove();\n        }\n        \n        console.log('Dashboard adaptado para gerente - dados de monitoramento ocultos');\n    }\n\n    async function carregarLojas() {\n        try {\n            const response = await fetch('/api/lojas?status=ativa');\n            const lojas = await response.json();\n            lojas.forEach(loja => lojaSelect.add(new Option(loja.nome, loja.nome)));\n        } catch (error) { console.error('Falha ao carregar lojas', error); }\n    }\n    \n    function setDateRange(period) {\n        const hoje = new Date();\n        let inicio, fim = new Date(hoje);\n        switch (period) {\n            case 'hoje': inicio = hoje; break;\n            case '7d': inicio = new Date(); inicio.setDate(hoje.getDate() - 6); break;\n            case 'mes-atual': inicio = new Date(hoje.getFullYear(), hoje.getMonth(), 1); break;\n            case 'mes-passado':\n                inicio = new Date(hoje.getFullYear(), hoje.getMonth() - 1, 1);\n                fim = new Date(hoje.getFullYear(), hoje.getMonth(), 0);\n                break;\n        }\n        dataInicioInput.value = toISODateString(inicio);\n        dataFimInput.value = toISODateString(fim);\n    }\n\n    async function analisarDados(e) {\n        if(e) e.preventDefault();\n        console.log('analisarDados() chamado');\n        setLoadingState(true);\n\n        const loja = lojaSelect.value;\n        const dataInicio = dataInicioInput.value;\n        const dataFim = dataFimInput.value;\n\n        console.log('Dados do filtro:', { loja, dataInicio, dataFim });\n\n        if (!dataInicio || !dataFim) {\n            console.error('Datas não definidas!', { dataInicio, dataFim });\n            showToast(\"Atenção\", \"Por favor, selecione um período de datas.\", \"danger\");\n            setLoadingState(false);\n            return;\n        }\n        \n        const baseParams = { data_inicio: dataInicio, data_fim: dataFim };\n        if (loja !== 'todas') {\n            baseParams.loja = loja;\n        }\n\n        const currentParams = new URLSearchParams(baseParams);\n\n        const startDate = new Date(dataInicio + 'T00:00:00');\n        const endDate = new Date(dataFim + 'T00:00:00');\n        \n        // Sempre comparar com período anterior\n        const diff = endDate.getTime() - startDate.getTime();\n        const compEndDate = new Date(startDate.getTime() - 86400000);\n        const compStartDate = new Date(compEndDate.getTime() - diff);\n        const compBaseParams = {...baseParams, data_inicio: toISODateString(compStartDate), data_fim: toISODateString(compEndDate) };\n        const comparisonParams = new URLSearchParams(compBaseParams);\n        \n        const apiCalls = [\n            fetch(`/api/dashboard-data?${currentParams.toString()}`),\n            fetch(`/api/ranking?${new URLSearchParams({ data_inicio: dataInicio, data_fim: dataFim })}`),\n            fetch(`/api/dashboard/chart-data?${currentParams.toString()}`),\n            fetch(`/api/dashboard-data?${comparisonParams.toString()}`),\n            fetch(`/api/dashboard/chart-data?${comparisonParams.toString()}`)\n        ];\n        \n        try {\n            const responses = await Promise.all(apiCalls);\n            \n            // Verificar cada resposta individualmente\n            for (let i = 0; i < responses.length; i++) {\n                if (!responses[i].ok) {\n                    console.error(`API ${i} falhou:`, responses[i].status, responses[i].statusText);\n                    throw new Error(`Falha na API ${i}: ${responses[i].status} ${responses[i].statusText}`);\n                }\n            }\n            \n            const results = await Promise.all(responses.map(res => res.json()));\n\n            updateUI(results, isGerente);\n        } catch (error) {\n            console.error(\"Erro ao analisar dados:\", error.message, error.stack);\n            showToast(\"Erro\", \"Não foi possível carregar os dados do dashboard.\", \"danger\");\n        } finally {\n            setLoadingState(false);\n        }\n    }\n    \n    // Event Listeners\n    form.addEventListener('submit', analisarDados);\n    \n    quickPeriodButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            quickPeriodButtons.forEach(btn => btn.classList.remove('active'));\n            e.currentTarget.classList.add('active');\n            setDateRange(e.currentTarget.dataset.period);\n        });\n    });\n\n    if (barChartMetricSelect) {\n        barChartMetricSelect.addEventListener('change', () => {\n            if (lastRankingData.length > 0) {\n                renderBarChart(lastRankingData);\n            }\n        });\n    }\n\n    // Event listener para botão de atualizar assistências por loja\n    const btnRefreshAssistLoja = document.getElementById('btn-refresh-assist-loja');\n    if (btnRefreshAssistLoja) {\n        btnRefreshAssistLoja.addEventListener('click', () => {\n            loadAssistenciasPorLoja();\n            showToast('Atualizado', 'Dados de assistência por loja atualizados', 'success');\n        });\n    }\n\n    // Inicialização\n    async function inicializar() {\n        console.log('Inicializando dashboard...');\n        await carregarLojas();\n        console.log('Lojas carregadas');\n        loadDemandas(); // Carregar demandas pendentes\n        console.log('Configurando período de 7 dias');\n        setDateRange('7d');\n        const initialActiveButton = document.querySelector('[data-period=\"7d\"]');\n        if(initialActiveButton) initialActiveButton.classList.add('active');\n        console.log('Chamando analisarDados...');\n        analisarDados();\n    }\n    \n    console.log('Iniciando admin page...');\n    inicializar();\n}\n","size_bytes":28625},"public/js/pages/gerenciar-lojas.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initGerenciarLojasPage() {\n    // Aguardar currentUser estar disponível\n    if (!window.currentUser) {\n        setTimeout(initGerenciarLojasPage, 100);\n        return;\n    }\n    \n    const userRole = window.currentUser.role;\n    const isAdminOrDev = ['admin', 'dev'].includes(userRole);\n    const isGerenteOrConsultor = ['gerente', 'consultor'].includes(userRole);\n    \n    const secaoLojas = document.getElementById('secao-gerenciar-lojas');\n    const secaoVendedores = document.getElementById('secao-gerenciar-vendedores');\n    \n    if (!secaoLojas || !secaoVendedores) {\n        console.error('Elementos da página de lojas não encontrados');\n        return;\n    }\n    \n    if (isAdminOrDev) {\n        secaoLojas.style.display = 'block';\n        secaoVendedores.style.display = 'none';\n        initGerenciarLojas();\n    } else if (isGerenteOrConsultor) {\n        secaoLojas.style.display = 'none';\n        secaoVendedores.style.display = 'block';\n        initGerenciarVendedores();\n    }\n}\n\nfunction initGerenciarLojas() {\n    const tableBody = document.getElementById('tabela-lojas-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-loja');\n    const modalEl = document.getElementById('modal-loja');\n    \n    if (!tableBody || !btnAdicionar || !modalEl) return;\n    \n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-loja');\n    const modalTitle = document.getElementById('modalLojaLabel');\n    let lojasCache = [];\n    let tecnicosCache = [];\n\n    async function carregarTecnicos() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const usuarios = await response.json();\n            tecnicosCache = usuarios.filter(u => u.role === 'tecnico');\n            \n            const tecnicoSelect = document.getElementById('loja-tecnico');\n            tecnicoSelect.innerHTML = '<option value=\"\">Nenhum</option>' + \n                tecnicosCache.map(tec => `<option value=\"${tec.username}\">${tec.username}</option>`).join('');\n        } catch (e) {\n            console.error('Erro ao carregar técnicos:', e);\n        }\n    }\n\n    async function carregarLojas() {\n        tableBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch('/api/lojas');\n            lojasCache = await response.json();\n            if (lojasCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center\">Nenhuma loja cadastrada.</td></tr>';\n                return;\n            }\n            tableBody.innerHTML = lojasCache.map(loja => {\n                const statusBadge = loja.status === 'ativa' ? `<span class=\"badge bg-success\">Ativa</span>` : `<span class=\"badge bg-secondary\">Inativa</span>`;\n                const tecnicoNome = loja.tecnico_username ? `<span class=\"badge bg-secondary\">${loja.tecnico_username}</span>` : '-';\n                return `<tr><td>${loja.nome}</td><td>${statusBadge}</td><td>${loja.funcao_especial || '-'}</td><td>${tecnicoNome}</td><td>${loja.observacoes || '-'}</td><td class=\"text-end pe-3\"><button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${loja.id}\"><i class=\"bi bi-pencil\"></i></button> <button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${loja.id}\"><i class=\"bi bi-trash\"></i></button></td></tr>`;\n            }).join('');\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center text-danger\">Erro ao carregar.</td></tr>';\n        }\n    }\n\n    function abrirModalParaAdicionar() {\n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Nova Loja';\n        document.getElementById('loja-id').value = '';\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const loja = lojasCache.find(l => l.id === id);\n        if (!loja) return;\n        modalForm.reset();\n        modalTitle.textContent = 'Editar Loja';\n        document.getElementById('loja-id').value = loja.id;\n        document.getElementById('loja-nome').value = loja.nome;\n        document.getElementById('loja-status').value = loja.status;\n        document.getElementById('loja-funcao-especial').value = loja.funcao_especial || '';\n        document.getElementById('loja-tecnico').value = loja.tecnico_username || '';\n        document.getElementById('loja-observacoes').value = loja.observacoes || '';\n        modal.show();\n    }\n\n    async function excluirLoja(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir esta loja?`);\n        if (!confirmed) return;\n        try {\n            const response = await fetch(`/api/lojas/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir.');\n            showToast('Sucesso', 'Loja excluída.', 'success');\n            carregarLojas();\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir a loja.', 'danger');\n        }\n    }\n\n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const id = document.getElementById('loja-id').value;\n        const data = { \n            nome: document.getElementById('loja-nome').value, \n            status: document.getElementById('loja-status').value, \n            funcao_especial: document.getElementById('loja-funcao-especial').value,\n            tecnico_username: document.getElementById('loja-tecnico').value || null,\n            observacoes: document.getElementById('loja-observacoes').value \n        };\n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/lojas/${id}` : '/api/lojas';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            if (!response.ok) throw new Error('Falha ao salvar. Nome já existe?');\n            showToast('Sucesso', `Loja salva.`, 'success');\n            modal.hide();\n            carregarLojas();\n        } catch(e) { showToast('Erro', e.message, 'danger'); }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirLoja(id);\n    });\n    carregarTecnicos();\n    carregarLojas();\n}\n\nfunction initGerenciarVendedores() {\n    const selectLoja = document.getElementById('select-loja-vendedores');\n    const containerVendedores = document.getElementById('container-vendedores');\n    const tableBody = document.getElementById('tabela-vendedores-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-vendedor');\n    const modalEl = document.getElementById('modal-vendedor');\n    \n    if (!selectLoja || !containerVendedores || !tableBody || !btnAdicionar || !modalEl) return;\n    \n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-vendedor');\n    const modalTitle = document.getElementById('modalVendedorLabel');\n    let vendedoresCache = [];\n    let lojaAtualId = null;\n\n    async function carregarLojas() {\n        console.log('🔍 Iniciando carregamento de lojas para vendedores...');\n        try {\n            const response = await fetch('/api/lojas');\n            console.log('📡 Response status:', response.status);\n            \n            const lojas = await response.json();\n            console.log('📦 Lojas recebidas:', lojas);\n            console.log('📊 Tipo:', typeof lojas, 'É array?', Array.isArray(lojas), 'Quantidade:', lojas.length);\n            \n            if (!Array.isArray(lojas) || lojas.length === 0) {\n                console.warn('⚠️ Nenhuma loja disponível');\n                selectLoja.innerHTML = '<option value=\"\">Nenhuma loja disponível</option>';\n                return;\n            }\n            \n            selectLoja.innerHTML = '<option value=\"\">Selecione uma loja...</option>' + \n                lojas.map(loja => {\n                    console.log('🏪 Adicionando loja:', loja.nome, 'ID:', loja.id);\n                    return `<option value=\"${loja.id}\">${loja.nome}</option>`;\n                }).join('');\n            \n            console.log('✅ Select preenchido com', lojas.length, 'lojas');\n        } catch (e) {\n            console.error('❌ Erro ao carregar lojas:', e);\n            showToast('Erro', 'Não foi possível carregar lojas.', 'danger');\n        }\n    }\n\n    async function carregarVendedores(lojaId) {\n        tableBody.innerHTML = '<tr><td colspan=\"8\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch(`/api/vendedores?loja_id=${lojaId}`);\n            vendedoresCache = await response.json();\n            \n            if (vendedoresCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"8\" class=\"text-center\">Nenhum vendedor cadastrado nesta loja.</td></tr>';\n                return;\n            }\n            \n            tableBody.innerHTML = vendedoresCache.map(v => {\n                const statusBadge = v.data_demissao ? \n                    '<span class=\"badge bg-danger\">Demitido</span>' : \n                    '<span class=\"badge bg-success\">Ativo</span>';\n                \n                return `<tr>\n                    <td>${v.nome}</td>\n                    <td>${v.telefone}</td>\n                    <td>${formatarData(v.data_entrada)}</td>\n                    <td>${v.data_demissao ? formatarData(v.data_demissao) : '-'}</td>\n                    <td>${v.previsao_entrada || '-'}</td>\n                    <td>${v.previsao_saida || '-'}</td>\n                    <td>${statusBadge}</td>\n                    <td class=\"text-end pe-3\">\n                        <button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${v.id}\"><i class=\"bi bi-pencil\"></i></button>\n                        <button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${v.id}\"><i class=\"bi bi-trash\"></i></button>\n                    </td>\n                </tr>`;\n            }).join('');\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"8\" class=\"text-center text-danger\">Erro ao carregar vendedores.</td></tr>';\n        }\n    }\n\n    function formatarData(data) {\n        if (!data) return '-';\n        const partes = data.split('-');\n        if (partes.length === 3) {\n            return `${partes[2]}/${partes[1]}/${partes[0]}`;\n        }\n        return data;\n    }\n\n    function abrirModalParaAdicionar() {\n        if (!lojaAtualId) {\n            showToast('Atenção', 'Selecione uma loja primeiro.', 'warning');\n            return;\n        }\n        \n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Vendedor';\n        document.getElementById('vendedor-id').value = '';\n        document.getElementById('vendedor-loja-id').value = lojaAtualId;\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const vendedor = vendedoresCache.find(v => v.id === id);\n        if (!vendedor) return;\n        \n        modalForm.reset();\n        modalTitle.textContent = 'Editar Vendedor';\n        document.getElementById('vendedor-id').value = vendedor.id;\n        document.getElementById('vendedor-loja-id').value = vendedor.loja_id;\n        document.getElementById('vendedor-nome').value = vendedor.nome;\n        document.getElementById('vendedor-telefone').value = vendedor.telefone;\n        document.getElementById('vendedor-data-entrada').value = vendedor.data_entrada;\n        document.getElementById('vendedor-data-demissao').value = vendedor.data_demissao || '';\n        document.getElementById('vendedor-previsao-entrada').value = vendedor.previsao_entrada || '';\n        document.getElementById('vendedor-previsao-saida').value = vendedor.previsao_saida || '';\n        modal.show();\n    }\n\n    async function excluirVendedor(id) {\n        const confirmed = await showConfirmModal('Tem certeza que deseja excluir este vendedor?');\n        if (!confirmed) return;\n        \n        try {\n            const response = await fetch(`/api/vendedores/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir.');\n            showToast('Sucesso', 'Vendedor excluído.', 'success');\n            carregarVendedores(lojaAtualId);\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir o vendedor.', 'danger');\n        }\n    }\n\n    selectLoja.addEventListener('change', (e) => {\n        lojaAtualId = e.target.value;\n        \n        if (lojaAtualId) {\n            containerVendedores.style.display = 'block';\n            carregarVendedores(lojaAtualId);\n        } else {\n            containerVendedores.style.display = 'none';\n        }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n\n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirVendedor(id);\n    });\n\n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        \n        const id = document.getElementById('vendedor-id').value;\n        const data = {\n            loja_id: parseInt(document.getElementById('vendedor-loja-id').value, 10),\n            nome: document.getElementById('vendedor-nome').value,\n            telefone: document.getElementById('vendedor-telefone').value,\n            data_entrada: document.getElementById('vendedor-data-entrada').value,\n            data_demissao: document.getElementById('vendedor-data-demissao').value || null,\n            previsao_entrada: document.getElementById('vendedor-previsao-entrada').value || null,\n            previsao_saida: document.getElementById('vendedor-previsao-saida').value || null,\n            ativo: document.getElementById('vendedor-data-demissao').value ? 0 : 1\n        };\n        \n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/vendedores/${id}` : '/api/vendedores';\n        \n        try {\n            const response = await fetch(url, { \n                method, \n                headers: { 'Content-Type': 'application/json' }, \n                body: JSON.stringify(data) \n            });\n            \n            if (!response.ok) throw new Error('Falha ao salvar vendedor.');\n            \n            showToast('Sucesso', 'Vendedor salvo com sucesso.', 'success');\n            modal.hide();\n            carregarVendedores(lojaAtualId);\n        } catch (e) {\n            showToast('Erro', e.message, 'danger');\n        }\n    });\n\n    carregarLojas();\n}\n","size_bytes":15082},"replit.md":{"content":"# Sistema de Monitoramento de Lojas de Varejo\n\n## Overview\nThis project is a web-based retail store monitoring and reporting system built with Node.js, Express, and SQLite. Its primary purpose is to provide functionalities for managing retail stores, generating various sales reports, handling PDF uploads, exporting data, and visualizing key performance indicators through a dashboard. The system aims to streamline retail operations by offering authentication, user management, and a comprehensive view of store performance, including future integration with external sales platforms like Bluve/Blu.\n\n## User Preferences\nI prefer simple language. I want iterative development. Ask before making major changes. I prefer detailed explanations.\n\n## System Architecture\n\n### UI/UX Decisions\nThe system features a modern, Apple-inspired design aesthetic with premium visual elements. Key UI/UX decisions include:\n- **Glassmorphism**: Utilizes frosted glass effects with `backdrop-filter: blur()` for cards, modals, and menus.\n- **Micro-animations**: Implements subtle animations for buttons (ripple, scale), hover states (translateY), and active states for tactile feedback.\n- **Responsive Design**: Comprehensive responsiveness across various devices (desktop, tablet, mobile) with optimized layouts for tables, cards, forms, and modals.\n- **Theming**: Includes a floating dark mode toggle with smooth transitions.\n- **Login Page**: Features a hero-style login page with gradient backgrounds, floating cards, and sequenced fade-in animations.\n- **Component Styling**: Standardized buttons with consistent padding, border-radius, and gradient effects. Cards have layered shadows and subtle hover effects. Forms feature bold labels, rounded inputs, and enhanced focus states.\n- **Dashboard**: Enhanced with performance indicator cards, comparative bar charts, and a donut chart for conversion distribution. Ranking visuals include medal icons for top performers.\n- **Navigation**: Sidebar navigation with sliding accent bars on hover/active states and animated icons. A toggle button is available to hide/show the sidebar, with its state persistently saved.\n\n### Technical Implementations\n- **Backend**: Node.js with Express.js framework.\n- **Database**: SQLite for local data storage, with automatic creation of `relatorios.db` and necessary tables on first run.\n- **Authentication**: User authentication with different access levels (admin, user, technician). Default admin credentials: `admin`/`admin`.\n- **File Uploads**: Utilizes `multer` for handling file uploads.\n- **PDF Processing**: `pdf-parse` for reading PDFs and `pdfkit` for generating them.\n- **Excel Export**: `exceljs` for generating Excel reports.\n- **Session Management**: `express-session` for managing user sessions.\n- **Dashboard Features**: Dynamic graphs and statistics, including performance indicators, comparative charts, and ranking displays.\n- **Demand System**: Internal system for managing demands.\n- **Backup/Restore**: Functionality for backing up and restoring the database.\n- **Assistência Técnica Module**:\n    - **Roles**: Introduced a \"Técnico\" (Technician) role with restricted access based on assigned `loja_tecnico`.\n    - **Functionality**: Management of technical assistance calls, stock control for repair parts, and detailed logging of assistance events. Automatic stock updates upon completion of assistance.\n    - **APIs**: CRUD operations for `estoque_tecnico` and `assistencias`.\n\n### Feature Specifications\n- User authentication and access control.\n- Store management (cadastro e gerenciamento de lojas).\n- Sales report generation and querying.\n- PDF upload and processing (Omni and Busca Técnica).\n- Report export in TXT, PDF, and Excel formats (including exporting all reports to Excel).\n- Interactive dashboard with graphs and statistics.\n- Internal demand management system.\n- Database backup and restoration.\n- Technical assistance module with stock management and restricted technician views.\n\n### System Design Choices\n- **Project Structure**: Clear separation of concerns with `server.js` as the main entry point, `views/` for HTML templates, `public/` for static assets, and `data/` for the SQLite database.\n- **Environment**: Configured for Replit with server running on port 5000 and binding to `0.0.0.0`.\n- **Modularity**: New features like the Technical Assistance module are structured with dedicated tables and APIs.\n- **Responsiveness**: Extensive CSS additions for adaptive layouts across various screen sizes.\n\n## External Dependencies\n- **express**: Web server framework.\n- **sqlite3**: SQLite database driver.\n- **express-session**: Middleware for session management.\n- **multer**: Middleware for handling `multipart/form-data`, primarily for file uploads.\n- **pdf-parse**: Library for parsing PDF files.\n- **pdfkit**: Library for PDF generation.\n- **exceljs**: Library for creating and reading Excel XLSX files.\n- **Bluve/Blu (Planned)**: Future integration for bidirectional store synchronization, automatic report import (daily sales), and utilizing Bluve's APIs (Movement of Sales, Extract, Reconciliation).\n\n## Recent Changes\n\n### UI Refinements - Compact Mode (2025-10-31)\n- 🌓 **Botão de Modo Noturno Ultra Compacto**: \n  - Reduzido de 48px para **36px** (width/height)\n  - Border-radius de 12px para 10px (mais sutil)\n  - Ícone reduzido: 1.3rem → 1.1rem\n  - Posicionamento: top/right de 2rem → 1.25rem\n  - Box-shadow mais suave: 0 2px 10px (antes 0 4px 16px)\n  - Visual minimalista e discreto\n- 🗑️ **Remoção de Botão Duplicado**: \n  - Removido botão de tema antigo da sidebar (#theme-toggle)\n  - Mantido apenas botão flutuante (desktop) e mobile\n  - Theme.js já protege contra elementos faltantes\n- 📋 **Simplificação do Menu**:\n  - Removido item \"Configurações\" com submenu\n  - Restaurado item \"Usuários\" diretamente no menu principal\n  - Razão: Botão de engrenagem já existe ao lado do \"live\"\n  - Menu agora mais limpo e direto","size_bytes":5986},"public/css/style.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n/* ============================================================\n   VARIÁVEIS - TEMA APPLE + LOFT DESIGN\n============================================================ */\n:root {\n    --sidebar-width: 220px;\n    \n    /* Modo Claro - Cores REAIS da Loft (branco + cinza pastel + laranja) */\n    --main-bg-light: #ffffff;\n    --content-bg-light: #f8f8f8;\n    --hover-bg-light: #f0f0f0;\n    --border-color-light: #e0e0e0;\n    --text-primary-light: #2c2c2c;\n    --text-secondary-light: #757575;\n    --text-tertiary-light: #9e9e9e;\n    \n    /* Modo Escuro - Cinza escuro com toques de laranja */\n    --main-bg-dark: #1a1a1a;\n    --content-bg-dark: #2a2a2a;\n    --hover-bg-dark: #353535;\n    --border-color-dark: #404040;\n    --text-primary-dark: #f5f5f5;\n    --text-secondary-dark: #b0b0b0;\n    --text-tertiary-dark: #808080;\n    \n    /* Cor de Destaque - Laranja Pastel da Loft */\n    --accent-primary: #ff8c42;\n    --accent-secondary: #ff7733;\n    --accent-hover: #ff9d5c;\n    \n    /* Cores Chamativas e Claras para Dashboard */\n    --color-success: #4ade80;\n    --color-warning: #fbbf24;\n    --color-error: #fb7185;\n    --color-info: #60a5fa;\n    --color-purple: #a78bfa;\n    --color-pink: #f472b6;\n    --color-yellow: #fde047;\n    --color-blue: #38bdf8;\n    \n    /* Propriedades Dinâmicas (alternam com tema) */\n    --main-bg: var(--main-bg-light);\n    --content-bg: var(--content-bg-light);\n    --hover-bg: var(--hover-bg-light);\n    --border-color: var(--border-color-light);\n    --text-primary: var(--text-primary-light);\n    --text-secondary: var(--text-secondary-light);\n    --text-tertiary: var(--text-tertiary-light);\n    \n    /* Design */\n    --border-radius-xl: 20px;\n    --border-radius-large: 16px;\n    --border-radius-medium: 12px;\n    --border-radius-small: 8px;\n    --transition-speed: 0.3s;\n    --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.04);\n    --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.08);\n    --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.12);\n}\n\n/* Tema Escuro */\n[data-theme=\"dark\"] {\n    --main-bg: var(--main-bg-dark);\n    --content-bg: var(--content-bg-dark);\n    --hover-bg: var(--hover-bg-dark);\n    --border-color: var(--border-color-dark);\n    --text-primary: var(--text-primary-dark);\n    --text-secondary: var(--text-secondary-dark);\n    --text-tertiary: var(--text-tertiary-dark);\n    --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);\n    --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);\n    --shadow-lg: 0 8px 32px rgba(0, 0, 0, 0.5);\n}\n\n/* ============================================================\n   SOBRESCREVER CORES DO BOOTSTRAP (CLARAS E CHAMATIVAS)\n============================================================ */\n.text-success { color: var(--color-success) !important; }\n.text-warning { color: var(--color-warning) !important; }\n.text-danger { color: var(--color-error) !important; }\n.text-info { color: var(--color-info) !important; }\n\n.bg-success { background-color: var(--color-success) !important; }\n.bg-warning { background-color: var(--color-warning) !important; }\n.bg-danger { background-color: var(--color-error) !important; }\n.bg-info { background-color: var(--color-info) !important; }\n\n.btn-success {\n    background-color: var(--color-success) !important;\n    border-color: var(--color-success) !important;\n    color: white !important;\n}\n\n.btn-success:hover {\n    background-color: #22c55e !important;\n    border-color: #22c55e !important;\n}\n\n.btn-warning {\n    background-color: var(--color-warning) !important;\n    border-color: var(--color-warning) !important;\n    color: #78350f !important;\n}\n\n.btn-warning:hover {\n    background-color: #f59e0b !important;\n    border-color: #f59e0b !important;\n}\n\n.btn-danger {\n    background-color: var(--color-error) !important;\n    border-color: var(--color-error) !important;\n    color: white !important;\n}\n\n.btn-danger:hover {\n    background-color: #f43f5e !important;\n    border-color: #f43f5e !important;\n}\n\n.btn-info {\n    background-color: var(--color-info) !important;\n    border-color: var(--color-info) !important;\n    color: white !important;\n}\n\n.btn-info:hover {\n    background-color: #3b82f6 !important;\n    border-color: #3b82f6 !important;\n}\n\n.btn-excel {\n    background-color: #217346 !important;\n    border-color: #217346 !important;\n    color: white !important;\n}\n\n.btn-excel:hover {\n    background-color: #1a5c37 !important;\n    border-color: #1a5c37 !important;\n}\n\n.badge.bg-success { background-color: var(--color-success) !important; }\n.badge.bg-warning { background-color: var(--color-warning) !important; color: #78350f !important; }\n.badge.bg-danger { background-color: var(--color-error) !important; }\n.badge.bg-info { background-color: var(--color-info) !important; }\n\n/* Cores de tipo de usuário - apenas texto colorido */\n.user-role-consultor {\n    color: #fbbf24 !important;\n}\n\n.user-role-admin {\n    color: #ff8c42 !important;\n}\n\n.user-role-gerente {\n    color: #4ade80 !important;\n}\n\n.user-role-monitoramento {\n    color: #60a5fa !important;\n}\n\n.user-role-dev {\n    color: #ef4444 !important;\n}\n\n/* ============================================================\n   ESTRUTURA PRINCIPAL E ESTILOS GLOBAIS\n============================================================ */\n* {\n    transition: background-color var(--transition-speed) ease, \n                color var(--transition-speed) ease,\n                border-color var(--transition-speed) ease;\n}\n\nbody { \n    background-color: var(--main-bg) !important; \n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n    font-weight: 400;\n    line-height: 1.6;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.main-content { \n    padding: 2rem; \n    height: 100vh; \n    overflow-y: auto; \n}\n\n#page-content { \n    max-width: 1600px; \n    margin: 0 auto; \n}\n\nbody, body * { \n    color: var(--text-primary) !important; \n}\n\nsmall, .text-muted { \n    color: var(--text-secondary) !important; \n}\n\n.text-tertiary {\n    color: var(--text-tertiary) !important;\n}\n\n/* Títulos com estilo Apple */\nh1, h2, h3, h4, h5, h6 {\n    font-weight: 600;\n    letter-spacing: -0.02em;\n}\n\nh4.mb-3 {\n    font-weight: 600;\n    font-size: 1.5rem;\n    padding-bottom: 1rem;\n    position: relative;\n    border-bottom: 1px solid var(--border-color);\n    margin-bottom: 1.5rem !important;\n    letter-spacing: -0.02em;\n}\n\nh4.mb-3::after {\n    content: '';\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    width: 60px;\n    height: 2px;\n    background: var(--accent-primary);\n}\n\n/* ============================================================\n   ANIMAÇÕES GLOBAIS - Scroll e Page Load\n============================================================ */\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n@keyframes slideInLeft {\n    from {\n        opacity: 0;\n        transform: translateX(-20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateX(0);\n    }\n}\n\nbody {\n    opacity: 0;\n    animation: fadeIn 0.5s ease-in-out forwards;\n}\n\nbody.page-loaded {\n    opacity: 1;\n}\n\n.will-animate {\n    opacity: 0;\n    transform: translateY(30px);\n    transition: opacity 0.6s cubic-bezier(0.16, 1, 0.3, 1),\n                transform 0.6s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n.will-animate.animate-in {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.spinner-border {\n    display: inline-block;\n    width: 1rem;\n    height: 1rem;\n    vertical-align: -0.125em;\n    border: 0.15em solid currentColor;\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: spinner-border-spin 0.75s linear infinite;\n}\n\n.spinner-border-sm {\n    width: 0.875rem;\n    height: 0.875rem;\n    border-width: 0.12em;\n}\n\n@keyframes spinner-border-spin {\n    100% { transform: rotate(360deg); }\n}\n\n/* ============================================================\n   SIDEBAR DESKTOP - Estilo Apple/Loft\n============================================================ */\n.sidebar-desktop {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: var(--sidebar-width);\n    height: 100vh;\n    background-color: var(--content-bg);\n    border-right: 1px solid var(--border-color);\n    padding: 2rem 1.5rem;\n    z-index: 1000;\n    display: flex;\n    flex-direction: column;\n    box-shadow: var(--shadow-sm);\n    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n.sidebar-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 0.5rem;\n    font-size: 1.4rem;\n    font-weight: 600;\n    padding-bottom: 1.5rem;\n    border-bottom: 1px solid var(--border-color);\n    letter-spacing: -0.03em;\n    width: 100%;\n}\n\n.sidebar-header .logo-container {\n    display: flex;\n    align-items: center;\n    gap: 0.625rem;\n    flex: 1;\n    min-width: 0;\n}\n\n.sidebar-header .sidebar-text {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.sidebar-header i {\n    color: var(--text-primary) !important;\n    font-size: 1.6rem;\n    flex-shrink: 0;\n}\n\n.sidebar-controls {\n    display: flex;\n    gap: 0.375rem;\n    flex-shrink: 0;\n    align-items: center;\n}\n\n/* Botão Dark/Light Mode e Toggle Sidebar - REDESIGNED */\n.theme-toggle {\n    background: var(--hover-bg);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    padding: 0;\n    cursor: pointer;\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 36px;\n    height: 36px;\n    flex-shrink: 0;\n}\n\n.theme-toggle:hover {\n    background: var(--border-color);\n    transform: scale(1.08);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n}\n\n.theme-toggle:active {\n    transform: scale(0.92);\n}\n\n.theme-toggle i {\n    font-size: 1.1rem;\n    color: var(--text-primary) !important;\n    transition: transform 0.3s ease;\n    line-height: 1;\n}\n\n/* Sidebar oculta */\n.sidebar-desktop.sidebar-hidden {\n    transform: translateX(-100%);\n}\n\n.sidebar-desktop.sidebar-hidden .sidebar-text {\n    opacity: 0;\n}\n\n/* Botão flutuante para mostrar sidebar */\n.sidebar-show-btn {\n    position: fixed;\n    top: 2rem;\n    left: 1rem;\n    width: 48px;\n    height: 48px;\n    background: var(--content-bg);\n    border: 1px solid var(--border-color);\n    border-radius: 12px;\n    display: none;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    z-index: 999;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n    opacity: 0;\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n}\n\n.sidebar-show-btn i {\n    font-size: 1.3rem;\n    color: var(--text-primary) !important;\n}\n\n.sidebar-show-btn:hover {\n    background: var(--hover-bg);\n    transform: scale(1.05);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\n}\n\n.sidebar-show-btn:active {\n    transform: scale(0.95);\n}\n\n.sidebar-show-btn.visible {\n    display: flex;\n    opacity: 1;\n    animation: slideInLeft 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n/* Botão flutuante de tema (canto superior direito) */\n.theme-toggle-floating {\n    position: fixed;\n    top: 1.25rem;\n    right: 1.25rem;\n    width: 36px;\n    height: 36px;\n    background: var(--content-bg);\n    border: 1px solid var(--border-color);\n    border-radius: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    z-index: 999;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n}\n\n.theme-toggle-floating i {\n    font-size: 1.1rem;\n    color: var(--text-primary) !important;\n    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n.theme-toggle-floating:hover {\n    background: var(--hover-bg);\n    transform: scale(1.05) rotate(5deg);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\n}\n\n.theme-toggle-floating:hover i {\n    transform: rotate(15deg) scale(1.1);\n}\n\n.theme-toggle-floating:active {\n    transform: scale(0.95);\n}\n\n.sidebar-nav {\n    list-style: none !important;\n    padding: 0 !important;\n    margin: 2rem 0;\n    flex-grow: 1;\n}\n\n.sidebar-nav .nav-item {\n    margin-bottom: 0.25rem !important;\n    position: relative;\n}\n\n.nav-link {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 0.625rem 1rem;\n    border-radius: 8px;\n    color: var(--text-secondary) !important;\n    text-decoration: none;\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n    font-weight: 500;\n    font-size: 0.875rem;\n    position: relative;\n    overflow: hidden;\n}\n\n.nav-link::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 3px;\n    height: 0;\n    background: var(--accent-primary);\n    border-radius: 0 2px 2px 0;\n    transition: height 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n.nav-link i {\n    transition: transform 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n.nav-link:hover {\n    color: var(--text-primary) !important;\n    background-color: var(--hover-bg);\n    transform: translateX(4px);\n}\n\n.nav-link:hover i {\n    transform: scale(1.1);\n}\n\n.nav-link:hover::before {\n    height: 60%;\n}\n\n.nav-item.active .nav-link {\n    color: var(--text-primary) !important;\n    background-color: var(--hover-bg);\n    font-weight: 600;\n}\n\n.nav-item.active .nav-link::before {\n    height: 70%;\n}\n\n.nav-item.active .nav-link i {\n    color: var(--accent-primary) !important;\n    transform: scale(1.05);\n}\n\n/* Submenu de Configurações */\n.submenu-link {\n    font-size: 0.825rem !important;\n    padding: 0.5rem 1rem 0.5rem 2.5rem !important;\n    color: var(--text-tertiary) !important;\n}\n\n.submenu-link:hover {\n    color: var(--text-primary) !important;\n    background-color: var(--hover-bg);\n}\n\n.nav-link.dropdown-toggle::after {\n    margin-left: auto;\n    transition: transform 0.3s ease;\n}\n\n.nav-link.dropdown-toggle[aria-expanded=\"true\"]::after {\n    transform: rotate(180deg);\n}\n\n.dropdown-menu-dark {\n    background-color: var(--content-bg) !important;\n    border: 1px solid var(--border-color) !important;\n    border-radius: 10px !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    margin-top: 0.5rem;\n}\n\n.dropdown-menu-dark .dropdown-item {\n    color: var(--text-secondary) !important;\n    padding: 0.625rem 1rem;\n    transition: all 0.2s ease;\n}\n\n.dropdown-menu-dark .dropdown-item:hover {\n    background-color: var(--hover-bg) !important;\n    color: var(--text-primary) !important;\n}\n\n.sidebar-footer {\n    margin-top: auto;\n    padding-top: 1.5rem;\n    border-top: 1px solid var(--border-color);\n}\n\n#user-info-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n#user-info-container .user-info {\n    font-weight: 600;\n    font-size: 0.875rem;\n    color: var(--text-primary) !important;\n}\n\n#user-info-container .user-role {\n    font-size: 0.75rem;\n    color: var(--text-secondary) !important;\n    font-weight: 500;\n}\n\n#user-info-container .user-actions {\n    display: flex;\n    gap: 0.5rem;\n}\n\n#user-info-container .btn {\n    background-color: transparent !important;\n    border: 1px solid var(--border-color) !important;\n    color: var(--text-secondary) !important;\n    padding: 0.5rem 0.75rem;\n    font-size: 0.875rem;\n    border-radius: var(--border-radius-small);\n    transition: all var(--transition-speed);\n}\n\n#user-info-container .btn:hover {\n    background-color: var(--hover-bg) !important;\n    color: var(--text-primary) !important;\n    border-color: var(--text-primary) !important;\n}\n\n/* ============================================================\n   COMPONENTES GERAIS (Cards, Forms, Botões) - Estilo Apple/Loft\n============================================================ */\n\n/* Cards Redesenhados - Visual Moderno e Profissional */\n.card, .alert, .list-group-item {\n    background-color: var(--content-bg) !important;\n    border-radius: 14px !important;\n    border: 1px solid var(--border-color) !important;\n    margin-bottom: 1.5rem;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.04),\n                0 1px 3px rgba(0, 0, 0, 0.06);\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n    backdrop-filter: blur(12px);\n    -webkit-backdrop-filter: blur(12px);\n    overflow: hidden;\n}\n\n.card:hover {\n    border-color: rgba(255, 140, 66, 0.3);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08),\n                0 2px 6px rgba(0, 0, 0, 0.06);\n    transform: translateY(-3px);\n}\n\n#page-content > .container-fluid > .card:first-of-type {\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06),\n                0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.card-header {\n    font-weight: 600;\n    background-color: transparent !important;\n    border-bottom: 1px solid var(--border-color) !important;\n    padding: 1.125rem 1.5rem;\n    font-size: 1rem;\n    letter-spacing: -0.02em;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.card-header i {\n    color: var(--accent-primary) !important;\n    font-size: 1.1rem;\n}\n\n.card-body {\n    padding: 1.5rem !important;\n}\n\n/* Cards Elaborados com Efeitos Especiais */\n.card-hover-effect {\n    transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n    position: relative;\n    overflow: visible;\n}\n\n.card-hover-effect::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 14px;\n    background: linear-gradient(135deg, rgba(255, 140, 66, 0.05), rgba(255, 140, 66, 0));\n    opacity: 0;\n    transition: opacity 0.4s ease;\n    pointer-events: none;\n}\n\n.card-hover-effect:hover::before {\n    opacity: 1;\n}\n\n.card-hover-effect:hover {\n    transform: translateY(-6px) scale(1.02);\n    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12),\n                0 4px 12px rgba(255, 140, 66, 0.15);\n}\n\n.icon-badge {\n    width: 48px;\n    height: 48px;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 1.5rem;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    transition: all 0.3s ease;\n}\n\n.card-hover-effect:hover .icon-badge {\n    transform: rotate(10deg) scale(1.1);\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n}\n\n.bg-purple {\n    background-color: var(--color-purple) !important;\n    color: white !important;\n}\n\n/* Formulários Redesenhados - Elegantes e Modernos */\n.form-label {\n    font-weight: 600;\n    font-size: 0.875rem;\n    color: var(--text-secondary) !important;\n    margin-bottom: 0.5rem;\n    letter-spacing: -0.01em;\n}\n\n.form-control, .form-select {\n    background-color: var(--hover-bg) !important;\n    border: 1.5px solid var(--border-color) !important;\n    color: var(--text-primary) !important;\n    border-radius: 10px;\n    padding: 0.625rem 1rem;\n    font-size: 0.9375rem;\n    transition: all 0.25s cubic-bezier(0.16, 1, 0.3, 1);\n    line-height: 1.5;\n}\n\n.form-control:hover, .form-select:hover {\n    border-color: var(--text-tertiary);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);\n}\n\n.form-control:focus, .form-select:focus {\n    background-color: var(--content-bg) !important;\n    border-color: var(--accent-primary) !important;\n    box-shadow: 0 0 0 4px rgba(255, 140, 66, 0.12),\n                0 4px 12px rgba(0, 0, 0, 0.06) !important;\n    outline: none;\n    transform: translateY(-1px);\n}\n\n.form-control-sm, .form-select-sm {\n    padding: 0.5rem 0.875rem;\n    font-size: 0.875rem;\n    border-radius: 8px;\n}\n\n.form-control-lg, .form-select-lg {\n    padding: 0.75rem 1.25rem;\n    font-size: 1rem;\n    border-radius: 12px;\n}\n\ninput[type=\"date\"]::-webkit-calendar-picker-indicator {\n    filter: brightness(0.5);\n    opacity: 0.7;\n    cursor: pointer;\n}\n\n[data-theme=\"dark\"] input[type=\"date\"]::-webkit-calendar-picker-indicator {\n    filter: invert(1);\n}\n\n/* Botões Redesenhados - Proporções Perfeitas e Consistentes */\n.btn {\n    transition: all 0.25s cubic-bezier(0.16, 1, 0.3, 1);\n    font-weight: 500;\n    border-radius: 10px;\n    padding: 0.625rem 1.125rem;\n    font-size: 0.875rem;\n    letter-spacing: -0.01em;\n    border: none;\n    position: relative;\n    overflow: hidden;\n    line-height: 1.5;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    white-space: nowrap;\n}\n\n.btn::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.15);\n    transform: translate(-50%, -50%);\n    transition: width 0.5s ease, height 0.5s ease;\n    pointer-events: none;\n}\n\n.btn:hover::before {\n    width: 300px;\n    height: 300px;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.btn:active {\n    transform: translateY(0) scale(0.98);\n    transition: all 0.1s;\n}\n\n.btn i {\n    font-size: 1em;\n    line-height: 1;\n}\n\n/* Button Sizes - Standardized */\n.btn-sm {\n    padding: 0.5rem 0.875rem;\n    font-size: 0.8125rem;\n    border-radius: 8px;\n}\n\n.btn-lg {\n    padding: 0.75rem 1.5rem;\n    font-size: 1rem;\n    border-radius: 12px;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%) !important;\n    color: #ffffff !important;\n    border: none !important;\n    box-shadow: 0 2px 12px rgba(255, 140, 66, 0.25);\n    font-weight: 600;\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, var(--accent-hover) 0%, var(--accent-primary) 100%) !important;\n    box-shadow: 0 6px 20px rgba(255, 140, 66, 0.35);\n    transform: translateY(-2px);\n}\n\n.btn-primary:active {\n    transform: translateY(0) scale(0.98);\n    box-shadow: 0 2px 8px rgba(255, 140, 66, 0.3);\n}\n\n.btn-secondary {\n    background-color: var(--content-bg) !important;\n    color: var(--text-primary) !important;\n    border: 1.5px solid var(--border-color) !important;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);\n}\n\n.btn-secondary:hover {\n    background-color: var(--hover-bg) !important;\n    border-color: var(--text-tertiary) !important;\n    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);\n}\n\n.btn-outline-secondary {\n    background-color: transparent !important;\n    border: 1.5px solid var(--border-color) !important;\n    color: var(--text-secondary) !important;\n}\n\n.btn-outline-secondary:hover {\n    background-color: var(--hover-bg) !important;\n    color: var(--text-primary) !important;\n    border-color: var(--text-primary) !important;\n}\n\n.btn-outline-primary {\n    background-color: transparent !important;\n    border: 1.5px solid var(--accent-primary) !important;\n    color: var(--accent-primary) !important;\n}\n\n.btn-outline-primary:hover {\n    background-color: var(--accent-primary) !important;\n    color: #ffffff !important;\n    box-shadow: 0 4px 12px rgba(255, 140, 66, 0.25);\n}\n\n/* ============================================================\n   LAYOUT RESPONSIVO\n============================================================ */\n@media (min-width: 992px) { \n    .main-content { \n        margin-left: var(--sidebar-width);\n        transition: margin-left 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n    }\n    \n    .main-content.sidebar-hidden {\n        margin-left: 0;\n    }\n}\n\n@media (max-width: 991.98px) { \n    .main-content { padding: 1.25rem; padding-top: 75px; }\n    \n    /* Botões mantém bom tamanho em mobile */\n    .btn {\n        font-size: 0.875rem;\n        padding: 0.625rem 1rem;\n    }\n    \n    .btn-sm {\n        padding: 0.5rem 0.875rem;\n        font-size: 0.8125rem;\n    }\n    \n    /* Botões flex-fill em mobile */\n    .d-flex.flex-wrap .flex-fill {\n        min-width: calc(50% - 0.5rem);\n    }\n    \n    /* Cards bem proporcionados em mobile */\n    .card-header {\n        padding: 1rem 1.25rem;\n        font-size: 0.9375rem;\n    }\n    \n    .card-body {\n        padding: 1.25rem !important;\n    }\n    \n    /* Tabelas responsivas */\n    .table {\n        font-size: 0.875rem;\n    }\n    \n    .table th, .table td {\n        padding: 0.75rem 0.5rem;\n    }\n    \n    /* Formulários bem dimensionados */\n    .form-control, .form-select {\n        font-size: 0.9375rem;\n        padding: 0.625rem 0.875rem;\n    }\n}\n\n@media (max-width: 767.98px) {\n    .main-content { padding: 1rem; padding-top: 75px; }\n    \n    h4.mb-3 {\n        font-size: 1.3rem;\n        padding-bottom: 0.75rem;\n        margin-bottom: 1.25rem !important;\n    }\n    \n    h1, h2 {\n        font-size: 1.5rem;\n    }\n    \n    h3 {\n        font-size: 1.25rem;\n    }\n    \n    /* Botões em linha que quebram para coluna */\n    .btn-group-vertical .btn,\n    .d-flex.gap-2 {\n        flex-wrap: wrap;\n    }\n    \n    /* Cards mais compactos em mobile pequeno */\n    .card-header {\n        padding: 0.875rem 1rem;\n        font-size: 0.9rem;\n    }\n    \n    .card-body {\n        padding: 1rem !important;\n    }\n}\n\n/* ============================================================\n   HEADER E MENU MOBILE (MODAL) - Estilo Apple/Loft\n============================================================ */\n.mobile-header {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 60px;\n    background-color: rgba(var(--content-bg-rgb, 248, 248, 248), 0.95);\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border-bottom: 1px solid var(--border-color);\n    display: flex;\n    align-items: center;\n    padding: 0 1rem;\n    z-index: 1030;\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);\n}\n\n[data-theme=\"dark\"] .mobile-header {\n    background-color: rgba(42, 42, 42, 0.95);\n}\n\n.mobile-header .btn {\n    font-size: 1.4rem;\n    color: var(--text-primary) !important;\n    background: transparent;\n    padding: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.25s cubic-bezier(0.16, 1, 0.3, 1);\n    border-radius: 10px;\n    width: 40px;\n    height: 40px;\n}\n\n.mobile-header .btn:hover {\n    background-color: var(--hover-bg);\n    transform: scale(1.05);\n}\n\n.mobile-header .btn:active {\n    transform: scale(0.92);\n    transition: all 0.1s;\n}\n\n.mobile-header-title {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-size: 1.15rem;\n    font-weight: 600;\n    margin-left: 0.75rem;\n    letter-spacing: -0.03em;\n    flex: 1;\n}\n\n.mobile-header-title i {\n    color: var(--text-primary) !important;\n    font-size: 1.3rem;\n}\n\n.mobile-header .theme-toggle {\n    margin-left: auto;\n}\n\n.modal-content.mobile-menu-content {\n    background-color: var(--content-bg);\n    border: none;\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n}\n\n.mobile-menu-content .modal-header {\n    border-bottom-color: var(--border-color);\n    padding: 1.5rem;\n}\n\n.mobile-menu-content .modal-header .modal-title {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-weight: 600;\n    font-size: 1.2rem;\n}\n\n.mobile-menu-content .modal-header .modal-title i {\n    color: var(--text-primary) !important;\n}\n\n.mobile-menu-content .modal-body {\n    padding: 2rem 1.5rem;\n}\n\n.mobile-menu-content .nav-link {\n    font-size: 1rem;\n    padding: 1rem 1.25rem;\n    margin-bottom: 0.5rem;\n    border-radius: 10px;\n    transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n}\n\n.mobile-menu-content .nav-link:active {\n    transform: scale(0.98);\n    transition: all 0.1s;\n}\n\n/* Animação do modal mobile com efeito suave */\n.modal.fade .modal-dialog {\n    transform: translateX(-100%);\n    opacity: 0;\n    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1),\n                opacity 0.4s ease;\n}\n\n.modal.show .modal-dialog {\n    transform: translateX(0);\n    opacity: 1;\n}\n\n.modal-backdrop {\n    backdrop-filter: blur(8px);\n    -webkit-backdrop-filter: blur(8px);\n}\n\n/* ============================================================\n   CORREÇÕES DE COMPONENTES (Tabelas, Modais, Abas)\n============================================================ */\n.card .table-responsive, .card .table { background-color: transparent; }\n.card .table { --bs-table-bg: transparent; --bs-table-striped-bg: rgba(0, 0, 0, 0.05); }\n.modal-content { background-color: var(--content-bg) !important; border-radius: var(--border-radius-large) !important; border: 1px solid var(--border-color) !important; -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px); }\n.modal-header { border-bottom-color: var(--border-color) !important; }\n.modal-footer { border-top-color: var(--border-color) !important; }\n.nav-tabs {\n    border-bottom: 2px solid var(--border-color) !important;\n}\n\n.nav-tabs .nav-link {\n    background: transparent !important;\n    border: none !important;\n    border-bottom: 3px solid transparent !important;\n    color: var(--text-secondary) !important;\n    margin-bottom: -2px;\n    font-weight: 500;\n    transition: all var(--transition-speed);\n}\n\n.nav-tabs .nav-link:hover {\n    border-bottom-color: var(--border-color) !important;\n    color: var(--text-primary) !important;\n}\n\n.nav-tabs .nav-link.active {\n    color: var(--text-primary) !important;\n    font-weight: 600;\n    border-bottom-color: var(--accent-primary) !important;\n}\n\n/* ============================================================\n   REFORMULAÇÃO DO FORMULÁRIO DE FILTROS DO DASHBOARD\n============================================================ */\n#form-filtros-dashboard .form-label {\n    font-size: 0.8rem;\n    font-weight: 500;\n    color: var(--text-muted);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    margin-bottom: 0.5rem; /* Espaçamento consistente */\n}\n\n/* Container do controle segmentado */\n#form-filtros-dashboard .btn-group {\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius-small);\n    padding: 3px;\n    background-color: var(--main-bg);\n}\n\n/* Botões individuais dentro do controle */\n#form-filtros-dashboard .btn-group .btn {\n    background-color: transparent !important;\n    border: none !important;\n    color: var(--text-muted) !important;\n    font-weight: 500;\n    box-shadow: none !important;\n    transition: all 0.2s ease-in-out;\n    border-radius: 6px !important; /* Bordas arredondadas para todos */\n    padding-top: 0.375rem; /* Ajuste para alinhamento vertical */\n    padding-bottom: 0.375rem;\n}\n\n#form-filtros-dashboard .btn-group .btn:hover {\n    color: var(--text-light) !important;\n    background-color: rgba(255, 255, 255, 0.05) !important;\n}\n\n/* Botão ATIVO no controle */\n#form-filtros-dashboard .btn-group .btn.active {\n    background-color: var(--hover-bg) !important;\n    color: var(--text-light) !important;\n    font-weight: 600;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.3) !important;\n}\n\n.input-group-text {\n    background-color: var(--border-color) !important; /* Um cinza um pouco mais escuro para destaque */\n    border-color: var(--border-color) !important;\n    color: var(--text-muted) !important;\n    font-weight: 600;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    opacity: 0.95;\n}\n\n/* Aplica o brilho laranja ao passar o mouse sobre botões primários */\n.btn-primary:hover {\n    box-shadow: 0 0 12px var(--glow-color);\n}\n\n/* Aplica um brilho verde ao passar o mouse sobre botões de sucesso */\n.btn-success:hover {\n    box-shadow: 0 0 12px rgba(46, 160, 67, 0.6);\n}\n\n/* Aplica um brilho vermelho ao passar o mouse sobre botões de perigo */\n.btn-danger:hover, .btn-outline-danger:hover {\n    box-shadow: 0 0 12px rgba(248, 113, 113, 0.6);\n}\n\n/* Aplica um brilho cinza ao passar o mouse sobre botões secundários */\n.btn-secondary:hover, .btn-outline-secondary:hover {\n    box-shadow: 0 0 12px rgba(108, 117, 125, 0.4);\n}\n\n/* ============================================================\n   RESPONSIVIDADE AVANÇADA - MOBILE E TABLET\n============================================================ */\n\n/* TABLET (768px - 991px) */\n@media (max-width: 991.98px) and (min-width: 768px) {\n    .main-content { padding: 1.5rem; }\n    #page-content { max-width: 100%; }\n    \n    /* Cards do dashboard em 2 colunas */\n    .row .col-md-3 { flex: 0 0 50%; max-width: 50%; }\n    .row .col-md-6 { flex: 0 0 100%; max-width: 100%; }\n    \n    /* Ajustar títulos */\n    h1, h4 { font-size: 1.5rem; }\n    .h3 { font-size: 1.3rem; }\n}\n\n/* MOBILE (até 767px) */\n@media (max-width: 767.98px) {\n    /* Layout geral */\n    .main-content { padding: 1rem; padding-top: 70px; }\n    #page-content { max-width: 100%; }\n    \n    /* Cards do dashboard empilhados */\n    .row .col-md-3,\n    .row .col-md-6,\n    .row .col-lg-4,\n    .row .col-lg-6,\n    .row .col-lg-8 {\n        flex: 0 0 100%;\n        max-width: 100%;\n        margin-bottom: 1rem;\n    }\n    \n    /* Títulos menores */\n    h1 { font-size: 1.3rem; }\n    .h3 { font-size: 1.2rem; }\n    h4 { font-size: 1.1rem; }\n    .h5 { font-size: 1rem; }\n    \n    /* Cards mais compactos */\n    .card-body { padding: 1rem !important; }\n    .card-header { padding: 0.75rem 1rem; font-size: 0.9rem; }\n    \n    /* Botões responsivos */\n    .btn { font-size: 0.9rem; padding: 0.5rem 0.75rem; }\n    .btn-sm { font-size: 0.8rem; padding: 0.3rem 0.5rem; }\n    \n    /* Tabelas com scroll horizontal */\n    .table-responsive {\n        overflow-x: auto;\n        -webkit-overflow-scrolling: touch;\n    }\n    \n    .table {\n        font-size: 0.85rem;\n        min-width: 600px; /* Força scroll se precisar */\n    }\n    \n    .table th,\n    .table td {\n        padding: 0.5rem;\n        white-space: nowrap;\n    }\n    \n    /* Formulários responsivos */\n    .form-label {\n        font-size: 0.85rem;\n        margin-bottom: 0.3rem;\n    }\n    \n    .form-control,\n    .form-select {\n        font-size: 0.9rem;\n        padding: 0.5rem;\n    }\n    \n    /* Modais em tela cheia no mobile */\n    .modal-dialog {\n        margin: 0.5rem;\n        max-width: calc(100% - 1rem);\n    }\n    \n    .modal-dialog-centered {\n        min-height: calc(100% - 1rem);\n    }\n    \n    .modal-lg,\n    .modal-xl {\n        max-width: calc(100% - 1rem);\n    }\n    \n    .modal-body {\n        padding: 1rem;\n    }\n    \n    /* Inputs de data e select menores */\n    .input-group .form-control,\n    .input-group .form-select {\n        font-size: 0.85rem;\n    }\n    \n    /* Badges e tags menores */\n    .badge {\n        font-size: 0.75rem;\n        padding: 0.25em 0.5em;\n    }\n    \n    /* Tabelas de vendedores */\n    .table-hover tbody tr {\n        display: table-row;\n    }\n    \n    /* Ajustar dropdown de filtros */\n    .btn-group {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    \n    .btn-group .btn {\n        flex: 1 1 auto;\n        font-size: 0.8rem;\n    }\n    \n    /* Gráficos responsivos */\n    canvas {\n        max-height: 250px !important;\n    }\n    \n    /* Ajustar espaçamentos */\n    .mb-3 { margin-bottom: 0.75rem !important; }\n    .mb-4 { margin-bottom: 1rem !important; }\n    .mt-3 { margin-top: 0.75rem !important; }\n    .mt-4 { margin-top: 1rem !important; }\n    \n    /* Ajustar header de páginas */\n    .d-flex.justify-content-between {\n        flex-direction: column;\n        gap: 0.75rem;\n    }\n    \n    .d-flex.justify-content-between .btn {\n        width: 100%;\n    }\n}\n\n/* MOBILE PEQUENO (até 480px) */\n@media (max-width: 480px) {\n    .main-content { padding: 0.75rem; padding-top: 70px; }\n    \n    /* Fontes ainda menores */\n    h1 { font-size: 1.2rem; }\n    .h3 { font-size: 1.1rem; }\n    h4 { font-size: 1rem; }\n    \n    /* Cards super compactos */\n    .card-body { padding: 0.75rem !important; }\n    .card-header { padding: 0.5rem 0.75rem; font-size: 0.85rem; }\n    \n    /* Botões pequenos */\n    .btn { font-size: 0.85rem; padding: 0.4rem 0.6rem; }\n    \n    /* Tabelas ainda menores */\n    .table { font-size: 0.8rem; }\n    .table th, .table td { padding: 0.4rem; }\n    \n    /* Formulários compactos */\n    .form-control, .form-select { font-size: 0.85rem; padding: 0.4rem; }\n    .form-label { font-size: 0.8rem; }\n    \n    /* Modais quase tela cheia */\n    .modal-dialog { margin: 0.25rem; max-width: calc(100% - 0.5rem); }\n    .modal-body { padding: 0.75rem; }\n    \n    /* Gráficos menores */\n    canvas { max-height: 200px !important; }\n}\n\n/* ============================================================\n   MELHORIAS ESPECÍFICAS PARA COMPONENTES\n============================================================ */\n\n/* Tornar selects e inputs sempre responsivos */\n.form-control,\n.form-select {\n    max-width: 100%;\n}\n\n/* Garantir que imagens não quebrem layout */\nimg {\n    max-width: 100%;\n    height: auto;\n}\n\n/* Ajustar nav-tabs em mobile */\n@media (max-width: 767.98px) {\n    .nav-tabs {\n        overflow-x: auto;\n        overflow-y: hidden;\n        flex-wrap: nowrap;\n        -webkit-overflow-scrolling: touch;\n    }\n    \n    .nav-tabs .nav-link {\n        white-space: nowrap;\n        font-size: 0.9rem;\n        padding: 0.5rem 1rem;\n    }\n}\n\n/* Melhorar visualização de cards de estatística */\n@media (max-width: 767.98px) {\n    .card h3 {\n        font-size: 1.5rem;\n    }\n    \n    .card .display-4 {\n        font-size: 2rem;\n    }\n    \n    .card .display-5 {\n        font-size: 1.5rem;\n    }\n}\n\n/* ============================================================\n   CARDS DE VENDEDOR - NOVO RELATÓRIO (ULTRA COMPACTO)\n============================================================ */\n.vendedor-card {\n    background: var(--content-bg);\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    padding: 0.4rem 0.6rem;\n    margin-bottom: 0.4rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    transition: all 0.15s;\n}\n\n.vendedor-card:hover {\n    border-color: var(--accent-primary);\n}\n\n.vendedor-numero {\n    font-weight: 600;\n    font-size: 0.7rem;\n    color: var(--text-tertiary);\n    min-width: 18px;\n}\n\n.vendedor-card .form-control,\n.vendedor-card .form-select {\n    padding: 0.25rem 0.4rem;\n    font-size: 0.8rem;\n    height: 28px;\n    border-radius: 4px;\n}\n\n.vendedor-field {\n    display: flex;\n    flex-direction: column;\n    gap: 0.1rem;\n}\n\n.vendedor-field label {\n    font-size: 0.65rem;\n    margin: 0;\n    color: var(--text-tertiary);\n    line-height: 1;\n}\n\n.vendedor-field.vendedor-nome {\n    min-width: 160px;\n}\n\n.vendedor-field.vendedor-atend,\n.vendedor-field.vendedor-vendas {\n    width: 75px;\n}\n\n.vendedor-taxa-conversao {\n    padding: 0.2rem 0.5rem;\n    background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);\n    border-radius: 10px;\n    font-size: 0.7rem;\n    font-weight: 600;\n    color: white;\n    white-space: nowrap;\n    line-height: 1;\n}\n\n.btn-remove-vendedor {\n    background: none;\n    border: none;\n    color: var(--text-tertiary);\n    cursor: pointer;\n    padding: 0.2rem 0.3rem;\n    border-radius: 4px;\n    transition: all 0.15s;\n    font-size: 1.1rem;\n    line-height: 1;\n    margin-left: auto;\n}\n\n.btn-remove-vendedor:hover {\n    color: #dc2626;\n    background: rgba(220, 38, 38, 0.1);\n}\n\n[data-theme=\"dark\"] .btn-remove-vendedor:hover {\n    color: #fca5a5;\n}\n\n.vendedor-list-container {\n    overflow-y: auto;\n    max-height: 350px;\n}\n\n.vendedor-list-container::-webkit-scrollbar {\n    width: 3px;\n}\n\n.vendedor-list-container::-webkit-scrollbar-track {\n    background: transparent;\n}\n\n.vendedor-list-container::-webkit-scrollbar-thumb {\n    background: var(--border-color);\n    border-radius: 2px;\n}\n\n/* Responsivo */\n@media (max-width: 767.98px) {\n    .vendedor-card {\n        flex-wrap: wrap;\n        gap: 0.4rem;\n    }\n    \n    .vendedor-field.vendedor-nome,\n    .vendedor-field.vendedor-atend,\n    .vendedor-field.vendedor-vendas {\n        width: calc(50% - 0.2rem) !important;\n        min-width: auto !important;\n    }\n}","size_bytes":39386},"ROLES_SYSTEM.md":{"content":"# Sistema de Controle de Acesso Baseado em Roles\n\n## Visão Geral\nO sistema implementa um controle de acesso granular baseado em 5 roles (cargos) diferentes, cada um com permissões e acessos específicos.\n\n## Roles Disponíveis\n\n### 1. Gerente\n- **Descrição**: Gerente de uma única loja\n- **Acesso**: Apenas aos dados da loja específica vinculada a ele\n- **Permissões**:\n  - ✅ Dashboard (dados filtrados pela sua loja)\n  - ✅ Consultar relatórios (apenas da sua loja)\n  - ✅ Demandas (visualizar todas, mas criar apenas para sua loja)\n  - ❌ Novo Relatório\n  - ❌ Gerenciar Lojas\n  - ❌ Gerenciar Usuários\n  - ❌ Logs do Sistema\n\n**Configuração**: No cadastro de usuário, seleciona-se o role \"Gerente\" e vincula-se UMA loja específica.\n\n### 2. Consultor\n- **Descrição**: Consultor que gerencia múltiplas lojas\n- **Acesso**: Aos dados de várias lojas vinculadas a ele\n- **Permissões**:\n  - ✅ Dashboard (dados filtrados pelas lojas vinculadas)\n  - ✅ Consultar relatórios (apenas das lojas vinculadas)\n  - ✅ Demandas (visualizar todas, criar para suas lojas)\n  - ❌ Novo Relatório\n  - ❌ Gerenciar Lojas\n  - ❌ Gerenciar Usuários\n  - ❌ Logs do Sistema\n\n**Configuração**: No cadastro de usuário, seleciona-se o role \"Consultor\" e vincula-se MÚLTIPLAS lojas (Ctrl+clique).\n\n### 3. Monitoramento\n- **Descrição**: Equipe de monitoramento com acesso completo aos dados\n- **Acesso**: Todos os dados de todas as lojas\n- **Permissões**:\n  - ✅ Dashboard (todas as lojas)\n  - ✅ Consultar relatórios (todas as lojas)\n  - ✅ Novo Relatório\n  - ✅ Gerenciar Lojas\n  - ✅ Demandas\n  - ❌ Gerenciar Usuários\n  - ❌ Logs do Sistema\n\n**Configuração**: Apenas seleciona-se o role \"Monitoramento\", sem vínculo de lojas.\n\n### 4. Administrador (Admin)\n- **Descrição**: Administrador do sistema\n- **Acesso**: Acesso total ao sistema\n- **Permissões**:\n  - ✅ Dashboard (todas as lojas)\n  - ✅ Consultar relatórios (todas as lojas)\n  - ✅ Novo Relatório\n  - ✅ Gerenciar Lojas\n  - ✅ Demandas\n  - ✅ Gerenciar Usuários\n  - ✅ Backup e Restauração\n  - ❌ Logs do Sistema (exclusivo de Dev)\n\n**Configuração**: Apenas seleciona-se o role \"Administrador\", sem vínculo de lojas.\n\n### 5. Desenvolvedor (Dev)\n- **Descrição**: Desenvolvedor com acesso total incluindo logs\n- **Acesso**: Acesso total ao sistema + logs\n- **Permissões**:\n  - ✅ Dashboard (todas as lojas)\n  - ✅ Consultar relatórios (todas as lojas)\n  - ✅ Novo Relatório\n  - ✅ Gerenciar Lojas\n  - ✅ Demandas\n  - ✅ Gerenciar Usuários\n  - ✅ Backup e Restauração\n  - ✅ **Logs do Sistema**\n\n**Configuração**: Apenas seleciona-se o role \"Desenvolvedor\", sem vínculo de lojas.\n\n## Arquitetura Técnica\n\n### Backend (server.js)\n1. **Middleware de Autorização** (`middleware/roleAuth.js`):\n   - `requireRole([roles])`: Restringe acesso a rotas baseado no role\n   - `requirePage([pages])`: Valida permissões para páginas específicas\n   - `getLojaFilter(role, loja_gerente, lojas_consultor)`: Retorna filtros SQL baseados no role\n   - `getPermissions(role)`: Retorna objeto com todas as permissões do role\n\n2. **Estrutura do Banco de Dados**:\n   - Tabela `usuarios`:\n     - `role`: gerente, consultor, monitoramento, admin, dev\n     - `loja_gerente`: nome da loja (para gerente)\n     - `lojas_consultor`: lista de lojas separadas por vírgula (para consultor)\n   - Tabela `logs`:\n     - Registra ações do sistema (login, erros, acessos)\n     - Visível apenas para role \"dev\"\n\n3. **Filtros de Dados**:\n   - APIs de dashboard, ranking, relatórios e lojas aplicam filtros automáticos\n   - Gerente vê apenas dados da sua loja\n   - Consultor vê apenas dados das lojas vinculadas\n   - Outros roles veem todos os dados\n\n### Frontend (app.js e páginas)\n1. **Controle de Menu**:\n   - Menu lateral mostra apenas itens permitidos para o role do usuário\n   - Baseado no objeto `permissions` retornado pela API `/api/session-info`\n\n2. **Interface de Gerenciamento de Usuários**:\n   - Campo de role com dropdown\n   - Campos condicionais para lojas:\n     - Gerente: select simples (uma loja)\n     - Consultor: select múltiplo (várias lojas)\n   - Exibição de lojas vinculadas na tabela de usuários\n\n3. **Página de Logs** (`views/logs.html`):\n   - Exclusiva para role \"dev\"\n   - Filtragem por tipo (error, warning, info, access)\n   - Filtragem por data\n   - Estatísticas de sistema (erros, warnings, usuários ativos, uptime)\n   - Função de limpar logs\n\n## Segurança\n\n1. **Validação de Permissões**:\n   - Todas as rotas validam permissões no backend\n   - Frontend esconde elementos, mas backend sempre valida\n\n2. **Isolamento de Dados**:\n   - Filtros SQL aplicados automaticamente\n   - Impossível acessar dados de outras lojas (para gerente/consultor)\n\n3. **Registro de Ações**:\n   - Sistema de logs registra acessos e ações importantes\n   - Logs incluem: timestamp, tipo, usuário, ação, detalhes\n\n## Fluxo de Uso\n\n### Criando um Usuário Gerente:\n1. Admin/Dev acessa \"Usuários\" → \"Adicionar Usuário\"\n2. Preenche username e senha\n3. Seleciona role \"Gerente\"\n4. Campo \"Loja do Gerente\" aparece\n5. Seleciona a loja específica\n6. Salva\n\n### Criando um Usuário Consultor:\n1. Admin/Dev acessa \"Usuários\" → \"Adicionar Usuário\"\n2. Preenche username e senha\n3. Seleciona role \"Consultor\"\n4. Campo \"Lojas do Consultor\" aparece\n5. Seleciona múltiplas lojas (Ctrl+clique)\n6. Salva\n\n### Acessando Logs (apenas Dev):\n1. Dev faz login\n2. Vê item \"Logs\" no menu lateral\n3. Acessa página de logs\n4. Pode filtrar por tipo, data\n5. Pode limpar logs se necessário\n\n## Arquivos Modificados/Criados\n\n### Novos Arquivos:\n- `middleware/roleAuth.js` - Middleware de autorização\n- `views/403.html` - Página de acesso negado\n- `views/logs.html` - Página de logs do sistema\n- `public/js/pages/logs.js` - JavaScript da página de logs\n- `ROLES_SYSTEM.md` - Esta documentação\n\n### Arquivos Modificados:\n- `server.js` - Integração do middleware, rotas de logs, filtros de dados\n- `views/index.html` - Menu com IDs e item de Logs\n- `views/gerenciar-usuarios.html` - Campos de roles e lojas\n- `public/js/app.js` - Controle de menu baseado em permissões\n- `public/js/pages/gerenciar-usuarios.js` - Lógica de gerenciamento de roles e lojas\n\n## Manutenção\n\n### Adicionando um Novo Role:\n1. Adicionar role em `middleware/roleAuth.js` no objeto `ROLES`\n2. Definir permissões no `getPermissions()`\n3. Atualizar dropdown em `views/gerenciar-usuarios.html`\n4. Atualizar mapeamento de nomes em `public/js/app.js` e `gerenciar-usuarios.js`\n\n### Modificando Permissões de um Role:\n1. Editar função `getPermissions()` em `middleware/roleAuth.js`\n2. Permissões são aplicadas automaticamente em todas as rotas\n\n## Credenciais Padrão\n- **Username**: admin\n- **Password**: admin\n- **Role**: admin\n","size_bytes":6829},"public/js/pages/logs.js":{"content":"import { showToast } from '../utils.js';\n\nexport function initLogsPage() {\n    const tableBody = document.getElementById('logs-table-body');\n    const btnFilter = document.getElementById('btn-filter-logs');\n    const btnClear = document.getElementById('btn-clear-logs');\n    const btnLoadMore = document.getElementById('btn-load-more-logs');\n    const logTypeFilter = document.getElementById('log-type-filter');\n    const dateStart = document.getElementById('log-date-start');\n    const dateEnd = document.getElementById('log-date-end');\n\n    let currentOffset = 0;\n    const limit = 50;\n\n    async function loadLogs(reset = false) {\n        if (reset) {\n            currentOffset = 0;\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        }\n\n        const params = new URLSearchParams({\n            type: logTypeFilter.value,\n            start: dateStart.value || '',\n            end: dateEnd.value || '',\n            limit,\n            offset: currentOffset\n        });\n\n        try {\n            const response = await fetch(`/api/logs?${params}`);\n            const { logs, total, stats } = await response.json();\n\n            if (reset) {\n                tableBody.innerHTML = '';\n            }\n\n            if (logs.length === 0 && reset) {\n                tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-muted\">Nenhum log encontrado.</td></tr>';\n                btnLoadMore.classList.add('d-none');\n                return;\n            }\n\n            logs.forEach(log => {\n                const row = createLogRow(log);\n                tableBody.insertAdjacentHTML('beforeend', row);\n            });\n\n            currentOffset += logs.length;\n            btnLoadMore.classList.toggle('d-none', currentOffset >= total);\n\n            updateStats(stats);\n\n        } catch (err) {\n            showToast('Erro', 'Não foi possível carregar os logs.', 'danger');\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar logs.</td></tr>';\n        }\n    }\n\n    function createLogRow(log) {\n        const typeColors = {\n            error: 'danger',\n            warning: 'warning',\n            info: 'info',\n            access: 'success'\n        };\n        const color = typeColors[log.type] || 'secondary';\n\n        return `\n            <tr>\n                <td><small>${new Date(log.timestamp).toLocaleString('pt-BR')}</small></td>\n                <td><span class=\"badge bg-${color}\">${log.type.toUpperCase()}</span></td>\n                <td>${log.username || '-'}</td>\n                <td>${log.action || '-'}</td>\n                <td><small>${log.details || '-'}</small></td>\n            </tr>\n        `;\n    }\n\n    function updateStats(stats) {\n        if (stats) {\n            document.getElementById('stat-errors').textContent = stats.errors || 0;\n            document.getElementById('stat-warnings').textContent = stats.warnings || 0;\n            document.getElementById('stat-users').textContent = stats.activeUsers || 0;\n            document.getElementById('stat-uptime').textContent = stats.uptime || '--';\n        }\n    }\n\n    async function clearLogs() {\n        if (!confirm('Tem certeza que deseja limpar todos os logs? Esta ação não pode ser desfeita.')) {\n            return;\n        }\n\n        try {\n            const response = await fetch('/api/logs', { method: 'DELETE' });\n            if (response.ok) {\n                showToast('Sucesso', 'Logs limpos com sucesso.', 'success');\n                loadLogs(true);\n            } else {\n                throw new Error('Falha ao limpar logs');\n            }\n        } catch (err) {\n            showToast('Erro', 'Não foi possível limpar os logs.', 'danger');\n        }\n    }\n\n    btnFilter.addEventListener('click', () => loadLogs(true));\n    btnClear.addEventListener('click', clearLogs);\n    btnLoadMore.addEventListener('click', () => loadLogs(false));\n\n    loadLogs(true);\n}\n","size_bytes":3971},"public/js/pages/consulta.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nlet eventController;\n\nexport function initConsultaPage() {\n    const formFiltros = document.getElementById('form-filtros-consulta');\n    const tableBody = document.getElementById('tabela-relatorios-corpo');\n    const filtroLoja = document.getElementById('filtro-loja');\n    const filtroInicio = document.getElementById('filtro-data-inicio');\n    const filtroFim = document.getElementById('filtro-data-fim');\n    // ADICIONADO: Seleção do novo filtro de ordem\n    const filtroOrdem = document.getElementById('filtro-ordem');\n    const btnLimpar = document.getElementById('btn-limpar-filtros');\n    const btnCarregarMais = document.getElementById('btn-carregar-mais');\n    const modalViewEl = document.getElementById('modal-visualizar-relatorio');\n    const pageContent = document.getElementById('page-content');\n\n    if (!formFiltros || !modalViewEl) return;\n    const modalView = new bootstrap.Modal(modalViewEl);\n\n    let currentOffset = 0;\n    const limit = 20;\n    let currentReportId = null;\n    let totalReportsCount = 0;\n\n    if (eventController) {\n        eventController.abort();\n    }\n    eventController = new AbortController();\n\n    async function carregarRelatorios(isNewSearch = true) {\n        if (isNewSearch) {\n            currentOffset = 0;\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        }\n        btnCarregarMais.disabled = true;\n        btnCarregarMais.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Carregando...';\n\n        const params = new URLSearchParams();\n        if (filtroLoja.value) params.append('loja', filtroLoja.value);\n        if (filtroInicio.value) params.append('data_inicio', filtroInicio.value);\n        if (filtroFim.value) params.append('data_fim', filtroFim.value);\n        // ADICIONADO: Envio do parâmetro de ordenação para a API\n        params.append('sortOrder', filtroOrdem.value);\n        params.append('limit', limit);\n        params.append('offset', currentOffset);\n\n        try {\n            const response = await fetch(`/api/relatorios?${params.toString()}`);\n            const { relatorios, total } = await response.json();\n\n            if (isNewSearch) {\n                totalReportsCount = total;\n            }\n\n            const formatCurrency = (value) => {\n                const numberValue = Number(value) || 0;\n                return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(numberValue);\n            };\n\n            const newRowsHtml = relatorios.map((r, index) => {\n                // ALTERAÇÃO: Lógica para criar um ID sequencial contínuo\n                const isDescending = filtroOrdem.value === 'desc';\n                const sequentialId = isDescending\n                    ? totalReportsCount - currentOffset - index\n                    : currentOffset + index + 1;\n\n                return `\n                    <tr>\n                        <td class=\"ps-3\">${sequentialId}</td>\n                        <td>${r.loja}</td>\n                        <td>${new Date(r.data).toLocaleDateString('pt-BR', {timeZone: 'UTC'})}</td>\n                        <td>${formatCurrency(r.total_vendas_dinheiro)}</td>\n                        <td class=\"text-end pe-3\">\n                            <div class=\"btn-group btn-group-sm\" role=\"group\">\n                                <button type=\"button\" class=\"btn btn-outline-primary\" data-action=\"visualizar\" data-id=\"${r.id}\" title=\"Visualizar\"><i class=\"bi bi-eye\"></i></button>\n                                <a href=\"/novo-relatorio?edit=${r.id}\" class=\"btn btn-outline-secondary\" title=\"Editar\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                <button type=\"button\" class=\"btn btn-outline-danger\" data-action=\"excluir\" data-id=\"${r.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>\n                            </div>\n                        </td>\n                    </tr>\n                `;\n            }).join('');\n\n            if (isNewSearch) {\n                tableBody.innerHTML = relatorios.length > 0 ? newRowsHtml : '<tr><td colspan=\"5\" class=\"text-center\">Nenhum relatório encontrado.</td></tr>';\n            } else {\n                tableBody.insertAdjacentHTML('beforeend', newRowsHtml);\n            }\n\n            currentOffset += relatorios.length;\n            btnCarregarMais.classList.toggle('d-none', currentOffset >= totalReportsCount);\n\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar relatórios.</td></tr>';\n        } finally {\n            btnCarregarMais.disabled = false;\n            btnCarregarMais.innerHTML = 'Carregar Mais Relatórios';\n        }\n    }\n\n    async function visualizarRelatorio(id) {\n        currentReportId = id;\n        const modalBody = document.getElementById('modal-body-content');\n        const modalLabel = document.getElementById('modal-visualizar-label');\n        modalLabel.textContent = `Carregando Relatório...`;\n        modalBody.innerHTML = '<div class=\"d-flex justify-content-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n        modalView.show();\n\n        try {\n            const response = await fetch(`/api/relatorios/${id}/pdf`);\n            if (!response.ok) throw new Error(\"Não foi possível gerar a visualização do PDF.\");\n            const fileBlob = await response.blob();\n            const fileURL = URL.createObjectURL(fileBlob);\n            modalLabel.textContent = `Visualizar Relatório #${id}`;\n            modalBody.innerHTML = `<iframe src=\"${fileURL}\" style=\"width: 100%; height: 70vh; border: none;\"></iframe>`;\n        } catch (e) {\n            modalBody.innerHTML = `<div class=\"p-3 text-center text-danger\"><h3>Oops!</h3><p>Não foi possível carregar a visualização.</p></div>`;\n            showToast('Erro', e.message, 'danger');\n        }\n    }\n\n    async function excluirRelatorio(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir o relatório #${id}?`);\n        if (!confirmed) return;\n        try {\n            const response = await fetch(`/api/relatorios/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir o relatório.');\n            showToast('Sucesso', 'Relatório excluído com sucesso.', 'success');\n            carregarRelatorios(true);\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir o relatório.', 'danger');\n        }\n    }\n\n    async function carregarLojasNoFiltro() {\n        try {\n            const response = await fetch('/api/lojas');\n            const lojas = await response.json();\n            filtroLoja.innerHTML = '<option value=\"\">Todas as Lojas</option>';\n            lojas.forEach(loja => filtroLoja.add(new Option(loja.nome, loja.nome)));\n        } catch (e) {\n            console.error(\"Erro ao carregar lojas:\", e);\n        }\n    }\n    \n    // --- Event Listeners ---\n    document.getElementById('btn-copiar-texto-modal')?.addEventListener('click', async () => {\n        if (!currentReportId) return;\n        try {\n            const response = await fetch(`/api/relatorios/${currentReportId}/txt`);\n            if (!response.ok) throw new Error(\"Falha ao buscar texto para cópia.\");\n            const textToCopy = await response.text();\n            await navigator.clipboard.writeText(textToCopy);\n            showToast('Sucesso!', 'Texto copiado.', 'success');\n        } catch (err) {\n            showToast('Erro', 'Não foi possível copiar o texto.', 'danger');\n        }\n    }, { signal: eventController.signal });\n\n    document.getElementById('btn-gerar-pdf-modal')?.addEventListener('click', () => {\n        if (!currentReportId) return;\n        window.open(`/api/relatorios/${currentReportId}/pdf`, '_blank');\n    }, { signal: eventController.signal });\n\n    formFiltros.addEventListener('submit', (e) => { e.preventDefault(); carregarRelatorios(true); }, { signal: eventController.signal });\n    \n    // ADICIONADO: Resetar o filtro de ordem ao limpar\n    btnLimpar.addEventListener('click', () => { \n        formFiltros.reset(); \n        filtroOrdem.value = 'desc'; // Garante que o padrão seja selecionado\n        carregarRelatorios(true); \n    }, { signal: eventController.signal });\n    \n    btnCarregarMais.addEventListener('click', () => carregarRelatorios(false), { signal: eventController.signal });\n\n    pageContent.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button || !button.closest('#tabela-relatorios-corpo')) return;\n        const id = button.dataset.id;\n        const action = button.dataset.action;\n        if (action === 'visualizar') visualizarRelatorio(id);\n        if (action === 'excluir') excluirRelatorio(id);\n    }, { signal: eventController.signal });\n    \n    // ADICIONADO: Event listener para o novo filtro de ordem\n    filtroOrdem.addEventListener('change', () => carregarRelatorios(true), { signal: eventController.signal });\n\n    const formExport = document.getElementById('form-export-excel');\n    const exportMonthSelect = document.getElementById('export-month');\n    const exportYearSelect = document.getElementById('export-year');\n    \n    if (exportYearSelect.options.length <= 1) {\n        const currentYear = new Date().getFullYear();\n        for (let i = 0; i < 5; i++) {\n            const year = currentYear - i;\n            exportYearSelect.add(new Option(year, year));\n        }\n    }\n    exportMonthSelect.value = new Date().getMonth() + 1;\n\n    formExport.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const btn = e.target.querySelector('button[type=\"submit\"]');\n        const originalText = btn.innerHTML;\n        btn.disabled = true;\n        btn.innerHTML = `<span class=\"spinner-border spinner-border-sm\"></span> Gerando...`;\n        \n        try {\n            const response = await fetch(`/api/export/excel?month=${exportMonthSelect.value}&year=${exportYearSelect.value}`);\n            if (response.ok) {\n                const blob = await response.blob();\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                const monthName = new Date(exportYearSelect.value, exportMonthSelect.value - 1).toLocaleString('pt-BR', { month: 'long' });\n                a.download = `Relatorios_${monthName}_${exportYearSelect.value}.xlsx`;\n                a.href = url;\n                a.click();\n                window.URL.revokeObjectURL(url);\n            } else {\n                const result = await response.json();\n                showToast(\"Erro ao Exportar\", result.error || \"Não foi possível gerar.\", \"danger\");\n            }\n        } catch (err) {\n            showToast(\"Erro\", \"Falha na exportação.\", \"danger\");\n        } finally {\n            btn.disabled = false;\n            btn.innerHTML = originalText;\n        }\n    }, { signal: eventController.signal });\n\n    // Evento para exportar TODOS os relatórios\n    const btnExportarTodos = document.getElementById('btn-exportar-todos-relatorios');\n    if (btnExportarTodos) {\n        btnExportarTodos.addEventListener('click', async (e) => {\n            e.preventDefault();\n            const originalText = btnExportarTodos.innerHTML;\n            btnExportarTodos.innerHTML = `<span class=\"spinner-border spinner-border-sm\"></span> Gerando...`;\n            btnExportarTodos.style.pointerEvents = 'none';\n            \n            try {\n                const response = await fetch(`/api/export/excel/all`);\n                if (response.ok) {\n                    const blob = await response.blob();\n                    const url = window.URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    const currentDate = new Date().toLocaleDateString('pt-BR').replace(/\\//g, '-');\n                    a.download = `Todos_Relatorios_${currentDate}.xlsx`;\n                    a.href = url;\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                    showToast(\"Sucesso!\", \"Todos os relatórios foram exportados!\", \"success\");\n                } else {\n                    const result = await response.json();\n                    showToast(\"Erro ao Exportar\", result.error || \"Não foi possível gerar.\", \"danger\");\n                }\n            } catch (err) {\n                showToast(\"Erro\", \"Falha na exportação.\", \"danger\");\n            } finally {\n                btnExportarTodos.innerHTML = originalText;\n                btnExportarTodos.style.pointerEvents = 'auto';\n            }\n        }, { signal: eventController.signal });\n    }\n\n    carregarLojasNoFiltro().then(() => carregarRelatorios(true));\n}","size_bytes":12873},"public/js/pages/alertas-tecnico.js":{"content":"import { showToast } from '../utils.js';\n\nexport function initAlertasTecnicoPage() {\n    if (!window.currentUser) {\n        setTimeout(initAlertasTecnicoPage, 100);\n        return;\n    }\n\n    const userRole = window.currentUser.role;\n    \n    if (userRole !== 'tecnico') {\n        window.location.href = '/admin';\n        return;\n    }\n\n    // Aguardar DOM estar pronto\n    setTimeout(() => {\n        carregarEstatisticas();\n        carregarAssistenciasEmAndamento();\n        carregarAssistenciasConcluidas();\n        \n        // Atualizar a cada 30 segundos\n        setInterval(() => {\n            carregarEstatisticas();\n            carregarAssistenciasEmAndamento();\n            carregarAssistenciasConcluidas();\n        }, 30000);\n    }, 100);\n}\n\nasync function carregarEstatisticas() {\n    try {\n        const response = await fetch('/api/assistencias/stats-tecnico');\n        const stats = await response.json();\n        \n        document.getElementById('stat-em-andamento').textContent = stats.emAndamento || 0;\n        document.getElementById('stat-concluidas-hoje').textContent = stats.concluidasHoje || 0;\n        document.getElementById('stat-total-mes').textContent = stats.totalMes || 0;\n        document.getElementById('stat-aguardando-pecas').textContent = stats.aguardandoPecas || 0;\n    } catch (e) {\n        console.error('Erro ao carregar estatísticas:', e);\n    }\n}\n\nasync function carregarAssistenciasEmAndamento() {\n    const tbody = document.getElementById('tabela-em-andamento');\n    \n    try {\n        const response = await fetch('/api/assistencias?status=Em andamento,Aguardando peças');\n        const assistencias = await response.json();\n        \n        if (assistencias.length === 0) {\n            tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center py-4 text-muted\">Nenhuma assistência em andamento</td></tr>';\n            return;\n        }\n        \n        tbody.innerHTML = assistencias.map(a => {\n            const statusClass = a.status === 'Em andamento' ? 'warning' : 'danger';\n            const statusTexto = a.status === 'Em andamento' ? 'Em Andamento' : 'Aguardando Peças';\n            const dataEntrada = new Date(a.data_entrada).toLocaleDateString('pt-BR');\n            \n            return `\n                <tr>\n                    <td><strong>#${a.os}</strong></td>\n                    <td>${a.cliente_nome}</td>\n                    <td>${a.aparelho}</td>\n                    <td><span class=\"badge bg-${statusClass}\">${statusTexto}</span></td>\n                    <td>${dataEntrada}</td>\n                    <td class=\"text-end\">\n                        <button class=\"btn btn-sm btn-outline-primary\" onclick=\"window.location.href='/assistencia?os=${a.os}'\">\n                            Ver Detalhes\n                        </button>\n                    </td>\n                </tr>\n            `;\n        }).join('');\n    } catch (e) {\n        console.error('Erro ao carregar assistências em andamento:', e);\n        tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center py-4 text-danger\">Erro ao carregar dados</td></tr>';\n    }\n}\n\nasync function carregarAssistenciasConcluidas() {\n    const tbody = document.getElementById('tabela-concluidas');\n    \n    try {\n        const response = await fetch('/api/assistencias?status=Concluído&limit=10');\n        const assistencias = await response.json();\n        \n        if (assistencias.length === 0) {\n            tbody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center py-4 text-muted\">Nenhuma assistência concluída recentemente</td></tr>';\n            return;\n        }\n        \n        tbody.innerHTML = assistencias.map(a => {\n            const dataConclusao = a.data_saida ? new Date(a.data_saida).toLocaleDateString('pt-BR') : '-';\n            \n            return `\n                <tr>\n                    <td><strong>#${a.os}</strong></td>\n                    <td>${a.cliente_nome}</td>\n                    <td>${a.aparelho}</td>\n                    <td>${dataConclusao}</td>\n                    <td class=\"text-end\">\n                        <button class=\"btn btn-sm btn-outline-secondary\" onclick=\"window.location.href='/assistencia?os=${a.os}'\">\n                            Ver Detalhes\n                        </button>\n                    </td>\n                </tr>\n            `;\n        }).join('');\n    } catch (e) {\n        console.error('Erro ao carregar assistências concluídas:', e);\n        tbody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center py-4 text-danger\">Erro ao carregar dados</td></tr>';\n    }\n}\n","size_bytes":4547},"server.js":{"content":"// =================================================================\n// SISTEMA DE FLUXO - teste\n// =================================================================\nconst express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\nconst session = require('express-session');\nconst fs = require('fs');\nconst PDFDocument = require('pdfkit');\nconst ExcelJS = require('exceljs');\nconst multer = require('multer');\nconst pdf = require('pdf-parse');\nconst { requireRole, requirePage, getLojaFilter, getPermissions, ROLES } = require('./middleware/roleAuth');\n\n\nconst app = express();\nconst PORT = 5000;\n\n// --- CONFIGURAÇÃO GERAL ---\nconst dataDir = path.join(__dirname, 'data');\nif (!fs.existsSync(dataDir)) {\n    fs.mkdirSync(dataDir, { recursive: true });\n}\nconst DB_PATH = path.join(dataDir, 'relatorios.db');\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(session({\n    secret: 'chave-definitiva-123',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { httpOnly: true, maxAge: 24 * 60 * 60 * 1000 }\n}));\n\n// --- CONFIGURAÇÃO DO MULTER ---\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// --- MIDDLEWARES ---\nconst requirePageLogin = (req, res, next) => {\n    if (req.session && req.session.userId) {\n        return next();\n    }\n    res.redirect('/login');\n};\nconst requireAdmin = (req, res, next) => {\n    if (req.session && req.session.role === 'admin') {\n        return next();\n    }\n    res.status(403).json({ error: 'Acesso negado.' });\n};\n\n// --- BANCO DE DADOS ---\nlet db = new sqlite3.Database(DB_PATH, err => {\n    if (err) {\n        return console.error(\"Erro fatal ao conectar ao DB:\", err.message);\n    }\n    console.log(\"Conectado ao banco de dados SQLite.\");\n    db.serialize(() => {\n        db.run(`CREATE TABLE IF NOT EXISTS usuarios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT, \n            username TEXT UNIQUE NOT NULL, \n            password TEXT NOT NULL, \n            role TEXT NOT NULL,\n            loja_gerente TEXT,\n            lojas_consultor TEXT\n        )`);\n        db.run(`CREATE TABLE IF NOT EXISTS lojas (id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT UNIQUE NOT NULL, status TEXT, funcao_especial TEXT, observacoes TEXT)`);\n        db.run(`CREATE TABLE IF NOT EXISTS relatorios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT, loja TEXT, data TEXT, hora_abertura TEXT, hora_fechamento TEXT,\n            gerente_entrada TEXT, gerente_saida TEXT, clientes_monitoramento INTEGER, vendas_monitoramento INTEGER,\n            clientes_loja INTEGER, vendas_loja INTEGER, total_vendas_dinheiro REAL, ticket_medio TEXT, pa TEXT,\n            quantidade_trocas INTEGER, nome_funcao_especial TEXT, quantidade_funcao_especial INTEGER,\n            quantidade_omni INTEGER, vendedores TEXT, nome_arquivo TEXT, enviado_por_usuario TEXT,\n            enviado_em DATETIME DEFAULT CURRENT_TIMESTAMP, vendas_cartao INTEGER, vendas_pix INTEGER, vendas_dinheiro INTEGER\n        )`);\n        db.run(`CREATE TABLE IF NOT EXISTS demandas (id INTEGER PRIMARY KEY AUTOINCREMENT, loja_nome TEXT NOT NULL, descricao TEXT NOT NULL, tag TEXT DEFAULT 'Normal', status TEXT DEFAULT 'pendente', criado_por_usuario TEXT, concluido_por_usuario TEXT, criado_em DATETIME DEFAULT CURRENT_TIMESTAMP, concluido_em DATETIME)`);\n        db.run(`CREATE TABLE IF NOT EXISTS vendedores (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            loja_id INTEGER NOT NULL,\n            nome TEXT NOT NULL,\n            telefone TEXT NOT NULL,\n            data_entrada TEXT NOT NULL,\n            data_demissao TEXT,\n            previsao_entrada TEXT,\n            previsao_saida TEXT,\n            ativo INTEGER DEFAULT 1,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (loja_id) REFERENCES lojas(id) ON DELETE CASCADE\n        )`);\n        db.run(`CREATE TABLE IF NOT EXISTS logs (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,\n            type TEXT NOT NULL,\n            username TEXT,\n            action TEXT,\n            details TEXT\n        )`);\n        \n        // Tabelas de Assistência Técnica\n        db.run(`CREATE TABLE IF NOT EXISTS estoque_tecnico (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            nome_peca TEXT NOT NULL,\n            codigo_interno TEXT UNIQUE NOT NULL,\n            quantidade INTEGER DEFAULT 0,\n            valor_custo REAL DEFAULT 0,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n        )`);\n        \n        db.run(`CREATE TABLE IF NOT EXISTS assistencias (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            cliente_nome TEXT NOT NULL,\n            cliente_cpf TEXT NOT NULL,\n            numero_pedido TEXT,\n            data_entrada TEXT NOT NULL,\n            data_conclusao TEXT,\n            valor_peca_loja REAL DEFAULT 0,\n            valor_servico_cliente REAL DEFAULT 0,\n            aparelho TEXT NOT NULL,\n            peca_id INTEGER,\n            peca_nome TEXT,\n            observacoes TEXT,\n            status TEXT DEFAULT 'Em andamento',\n            tecnico_responsavel TEXT,\n            loja TEXT,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (peca_id) REFERENCES estoque_tecnico(id)\n        )`);\n        \n        // Adicionar colunas caso não existam (migração)\n        db.run(`ALTER TABLE usuarios ADD COLUMN loja_gerente TEXT`, (err) => {\n            if (err && !err.message.includes('duplicate column')) console.error('Erro ao adicionar loja_gerente:', err.message);\n        });\n        db.run(`ALTER TABLE usuarios ADD COLUMN lojas_consultor TEXT`, (err) => {\n            if (err && !err.message.includes('duplicate column')) console.error('Erro ao adicionar lojas_consultor:', err.message);\n        });\n        db.run(`ALTER TABLE usuarios ADD COLUMN loja_tecnico TEXT`, (err) => {\n            if (err && !err.message.includes('duplicate column')) console.error('Erro ao adicionar loja_tecnico:', err.message);\n        });\n        db.run(`ALTER TABLE lojas ADD COLUMN tecnico_username TEXT`, (err) => {\n            if (err && !err.message.includes('duplicate column')) console.error('Erro ao adicionar tecnico_username:', err.message);\n        });\n        db.run(`ALTER TABLE lojas ADD COLUMN cargo TEXT`, (err) => {\n            if (err && !err.message.includes('duplicate column')) console.error('Erro ao adicionar cargo:', err.message);\n        });\n        db.run(`ALTER TABLE estoque_tecnico ADD COLUMN loja TEXT`, (err) => {\n            if (err && !err.message.includes('duplicate column')) console.error('Erro ao adicionar loja em estoque_tecnico:', err.message);\n        });\n        \n        const adminUsername = 'admin';\n        const correctPassword = 'admin';\n        db.get('SELECT * FROM usuarios WHERE username = ?', [adminUsername], (err, row) => {\n            if (err) return;\n            if (!row) {\n                db.run('INSERT INTO usuarios (username, password, role) VALUES (?, ?, ?)', [adminUsername, correctPassword, 'admin']);\n            } else if (row.password !== correctPassword) {\n                db.run('UPDATE usuarios SET password = ? WHERE username = ?', [correctPassword, adminUsername]);\n            }\n        });\n    });\n});\n\n// --- ROTAS DE PÁGINAS ---\napp.get('/login', (req, res) => res.sendFile(path.join(__dirname, 'views', 'login.html')));\napp.get('/403', (req, res) => res.sendFile(path.join(__dirname, 'views', '403.html')));\napp.get('/live', requirePageLogin, (req, res) => res.sendFile(path.join(__dirname, 'views', 'live.html')));\n\n// Dashboard - todos podem acessar (mas dados filtrados), exceto técnico\napp.get(['/', '/admin'], requirePageLogin, (req, res) => {\n    // Técnicos devem ir para a página de alertas\n    if (req.session.role === 'tecnico') {\n        return res.redirect('/alertas-tecnico');\n    }\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Consulta - todos podem acessar\napp.get('/consulta', requirePageLogin, requirePage(['consulta']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Novo Relatório - apenas monitoramento, admin e dev\napp.get('/novo-relatorio', requirePageLogin, requirePage(['novo-relatorio']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Lojas - todos exceto consultor (mas consultor pode via demandas)\napp.get('/gerenciar-lojas', requirePageLogin, requirePage(['lojas']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Demandas - todos podem acessar\napp.get('/demandas', requirePageLogin, requirePage(['demandas']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Gerenciar Usuários - apenas admin e dev\napp.get('/gerenciar-usuarios', requirePageLogin, requirePage(['gerenciar-usuarios']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Logs - apenas dev\napp.get('/logs', requirePageLogin, requirePage(['logs']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// Backup - apenas admin e dev\napp.get('/backup', requirePageLogin, requirePage(['backup']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\napp.get('/content/:page', requirePageLogin, (req, res) => {\n    const allowedPages = ['admin', 'consulta', 'demandas', 'gerenciar-lojas', 'assistencia', 'alertas-tecnico', 'novo-relatorio', 'gerenciar-usuarios', 'logs'];\n    if (allowedPages.includes(req.params.page)) {\n        res.sendFile(path.join(__dirname, 'views', `${req.params.page}.html`));\n    } else {\n        res.status(404).send('Página não encontrada');\n    }\n});\n\n\n// --- ROTAS DE API ---\n\n// <<<---------------------------------------------------->>>\n// <<<                    leitura PDF                     >>>\n// <<<---------------------------------------------------->>>\napp.post('/api/process-pdf', requirePageLogin, upload.single('pdfFile'), async (req, res) => {\n    if (!req.file) {\n        return res.status(400).json({ error: \"Nenhum arquivo PDF enviado.\" });\n    }\n\n    try {\n        const data = await pdf(req.file.buffer);\n        const text = data.text;\n        const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n\n        // Função para converter valores no formato \"1.234,56\" para número\n        const parseBrazilianNumber = (str) => {\n            if (!str) return 0;\n            return parseFloat(String(str).replace(/\\./g, '').replace(',', '.'));\n        };\n\n        let extractedData;\n\n        // VERIFICA O TIPO DE PDF\n        if (text.includes(\"Desempenho de vendedores\")) {\n            // --- LÓGICA PARA PDF TIPO OMNI ---\n            console.log(\"Processando PDF estilo Omni (Desempenho de vendedores)...\");\n\n            const linhaTotais = lines.find(l => l.startsWith('Totais:'));\n            if (!linhaTotais) {\n                throw new Error(\"Linha 'Totais:' não encontrada no PDF.\");\n            }\n\n            // Extrai todos os números da linha de totais\n            const valores = linhaTotais.replace('Totais:', '').trim().split(/\\s+/);\n            \n            // Mapeia os valores\n            const vendas_loja = Math.round(parseBrazilianNumber(valores[1])); // Total de Vendas\n            const pa = parseBrazilianNumber(valores[2]); // Peças/Venda\n            const total_vendas_dinheiro = parseBrazilianNumber(valores[3]); // Vl. Vendas\n            const ticket_medio = parseBrazilianNumber(valores[4]); // Ticket Médio\n            const clientes_loja = parseInt(valores[5], 10); // Abordagens\n\n            // Extrai dados \n            const storeNameMatch = text.match(/(\\d{1,}-\\d{6}-.+)/);\n            const storeName = storeNameMatch ? storeNameMatch[1].trim() : \"Loja não identificada\";\n            \n            const dateMatch = text.match(/Período: (\\d{2}\\/\\d{2}\\/\\d{4})/);\n            const reportDate = dateMatch ? new Date(dateMatch[1].split('/').reverse().join('-')).toISOString().split('T')[0] : null;\n\n            const vendorLines = lines.filter(line => line.match(/^\\d+\\s+.+\\s+\\(\\d+\\)/));\n            const vendedores = vendorLines.map(line => {\n                const nameMatch = line.match(/^\\d+\\s+(.*?)\\s+\\(\\d+\\)/);\n                const nome = nameMatch ? nameMatch[1].trim() : \"Desconhecido\";\n                \n                const statsPart = line.replace(nameMatch[0], '').trim();\n                const stats = statsPart.split(/\\s+/);\n                \n                const vendas = Math.round(parseBrazilianNumber(stats[1]));\n                const atendimentos = parseInt(stats[5], 10) || 0;\n                \n                return { nome, vendas, atendimentos };\n            });\n\n            extractedData = {\n                loja: storeName,\n                data: reportDate,\n                clientes_loja: clientes_loja,\n                vendas_loja: vendas_loja,\n                total_vendas_dinheiro: `R$ ${total_vendas_dinheiro.toFixed(2).replace('.', ',')}`,\n                ticket_medio: `R$ ${ticket_medio.toFixed(2).replace('.', ',')}`,\n                pa: pa.toFixed(2).replace('.', ','),\n                vendedores: vendedores\n            };\n\n        } else {\n            // --- LÓGICA PARA PDF TIPO BUSCA TÉCNICA ---\n            console.log(\"Processando PDF estilo Busca Técnica...\");\n            \n            const linhaTotais = lines.find(l => l.includes('Totais:'));\n            const idxTotais = lines.indexOf(linhaTotais);\n            const linhaDados = lines[idxTotais + 1] || '';\n            const linhaLimpa = linhaDados.replace(/(\\d{1,3})\\.(\\d{3},\\d{2})/g, '$1.$2 ').replace(/ +/g, ' ').trim();\n            const valoresTotais = linhaLimpa.match(/(\\d{1,3}(?:\\.\\d{3})*,\\d{2})|(\\d+\\.\\d{2})|(\\d+)/g);\n            \n            if (!valoresTotais || valoresTotais.length < 7) {\n                throw new Error(\"Não foi possível extrair os valores corretamente da linha Totais do PDF.\");\n            }\n            \n            const totalVendasValor = parseBrazilianNumber(valoresTotais[0]);\n            const pa = parseBrazilianNumber(valoresTotais[valoresTotais.length - 4]);\n            const ticketMedio = parseBrazilianNumber(valoresTotais[valoresTotais.length - 3]);\n            \n            const linhaSplitada = linhaLimpa.split(' ');\n            const indexDoValorTotal = linhaSplitada.findIndex(v => v.includes(valoresTotais[0]));\n            const totalAtendimentos = parseInt(linhaSplitada[indexDoValorTotal + 2], 10) || 0;\n            \n            const storeNameMatch = text.match(/^\\s*\\d{3}\\s*-\\s*(.+)/m);\n            const storeName = storeNameMatch ? storeNameMatch[1].trim().replace(/\\s+STORE$/, \"\") : \"Loja não identificada\";\n            \n            const dateMatch = text.match(/Período de (\\d{2}\\/\\d{2}\\/\\d{4}) a (\\d{2}\\/\\d{2}\\/\\d{4})/);\n            const reportDate = dateMatch ? new Date(dateMatch[1].split('/').reverse().join('-')).toISOString().split('T')[0] : null;\n\n            const vendorLines = lines.filter(line => /^\\d+º/.test(line));\n            const vendedores = vendorLines.map(line => {\n                const vendorParts = line.trim().split(/\\s+/);\n                const nome = vendorParts.slice(2, -7).join(' ');\n                const atendimentos = parseInt(vendorParts[vendorParts.length - 4], 10) || 0;\n                return { nome, vendas: atendimentos, atendimentos };\n            });\n\n            extractedData = {\n                loja: storeName,\n                data: reportDate,\n                clientes_loja: totalAtendimentos,\n                vendas_loja: totalAtendimentos,\n                total_vendas_dinheiro: `R$ ${totalVendasValor.toFixed(2).replace('.', ',')}`,\n                ticket_medio: `R$ ${ticketMedio.toFixed(2).replace('.', ',')}`,\n                pa: pa.toFixed(2).replace('.', ','),\n                vendedores: vendedores\n            };\n        }\n\n        res.json({ success: true, data: extractedData });\n\n    } catch (error) {\n        console.error(\"### ERRO NO PROCESSAMENTO DO PDF ###\", error);\n        res.status(500).json({ error: error.message || \"Erro ao processar o PDF.\" });\n    }\n});\n// <<<---------------------------------------------------->>>\n// <<<          FIM DA API DE PDF                         >>>\n// <<<---------------------------------------------------->>>\n\n\n// APIs DE SESSÃO E USUÁRIOS \napp.post('/api/login', (req, res) => { \n    const { username, password } = req.body; \n    db.get('SELECT * FROM usuarios WHERE username = ? AND password = ?', [username, password], (err, user) => { \n        if (err || !user) return res.status(401).json({ message: 'Credenciais inválidas.' }); \n        req.session.userId = user.id; \n        req.session.username = user.username; \n        req.session.role = user.role;\n        req.session.loja_gerente = user.loja_gerente;\n        req.session.lojas_consultor = user.lojas_consultor;\n        req.session.loja_tecnico = user.loja_tecnico;\n        logEvent('access', user.username, 'login', `Usuário ${user.username} (${user.role}) fez login`);\n        res.json({ success: true }); \n    }); \n});\napp.get('/logout', (req, res) => { req.session.destroy(() => res.redirect('/login')); });\napp.get('/api/session-info', requirePageLogin, (req, res) => { \n    const permissions = getPermissions(req.session.role);\n    res.json({ \n        id: req.session.userId, \n        username: req.session.username, \n        role: req.session.role,\n        permissions: permissions\n    }); \n});\napp.get('/api/usuarios', requirePageLogin, requireRole(['admin', 'dev']), (req, res) => { \n    db.all(\"SELECT id, username, role, loja_gerente, lojas_consultor, loja_tecnico FROM usuarios ORDER BY username\", (err, users) => { \n        if (err) return res.status(500).json({ error: err.message }); \n        res.json(users || []); \n    }); \n});\napp.post('/api/usuarios', requirePageLogin, requireRole(['admin', 'dev']), (req, res) => { \n    const { username, password, role, loja_gerente, lojas_consultor, loja_tecnico } = req.body; \n    if (!username || !password || !role) return res.status(400).json({ error: 'Username, senha e cargo são obrigatórios.' }); \n    \n    // Admin não pode criar usuários Dev\n    if (req.session.role === 'admin' && role === 'dev') {\n        return res.status(403).json({ error: 'Apenas desenvolvedores podem criar usuários com cargo Dev.' });\n    }\n    \n    const lojas_consultor_str = Array.isArray(lojas_consultor) ? lojas_consultor.join(',') : (lojas_consultor || '');\n    db.run('INSERT INTO usuarios (username, password, role, loja_gerente, lojas_consultor, loja_tecnico) VALUES (?, ?, ?, ?, ?, ?)', \n        [username, password, role, loja_gerente || null, lojas_consultor_str, loja_tecnico || null], \n        function (err) { \n            if (err) return res.status(500).json({ error: 'Erro ao criar usuário. O nome de usuário já pode existir.' }); \n            res.status(201).json({ success: true, id: this.lastID }); \n        }\n    ); \n});\napp.put('/api/usuarios/:id', requirePageLogin, requireRole(['admin', 'dev']), (req, res) => { \n    const { id } = req.params; \n    const { username, password, role, loja_gerente, lojas_consultor, loja_tecnico } = req.body; \n    if (!username || !role) return res.status(400).json({ error: 'Username e Cargo são obrigatórios.' }); \n    \n    // Admin não pode alterar usuários para cargo Dev\n    if (req.session.role === 'admin' && role === 'dev') {\n        return res.status(403).json({ error: 'Apenas desenvolvedores podem criar/alterar usuários com cargo Dev.' });\n    }\n    \n    const lojas_consultor_str = Array.isArray(lojas_consultor) ? lojas_consultor.join(',') : (lojas_consultor || '');\n    const sql = password ? \n        'UPDATE usuarios SET username = ?, password = ?, role = ?, loja_gerente = ?, lojas_consultor = ?, loja_tecnico = ? WHERE id = ?' : \n        'UPDATE usuarios SET username = ?, role = ?, loja_gerente = ?, lojas_consultor = ?, loja_tecnico = ? WHERE id = ?'; \n    const params = password ? \n        [username, password, role, loja_gerente || null, lojas_consultor_str, loja_tecnico || null, id] : \n        [username, role, loja_gerente || null, lojas_consultor_str, loja_tecnico || null, id]; \n    db.run(sql, params, function (err) { \n        if (err) return res.status(500).json({ error: 'Erro ao atualizar usuário.' }); \n        res.json({ success: true }); \n    }); \n});\napp.delete('/api/usuarios/:id', requirePageLogin, requireRole(['admin', 'dev']), (req, res) => { \n    const { id } = req.params; \n    if (id == req.session.userId) return res.status(403).json({ error: 'Não é permitido excluir o próprio usuário logado.' }); \n    db.run(\"DELETE FROM usuarios WHERE id = ?\", [id], function (err) { \n        if (err) return res.status(500).json({ error: 'Erro ao excluir usuário.' }); \n        if (this.changes === 0) return res.status(404).json({ error: \"Usuário não encontrado.\" }); \n        res.json({ success: true }); \n    }); \n});\n\n// APIs DE LOJAS \napp.get('/api/lojas', requirePageLogin, (req, res) => { \n    let whereClauses = []; \n    const params = []; \n    \n    // Aplicar filtro de lojas baseado no role\n    const lojaFilter = getLojaFilter(req.session.role, req.session.loja_gerente, req.session.lojas_consultor, req.session.loja_tecnico);\n    console.log('API /api/lojas - User:', req.session.username, 'Role:', req.session.role, 'Filter:', lojaFilter);\n    console.log('Lojas consultor:', req.session.lojas_consultor);\n    if (lojaFilter) {\n        whereClauses.push(lojaFilter.clause.replace('TRIM(loja)', 'TRIM(nome)'));\n        params.push(...lojaFilter.params);\n    }\n    \n    if (req.query.status) { \n        whereClauses.push(\"status = ?\"); \n        params.push(req.query.status); \n    } \n    \n    const whereString = whereClauses.length > 0 ? \" WHERE \" + whereClauses.join(\" AND \") : \"\";\n    const query = \"SELECT * FROM lojas\" + whereString + \" ORDER BY nome\"; \n    console.log('SQL executado:', query);\n    console.log('Params:', params);\n    db.all(query, params, (err, lojas) => { \n        if (err) return res.status(500).json({ error: err.message }); \n        console.log('Lojas retornadas:', lojas.length);\n        if (lojas.length === 0 && params.length > 0) {\n            // Verificar lojas no banco\n            db.all('SELECT nome FROM lojas LIMIT 10', [], (err2, allLojas) => {\n                console.log('Primeiras 10 lojas no banco:', allLojas ? allLojas.map(l => l.nome) : []);\n            });\n        }\n        res.json(lojas || []); \n    }); \n});\napp.post('/api/lojas', requirePageLogin, (req, res) => { \n    const { nome, status, funcao_especial, tecnico_username, observacoes, cargo } = req.body; \n    db.run('INSERT INTO lojas (nome, status, funcao_especial, tecnico_username, observacoes, cargo) VALUES (?, ?, ?, ?, ?, ?)', \n        [nome, status, funcao_especial, tecnico_username, observacoes, cargo], \n        function (err) { \n            if (err) return res.status(500).json({ error: 'Erro ao criar loja. O nome já pode existir.' }); \n            res.status(201).json({ success: true, id: this.lastID }); \n        }); \n});\napp.put('/api/lojas/:id', requirePageLogin, (req, res) => { \n    const { id } = req.params; \n    const { nome, status, funcao_especial, tecnico_username, observacoes, cargo } = req.body; \n    db.run('UPDATE lojas SET nome = ?, status = ?, funcao_especial = ?, tecnico_username = ?, observacoes = ?, cargo = ? WHERE id = ?', \n        [nome, status, funcao_especial, tecnico_username, observacoes, cargo, id], \n        function (err) { \n            if (err) return res.status(500).json({ error: 'Erro ao atualizar loja.' }); \n            res.json({ success: true }); \n        }); \n});\napp.delete('/api/lojas/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM lojas WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir loja.' }); if (this.changes === 0) return res.status(404).json({ error: \"Loja não encontrada.\" }); res.json({ success: true }); }); });\n\n// APIs DE VENDEDORES\napp.get('/api/vendedores', requirePageLogin, (req, res) => {\n    const { loja_id } = req.query;\n    \n    if (!loja_id) {\n        return res.status(400).json({ error: 'ID da loja é obrigatório.' });\n    }\n    \n    const query = `\n        SELECT v.*, l.nome as loja_nome \n        FROM vendedores v\n        INNER JOIN lojas l ON v.loja_id = l.id\n        WHERE v.loja_id = ?\n        ORDER BY v.ativo DESC, v.nome ASC\n    `;\n    \n    db.all(query, [loja_id], (err, vendedores) => {\n        if (err) {\n            console.error('Erro ao buscar vendedores:', err);\n            return res.status(500).json({ error: 'Erro ao buscar vendedores.' });\n        }\n        res.json(vendedores || []);\n    });\n});\n\napp.post('/api/vendedores', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { loja_id, nome, telefone, data_entrada, data_demissao, previsao_entrada, previsao_saida } = req.body;\n    \n    if (!loja_id || !nome || !telefone || !data_entrada) {\n        return res.status(400).json({ error: 'Campos obrigatórios: loja_id, nome, telefone, data_entrada' });\n    }\n    \n    const query = `\n        INSERT INTO vendedores (loja_id, nome, telefone, data_entrada, data_demissao, previsao_entrada, previsao_saida, ativo)\n        VALUES (?, ?, ?, ?, ?, ?, ?, 1)\n    `;\n    \n    db.run(query, [loja_id, nome, telefone, data_entrada, data_demissao || null, previsao_entrada || null, previsao_saida || null], function(err) {\n        if (err) {\n            console.error('Erro ao adicionar vendedor:', err);\n            return res.status(500).json({ error: 'Erro ao adicionar vendedor.' });\n        }\n        res.status(201).json({ success: true, id: this.lastID });\n    });\n});\n\napp.put('/api/vendedores/:id', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    const { nome, telefone, data_entrada, data_demissao, previsao_entrada, previsao_saida, ativo } = req.body;\n    \n    if (!nome || !telefone || !data_entrada) {\n        return res.status(400).json({ error: 'Campos obrigatórios: nome, telefone, data_entrada' });\n    }\n    \n    const query = `\n        UPDATE vendedores \n        SET nome = ?, telefone = ?, data_entrada = ?, data_demissao = ?, \n            previsao_entrada = ?, previsao_saida = ?, ativo = ?\n        WHERE id = ?\n    `;\n    \n    db.run(query, [nome, telefone, data_entrada, data_demissao || null, previsao_entrada || null, previsao_saida || null, ativo !== undefined ? ativo : 1, id], function(err) {\n        if (err) {\n            console.error('Erro ao atualizar vendedor:', err);\n            return res.status(500).json({ error: 'Erro ao atualizar vendedor.' });\n        }\n        if (this.changes === 0) {\n            return res.status(404).json({ error: 'Vendedor não encontrado.' });\n        }\n        res.json({ success: true });\n    });\n});\n\napp.delete('/api/vendedores/:id', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    \n    db.run(\"DELETE FROM vendedores WHERE id = ?\", [id], function(err) {\n        if (err) {\n            console.error('Erro ao excluir vendedor:', err);\n            return res.status(500).json({ error: 'Erro ao excluir vendedor.' });\n        }\n        if (this.changes === 0) {\n            return res.status(404).json({ error: 'Vendedor não encontrado.' });\n        }\n        res.json({ success: true });\n    });\n});\n\n// APIs DE RELATÓRIOS\nconst processarRelatorio = (r) => { if (!r) return null; const vendas_monitoramento_total = (parseInt(r.vendas_monitoramento, 10) || 0) + (parseInt(r.quantidade_omni, 10) || 0); const tx_conversao_monitoramento = (parseInt(r.clientes_monitoramento, 10) || 0) > 0 ? (vendas_monitoramento_total / r.clientes_monitoramento) * 100 : 0; const tx_conversao_loja = (parseInt(r.clientes_loja, 10) || 0) > 0 ? ((parseInt(r.vendas_loja, 10) || 0) / r.clientes_loja) * 100 : 0; let vendedores_processados = []; try { const vendedores = JSON.parse(r.vendedores || '[]'); vendedores_processados = vendedores.map(v => ({ ...v, tx_conversao: (v.atendimentos > 0 ? ((v.vendas / v.atendimentos) * 100) : 0).toFixed(2) })); } catch (e) {} return { ...r, vendas_monitoramento_total, tx_conversao_monitoramento: tx_conversao_monitoramento.toFixed(2), tx_conversao_loja: tx_conversao_loja.toFixed(2), vendedores_processados }; };\napp.get('/api/relatorios', requirePageLogin, (req, res) => { \n    const whereClauses = []; \n    const params = []; \n    \n    // Aplicar filtro de lojas baseado no role\n    const lojaFilter = getLojaFilter(req.session.role, req.session.loja_gerente, req.session.lojas_consultor, req.session.loja_tecnico);\n    console.log('API /api/relatorios - User:', req.session.username, 'Role:', req.session.role, 'Filter:', lojaFilter);\n    console.log('Lojas consultor:', req.session.lojas_consultor);\n    if (lojaFilter) {\n        whereClauses.push(lojaFilter.clause);\n        params.push(...lojaFilter.params);\n    }\n    \n    if (req.query.loja) { \n        whereClauses.push(\"loja = ?\"); \n        params.push(req.query.loja); \n    } \n    if (req.query.data_inicio) { \n        whereClauses.push(\"data >= ?\"); \n        params.push(req.query.data_inicio); \n    } \n    if (req.query.data_fim) { \n        whereClauses.push(\"data <= ?\"); \n        params.push(req.query.data_fim); \n    } \n    const whereString = whereClauses.length > 0 ? \" WHERE \" + whereClauses.join(\" AND \") : \"\"; \n    const sortOrder = req.query.sortOrder === 'asc' ? 'ASC' : 'DESC'; \n    db.get(`SELECT COUNT(*) as total FROM relatorios` + whereString, params, (err, row) => { \n        if (err) return res.status(500).json({ error: err.message }); \n        const total = row ? row.total : 0; \n        const limit = parseInt(req.query.limit) || 20; \n        const offset = parseInt(req.query.offset) || 0; \n        const query = `SELECT id, loja, data, total_vendas_dinheiro FROM relatorios` + whereString + ` ORDER BY id ${sortOrder} LIMIT ? OFFSET ?`; \n        db.all(query, [...params, limit, offset], (err, relatorios) => { \n            if (err) return res.status(500).json({ error: err.message }); \n            res.json({ relatorios: relatorios || [], total }); \n        }); \n    }); \n});\napp.post('/api/relatorios', requirePageLogin, (req, res) => { const d = req.body; const sql = `INSERT INTO relatorios (loja, data, hora_abertura, hora_fechamento, gerente_entrada, gerente_saida, clientes_monitoramento, vendas_monitoramento, clientes_loja, vendas_loja, total_vendas_dinheiro, ticket_medio, pa, quantidade_trocas, quantidade_omni, quantidade_funcao_especial, vendedores, enviado_por_usuario, vendas_cartao, vendas_pix, vendas_dinheiro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`; const params = [ d.loja, d.data, d.hora_abertura, d.hora_fechamento, d.gerente_entrada, d.gerente_saida, parseInt(d.clientes_monitoramento, 10) || 0, parseInt(d.vendas_monitoramento, 10) || 0, parseInt(d.clientes_loja, 10) || 0, parseInt(d.vendas_loja, 10) || 0, parseFloat(String(d.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) || 0, d.ticket_medio || 'R$ 0,00', d.pa || '0.00', parseInt(d.quantidade_trocas, 10) || 0, parseInt(d.quantidade_omni, 10) || 0, parseInt(d.quantidade_funcao_especial, 10) || 0, d.vendedores || '[]', req.session.username, parseInt(d.vendas_cartao, 10) || 0, parseInt(d.vendas_pix, 10) || 0, parseInt(d.vendas_dinheiro, 10) || 0 ]; db.run(sql, params, function (err) { if (err) { console.error(\"Erro ao inserir relatório:\", err.message); return res.status(500).json({ error: 'Falha ao salvar relatório.' }); } res.status(201).json({ success: true, id: this.lastID }); }); });\napp.get('/api/relatorios/:id', requirePageLogin, (req, res) => { db.get(\"SELECT * FROM relatorios WHERE id = ?\", [req.params.id], (err, relatorio) => { if (err) return res.status(500).json({ error: err.message }); if (!relatorio) return res.status(404).json({ error: \"Relatório não encontrado\" }); res.json({ relatorio }); }); });\napp.put('/api/relatorios/:id', requirePageLogin, (req, res) => { const { id } = req.params; const d = req.body; const sql = `UPDATE relatorios SET loja=?, data=?, hora_abertura=?, hora_fechamento=?, gerente_entrada=?, gerente_saida=?, clientes_monitoramento=?, vendas_monitoramento=?, clientes_loja=?, vendas_loja=?, total_vendas_dinheiro=?, ticket_medio=?, pa=?, quantidade_trocas=?, quantidade_omni=?, quantidade_funcao_especial=?, vendedores=?, vendas_cartao=?, vendas_pix=?, vendas_dinheiro=? WHERE id=?`; const params = [ d.loja, d.data, d.hora_abertura, d.hora_fechamento, d.gerente_entrada, d.gerente_saida, parseInt(d.clientes_monitoramento, 10) || 0, parseInt(d.vendas_monitoramento, 10) || 0, parseInt(d.clientes_loja, 10) || 0, parseInt(d.vendas_loja, 10) || 0, parseFloat(String(d.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) || 0, d.ticket_medio || 'R$ 0,00', d.pa || '0.00', parseInt(d.quantidade_trocas, 10) || 0, parseInt(d.quantidade_omni, 10) || 0, parseInt(d.quantidade_funcao_especial, 10) || 0, d.vendedores || '[]', parseInt(d.vendas_cartao, 10) || 0, parseInt(d.vendas_pix, 10) || 0, parseInt(d.vendas_dinheiro, 10) || 0, id ]; db.run(sql, params, function (err) { if (err) { console.error(\"Erro ao atualizar relatório:\", err.message); return res.status(500).json({ error: 'Falha ao atualizar o relatório.' }); } if (this.changes === 0) return res.status(404).json({ error: \"Relatório não encontrado.\" }); res.json({ success: true, id: id }); }); });\napp.delete('/api/relatorios/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM relatorios WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: err.message }); if (this.changes === 0) return res.status(404).json({ error: \"Relatório não encontrado\" }); res.json({ success: true, message: \"Relatório excluído.\" }); }); });\nconst formatCurrency = (value) => { const numberValue = Number(value) || 0; return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(numberValue); };\nconst formatarRelatorioTexto = (r) => { const rp = processarRelatorio(r); if (!rp) return \"Erro ao processar relatório.\"; let equipeInfo = 'Nenhum vendedor registrado.\\n'; if (rp.vendedores_processados && rp.vendedores_processados.length > 0) { equipeInfo = rp.vendedores_processados.map(v => { return `${v.nome}: ${v.atendimentos} Atendimentos / ${v.vendas} Vendas / ${v.tx_conversao}%`; }).join('\\n'); } let funcaoEspecialInfo = ''; if (rp.funcao_especial === \"Omni\") { funcaoEspecialInfo = `Omni: ${rp.quantidade_omni || 0}\\n`; } else if (rp.funcao_especial === \"Busca por Assist. Tec.\") { funcaoEspecialInfo = `Busca por assist tec: ${rp.quantidade_funcao_especial || 0}\\n`; } const totalVendasQuantidade = (rp.vendas_cartao || 0) + (rp.vendas_pix || 0) + (rp.vendas_dinheiro || 0); const content = ` DATA: ${new Date(rp.data).toLocaleDateString('pt-BR', { timeZone: 'UTC' })} \\n\\nClientes: ${rp.clientes_monitoramento || 0}\\nBluve: ${rp.clientes_loja || 0}\\nVendas / Monitoramento: ${rp.vendas_monitoramento_total || 0}\\nVendas / Loja: ${rp.vendas_loja || 0}\\nTaxa de conversão da loja: ${rp.tx_conversao_loja || '0.00'}%\\nTaxa de conversão do monitoramento: ${rp.tx_conversao_monitoramento || '0.00'}%\\n\\nAbertura: ${rp.hora_abertura || '--:--'} - ${rp.hora_fechamento || '--:--'}\\nGerente: ${rp.gerente_entrada || '--:--'} - ${rp.gerente_saida || '--:--'}\\nVendas em Cartão: ${rp.vendas_cartao || 0}\\nVendas em Pix: ${rp.vendas_pix || 0}\\nVendas em Dinheiro: ${rp.vendas_dinheiro || 0}\\n${funcaoEspecialInfo}Total vendas: ${totalVendasQuantidade}\\nTroca/Devolução: ${rp.quantidade_trocas || 0}\\n\\nDesempenho Equipe:\\n\\n${equipeInfo}\\n\\nTM: ${rp.ticket_medio || 'R$ 0,00'} / P.A: ${rp.pa || '0.00'} / Total: ${formatCurrency(rp.total_vendas_dinheiro)} / `; return content.trim(); };\napp.get('/api/relatorios/:id/txt', requirePageLogin, (req, res) => { const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE r.id = ? `; db.get(sql, [req.params.id], (err, r) => { if (err || !r) return res.status(404).send('Relatório não encontrado'); res.setHeader('Content-disposition', `attachment; filename=relatorio_${r.loja.replace(/ /g, '_')}_${r.data}.txt`); res.setHeader('Content-type', 'text/plain; charset=utf-8'); res.send(formatarRelatorioTexto(r)); }); });\napp.get('/api/relatorios/:id/pdf', requirePageLogin, (req, res) => { const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE r.id = ? `; db.get(sql, [req.params.id], (err, r) => { if (err || !r) return res.status(404).send('Relatório não encontrado'); const doc = new PDFDocument({ margin: 50, size: 'A4' }); res.setHeader('Content-disposition', `inline; filename=\"relatorio_${r.loja.replace(/ /g, '_')}_${r.data}.pdf\"`); res.setHeader('Content-type', 'application/pdf'); doc.pipe(res); doc.fontSize(18).font('Helvetica-Bold').text(r.loja.toUpperCase(), { align: 'center' }).moveDown(1); doc.fontSize(11).font('Helvetica').text(formatarRelatorioTexto(r), { align: 'left' }); doc.end(); }); });\n\n\n// ROTA DE EXPORTAÇÃO PARA EXCEL \napp.get('/api/export/excel', requirePageLogin, async (req, res) => { const { month, year } = req.query; if (!month || !year) { return res.status(400).json({ error: 'Mês e ano são obrigatórios.' }); } const monthFormatted = month.toString().padStart(2, '0'); const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE strftime('%Y-%m', r.data) = ? ORDER BY r.loja, r.data `; db.all(sql, [`${year}-${monthFormatted}`], async (err, rows) => { if (err) { console.error(\"Erro ao buscar relatórios para Excel:\", err); return res.status(500).json({ error: 'Erro ao buscar relatórios.' }); } if (rows.length === 0) { return res.status(404).json({ error: 'Nenhum relatório encontrado para o período.' }); } const workbook = new ExcelJS.Workbook(); const safeParseFloat = (value) => { if (typeof value === 'number') { return value; } if (typeof value === 'string') { const cleaned = value.replace(/[R$\\s]/g, '').replace(/\\./g, '').replace(',', '.'); const num = parseFloat(cleaned); return isNaN(num) ? 0 : num; } return 0; }; const relatoriosPorLoja = rows.reduce((acc, row) => { const loja = row.loja; if (!acc[loja]) { acc[loja] = { funcao_especial: row.funcao_especial || 'Não definido', relatorios: [] }; } acc[loja].relatorios.push(processarRelatorio(row)); return acc; }, {}); for (const lojaNome in relatoriosPorLoja) { const lojaData = relatoriosPorLoja[lojaNome]; const worksheet = workbook.addWorksheet(lojaNome.substring(0, 30)); worksheet.mergeCells('A1:M1'); const tituloCell = worksheet.getCell('A1'); tituloCell.value = lojaNome.toUpperCase(); tituloCell.font = { name: 'Arial Black', size: 16, bold: true, color: { argb: 'FF44546A' } }; tituloCell.alignment = { vertical: 'middle', horizontal: 'center' }; worksheet.getRow(1).height = 30; const headers = [ 'DATA', 'BLUVE', 'VENDAS (L)', 'TX DE CONVERSÃO (L)', 'CLIENTES (M)', 'VENDAS (M)', 'TX DE CONVERSÃO (M)', 'P.A', 'TM', 'VALOR TOTAL', 'TROCAS' ]; let funcaoEspecialHeader = 'FUNÇÃO ESPECIAL'; if (lojaData.funcao_especial === 'Omni') { funcaoEspecialHeader = 'OMNI'; } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { funcaoEspecialHeader = 'BUSCA P/ ASSIST. TEC.'; } headers.push(funcaoEspecialHeader); headers.push('ENVIADO POR'); const headerRow = worksheet.getRow(3); headerRow.values = headers; headerRow.height = 35; headerRow.eachCell(cell => { cell.font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 10 }; cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true }; cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } }; cell.border = { top: { style: 'thin', color: { argb: 'FFBFBFBF' } }, left: { style: 'thin', color: { argb: 'FFBFBFBF' } }, bottom: { style: 'thin', color: { argb: 'FFBFBFBF' } }, right: { style: 'thin', color: { argb: 'FFBFBFBF' } } }; }); lojaData.relatorios.forEach(r => { const rowData = [ new Date(r.data + 'T00:00:00'), parseInt(r.clientes_loja, 10) || 0, parseInt(r.vendas_loja, 10) || 0, parseFloat(r.tx_conversao_loja) / 100, parseInt(r.clientes_monitoramento, 10) || 0, parseInt(r.vendas_monitoramento_total, 10) || 0, parseFloat(r.tx_conversao_monitoramento) / 100, parseFloat(String(r.pa).replace(',', '.')) || 0, safeParseFloat(r.ticket_medio), r.total_vendas_dinheiro, parseInt(r.quantidade_trocas, 10) || 0 ]; if (lojaData.funcao_especial === 'Omni') { rowData.push(parseInt(r.quantidade_omni, 10) || 0); } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { rowData.push(parseInt(r.quantidade_funcao_especial, 10) || 0); } else { rowData.push(0); } rowData.push(r.enviado_por_usuario || '-'); const row = worksheet.addRow(rowData); row.getCell(1).numFmt = 'DD/MM/YYYY'; row.getCell(4).numFmt = '0.00%'; row.getCell(7).numFmt = '0.00%'; row.getCell(8).numFmt = '0.00'; row.getCell(9).numFmt = 'R$ #,##0.00'; row.getCell(10).numFmt = 'R$ #,##0.00'; row.eachCell(cell => { cell.alignment = { vertical: 'middle', horizontal: 'center' }; }); }); worksheet.columns.forEach(column => { let maxLength = 0; column.eachCell({ includeEmpty: true }, cell => { const length = cell.value ? cell.value.toString().length : 10; if (length > maxLength) { maxLength = length; } }); column.width = Math.max(12, maxLength + 3); }); worksheet.getColumn(4).width = 20; worksheet.getColumn(7).width = 20; worksheet.getColumn(12).width = 22; } res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); res.setHeader('Content-Disposition', `attachment; filename=\"Relatorios_${year}-${monthFormatted}.xlsx\"`); await workbook.xlsx.write(res); res.end(); }); });\n\n// ROTA DE EXPORTAÇÃO PARA EXCEL - TODOS OS RELATÓRIOS\napp.get('/api/export/excel/all', requirePageLogin, async (req, res) => { \n    const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome ORDER BY r.loja, r.data `; \n    db.all(sql, [], async (err, rows) => { \n        if (err) { \n            console.error(\"Erro ao buscar relatórios para Excel:\", err); \n            return res.status(500).json({ error: 'Erro ao buscar relatórios.' }); \n        } \n        if (rows.length === 0) { \n            return res.status(404).json({ error: 'Nenhum relatório encontrado no sistema.' }); \n        } \n        const workbook = new ExcelJS.Workbook(); \n        const safeParseFloat = (value) => { \n            if (typeof value === 'number') { return value; } \n            if (typeof value === 'string') { \n                const cleaned = value.replace(/[R$\\s]/g, '').replace(/\\./g, '').replace(',', '.'); \n                const num = parseFloat(cleaned); \n                return isNaN(num) ? 0 : num; \n            } \n            return 0; \n        }; \n        const relatoriosPorLoja = rows.reduce((acc, row) => { \n            const loja = row.loja; \n            if (!acc[loja]) { \n                acc[loja] = { funcao_especial: row.funcao_especial || 'Não definido', relatorios: [] }; \n            } \n            acc[loja].relatorios.push(processarRelatorio(row)); \n            return acc; \n        }, {}); \n        for (const lojaNome in relatoriosPorLoja) { \n            const lojaData = relatoriosPorLoja[lojaNome]; \n            const worksheet = workbook.addWorksheet(lojaNome.substring(0, 30)); \n            worksheet.mergeCells('A1:M1'); \n            const tituloCell = worksheet.getCell('A1'); \n            tituloCell.value = lojaNome.toUpperCase(); \n            tituloCell.font = { name: 'Arial Black', size: 16, bold: true, color: { argb: 'FF44546A' } }; \n            tituloCell.alignment = { vertical: 'middle', horizontal: 'center' }; \n            worksheet.getRow(1).height = 30; \n            const headers = [ 'DATA', 'BLUVE', 'VENDAS (L)', 'TX DE CONVERSÃO (L)', 'CLIENTES (M)', 'VENDAS (M)', 'TX DE CONVERSÃO (M)', 'P.A', 'TM', 'VALOR TOTAL', 'TROCAS' ]; \n            let funcaoEspecialHeader = 'FUNÇÃO ESPECIAL'; \n            if (lojaData.funcao_especial === 'Omni') { \n                funcaoEspecialHeader = 'OMNI'; \n            } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { \n                funcaoEspecialHeader = 'BUSCA P/ ASSIST. TEC.'; \n            } \n            headers.push(funcaoEspecialHeader); \n            headers.push('ENVIADO POR'); \n            const headerRow = worksheet.getRow(3); \n            headerRow.values = headers; \n            headerRow.height = 35; \n            headerRow.eachCell(cell => { \n                cell.font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 10 }; \n                cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true }; \n                cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } }; \n                cell.border = { top: { style: 'thin', color: { argb: 'FFBFBFBF' } }, left: { style: 'thin', color: { argb: 'FFBFBFBF' } }, bottom: { style: 'thin', color: { argb: 'FFBFBFBF' } }, right: { style: 'thin', color: { argb: 'FFBFBFBF' } } }; \n            }); \n            lojaData.relatorios.forEach(r => { \n                const rowData = [ \n                    new Date(r.data + 'T00:00:00'), \n                    parseInt(r.clientes_loja, 10) || 0, \n                    parseInt(r.vendas_loja, 10) || 0, \n                    parseFloat(r.tx_conversao_loja) / 100, \n                    parseInt(r.clientes_monitoramento, 10) || 0, \n                    parseInt(r.vendas_monitoramento_total, 10) || 0, \n                    parseFloat(r.tx_conversao_monitoramento) / 100, \n                    parseFloat(String(r.pa).replace(',', '.')) || 0, \n                    safeParseFloat(r.ticket_medio), \n                    r.total_vendas_dinheiro, \n                    parseInt(r.quantidade_trocas, 10) || 0 \n                ]; \n                if (lojaData.funcao_especial === 'Omni') { \n                    rowData.push(parseInt(r.quantidade_omni, 10) || 0); \n                } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { \n                    rowData.push(parseInt(r.quantidade_funcao_especial, 10) || 0); \n                } else { \n                    rowData.push(0); \n                } \n                rowData.push(r.enviado_por_usuario || '-'); \n                const row = worksheet.addRow(rowData); \n                row.getCell(1).numFmt = 'DD/MM/YYYY'; \n                row.getCell(4).numFmt = '0.00%'; \n                row.getCell(7).numFmt = '0.00%'; \n                row.getCell(8).numFmt = '0.00'; \n                row.getCell(9).numFmt = 'R$ #,##0.00'; \n                row.getCell(10).numFmt = 'R$ #,##0.00'; \n                row.eachCell(cell => { \n                    cell.alignment = { vertical: 'middle', horizontal: 'center' }; \n                }); \n            }); \n            worksheet.columns.forEach(column => { \n                let maxLength = 0; \n                column.eachCell({ includeEmpty: true }, cell => { \n                    const length = cell.value ? cell.value.toString().length : 10; \n                    if (length > maxLength) { maxLength = length; } \n                }); \n                column.width = Math.max(12, maxLength + 3); \n            }); \n            worksheet.getColumn(4).width = 20; \n            worksheet.getColumn(7).width = 20; \n            worksheet.getColumn(12).width = 22; \n        } \n        const currentDate = new Date().toLocaleDateString('pt-BR').replace(/\\//g, '-');\n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); \n        res.setHeader('Content-Disposition', `attachment; filename=\"Todos_Relatorios_${currentDate}.xlsx\"`); \n        await workbook.xlsx.write(res); \n        res.end(); \n    }); \n});\n\n// APIs DE DASHBOARD, DEMANDAS, BACKUP E RESTORE \napp.get('/api/dashboard-data', requirePageLogin, (req, res) => { \n    let whereClauses = []; \n    let params = []; \n    \n    // Aplicar filtro de lojas baseado no role\n    const lojaFilter = getLojaFilter(req.session.role, req.session.loja_gerente, req.session.lojas_consultor, req.session.loja_tecnico);\n    if (lojaFilter) {\n        whereClauses.push(lojaFilter.clause);\n        params.push(...lojaFilter.params);\n    }\n    \n    if (req.query.loja && req.query.loja !== 'todas') { \n        whereClauses.push('loja = ?'); \n        params.push(req.query.loja); \n    } \n    if (req.query.data_inicio) { \n        whereClauses.push('data >= ?'); \n        params.push(req.query.data_inicio); \n    } \n    if (req.query.data_fim) { \n        whereClauses.push('data <= ?'); \n        params.push(req.query.data_fim); \n    } \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : ''; \n    const sql = `SELECT COALESCE(SUM(clientes_monitoramento),0) as total_clientes_monitoramento, COALESCE(SUM(vendas_monitoramento),0) as total_vendas_monitoramento, COALESCE(SUM(clientes_loja),0) as total_clientes_loja, COALESCE(SUM(vendas_loja),0) as total_vendas_loja, COALESCE(SUM(quantidade_omni),0) as total_omni FROM relatorios ${whereString}`; \n    db.get(sql, params, (err, row) => { \n        if (err) return res.status(500).json({ error: err.message }); \n        \n        // Se for gerente, remover dados de monitoramento da resposta\n        const isGerente = req.session.role === 'gerente';\n        \n        const vendas_m_total = (row.total_vendas_monitoramento || 0) + (row.total_omni || 0); \n        const response = { \n            ...row, \n            tx_conversao_monitoramento: (row.total_clientes_monitoramento > 0 ? (vendas_m_total / row.total_clientes_monitoramento) * 100 : 0), \n            tx_conversao_loja: (row.total_clientes_loja > 0 ? (row.total_vendas_loja / row.total_clientes_loja) * 100 : 0) \n        };\n        \n        // Remover campos de monitoramento se for gerente\n        if (isGerente) {\n            delete response.total_clientes_monitoramento;\n            delete response.total_vendas_monitoramento;\n            delete response.total_omni;\n            delete response.tx_conversao_monitoramento;\n        }\n        \n        res.json(response); \n    }); \n});\napp.get('/api/ranking', requirePageLogin, (req, res) => { \n    let whereClauses = ['l.status = \\'ativa\\'']; \n    let params = []; \n    \n    // Aplicar filtro de lojas baseado no role (no LEFT JOIN)\n    const lojaFilter = getLojaFilter(req.session.role, req.session.loja_gerente, req.session.lojas_consultor, req.session.loja_tecnico);\n    if (lojaFilter) {\n        whereClauses.push(lojaFilter.clause.replace('TRIM(loja)', 'TRIM(l.nome)'));\n        params.push(...lojaFilter.params);\n    }\n    \n    let joinConditions = [];\n    if (req.query.data_inicio) { \n        joinConditions.push('r.data >= ?'); \n        params.push(req.query.data_inicio); \n    } \n    if (req.query.data_fim) { \n        joinConditions.push('r.data <= ?'); \n        params.push(req.query.data_fim); \n    } \n    const joinCondition = joinConditions.length > 0 ? `AND ${joinConditions.join(' AND ')}` : ''; \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n    const sql = `SELECT l.nome as loja, COALESCE(SUM(r.clientes_loja), 0) as total_clientes_loja, COALESCE(SUM(r.vendas_loja), 0) as total_vendas_loja, COALESCE(SUM(r.clientes_monitoramento), 0) as total_clientes_monitoramento, COALESCE(SUM(r.vendas_monitoramento), 0) as total_vendas_monitoramento, COALESCE(SUM(r.quantidade_omni), 0) as total_omni FROM lojas l LEFT JOIN relatorios r ON l.nome = r.loja ${joinCondition} ${whereString} GROUP BY l.nome`; \n    db.all(sql, params, (err, rows) => { \n        if (err) return res.status(500).json({ error: err.message }); \n        \n        // Verificar se é gerente\n        const isGerente = req.session.role === 'gerente';\n        \n        const ranking = rows.map(r => { \n            const vendas_m_total = (r.total_vendas_monitoramento || 0) + (r.total_omni || 0); \n            const item = { \n                ...r, \n                tx_loja: (r.total_clientes_loja > 0 ? (r.total_vendas_loja / r.total_clientes_loja) * 100 : 0), \n                tx_monitoramento: (r.total_clientes_monitoramento > 0 ? (vendas_m_total / r.total_clientes_monitoramento) * 100 : 0) \n            };\n            \n            // Remover campos de monitoramento se for gerente\n            if (isGerente) {\n                delete item.total_clientes_monitoramento;\n                delete item.total_vendas_monitoramento;\n                delete item.total_omni;\n                delete item.tx_monitoramento;\n            }\n            \n            return item;\n        }); \n        res.json(ranking); \n    }); \n});\napp.get('/api/dashboard/chart-data', requirePageLogin, (req, res) => {\n    const { loja, data_inicio, data_fim } = req.query;\n    let whereClauses = [];\n    let params = [];\n    \n    // Aplicar filtro de lojas baseado no role\n    const lojaFilter = getLojaFilter(req.session.role, req.session.loja_gerente, req.session.lojas_consultor, req.session.loja_tecnico);\n    if (lojaFilter) {\n        whereClauses.push(lojaFilter.clause);\n        params.push(...lojaFilter.params);\n    }\n    \n    // Filtro específico por loja (query param)\n    if (loja && loja !== 'todas' && !lojaFilter) {\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(loja);\n    }\n    \n    // Filtros de data\n    if (data_inicio) {\n        whereClauses.push('data >= ?');\n        params.push(data_inicio);\n    }\n    if (data_fim) {\n        whereClauses.push('data <= ?');\n        params.push(data_fim);\n    }\n    \n    // Se não tem nenhum filtro de data, pegar últimos 30 dias\n    if (!data_inicio && !data_fim) {\n        const date = new Date();\n        date.setDate(date.getDate() - 30);\n        const startDate = date.toISOString().slice(0, 10);\n        whereClauses.push('data >= ?');\n        params.push(startDate);\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n    const sql = `SELECT data, SUM(clientes_loja) as total_clientes_loja, SUM(vendas_loja) as total_vendas_loja, SUM(clientes_monitoramento) as total_clientes_monitoramento, SUM(vendas_monitoramento) as total_vendas_monitoramento, SUM(quantidade_omni) as total_omni FROM relatorios ${whereString} GROUP BY data ORDER BY data ASC`;\n    \n    db.all(sql, params, (err, rows) => {\n        if (err) return res.status(500).json({ error: 'Erro ao buscar dados para o gráfico.' });\n        \n        // Verificar se é gerente\n        const isGerente = req.session.role === 'gerente';\n        \n        const labels = [];\n        const txConversaoLoja = [];\n        const txConversaoMonitoramento = [];\n        \n        rows.forEach(row => {\n            labels.push(new Date(row.data).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', timeZone: 'UTC' }));\n            const tx_l = row.total_clientes_loja > 0 ? (row.total_vendas_loja / row.total_clientes_loja) * 100 : 0;\n            txConversaoLoja.push(tx_l.toFixed(2));\n            \n            // Só calcular monitoramento se não for gerente\n            if (!isGerente) {\n                const vendas_m_total = (row.total_vendas_monitoramento || 0) + (row.total_omni || 0);\n                const tx_m = row.total_clientes_monitoramento > 0 ? (vendas_m_total / row.total_clientes_monitoramento) * 100 : 0;\n                txConversaoMonitoramento.push(tx_m.toFixed(2));\n            }\n        });\n        \n        // Remover txConversaoMonitoramento da resposta se for gerente\n        const response = { labels, txConversaoLoja };\n        if (!isGerente) {\n            response.txConversaoMonitoramento = txConversaoMonitoramento;\n        }\n        \n        res.json(response);\n    });\n});\napp.post('/api/demandas', requirePageLogin, (req, res) => { const { loja_nome, descricao, tag } = req.body; db.run('INSERT INTO demandas (loja_nome, descricao, tag, criado_por_usuario) VALUES (?, ?, ?, ?)', [loja_nome, descricao, tag, req.session.username], function (err) { if (err) return res.status(500).json({ error: 'Falha ao salvar demanda.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.get('/api/demandas/:status', requirePageLogin, (req, res) => { \n    const status = req.params.status === 'pendentes' ? 'pendente' : 'concluido'; \n    const whereClauses = ['status = ?'];\n    const params = [status];\n    \n    // Aplicar filtro de lojas baseado no role\n    const lojaFilter = getLojaFilter(req.session.role, req.session.loja_gerente, req.session.lojas_consultor, req.session.loja_tecnico);\n    if (lojaFilter) {\n        whereClauses.push(lojaFilter.clause.replace('TRIM(loja)', 'TRIM(loja_nome)'));\n        params.push(...lojaFilter.params);\n    }\n    \n    const whereString = whereClauses.join(' AND ');\n    const query = `SELECT * FROM demandas WHERE ${whereString} ORDER BY criado_em DESC`;\n    \n    db.all(query, params, (err, demandas) => { \n        if (err) return res.status(500).json({ error: err.message }); \n        res.json(demandas || []); \n    }); \n});\napp.put('/api/demandas/:id/concluir', requirePageLogin, (req, res) => { db.run(\"UPDATE demandas SET status = 'concluido', concluido_por_usuario = ?, concluido_em = CURRENT_TIMESTAMP WHERE id = ?\", [req.session.username, req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao concluir demanda.' }); if (this.changes === 0) return res.status(404).json({ error: 'Demanda não encontrada.' }); res.json({ success: true }); }); });\napp.delete('/api/demandas/:id', requirePageLogin, requireRole(['admin', 'dev', 'monitoramento', 'consultor']), (req, res) => { db.run(\"DELETE FROM demandas WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir demanda.' }); if (this.changes === 0) return res.status(404).json({ error: \"Demanda não encontrada.\" }); res.json({ success: true }); }); });\napp.get('/api/backup/info', requirePageLogin, requireAdmin, (req, res) => {\n    try {\n        const stats = fs.statSync(DB_PATH);\n        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);\n        res.json({ sizeMB });\n    } catch (error) {\n        console.error(\"Erro ao obter informações do backup:\", error);\n        res.status(500).json({ error: 'Não foi possível obter informações do banco de dados.' });\n    }\n});\n\n// API para limpar tabelas específicas do banco de dados\napp.delete('/api/backup/clear', requirePageLogin, requireAdmin, (req, res) => {\n    db.serialize(() => {\n        db.run(\"DELETE FROM relatorios\", (err) => {\n            if (err) return res.status(500).json({ error: 'Erro ao limpar relatórios.' });\n        });\n        db.run(\"DELETE FROM demandas\", (err) => {\n            if (err) return res.status(500).json({ error: 'Erro ao limpar demandas.' });\n        });\n        res.json({ success: true, message: 'Relatórios e demandas foram limpos.' });\n    });\n});\napp.get('/api/backup/download', requirePageLogin, requireRole(['admin', 'dev']), (req, res) => { const date = new Date().toISOString().slice(0, 10); const fileName = `backup_reports_${date}.db`; res.download(DB_PATH, fileName, (err) => { if (err && !res.headersSent) { res.status(500).send(\"Não foi possível baixar o arquivo de backup.\"); } }); });\napp.post('/api/backup/restore', requirePageLogin, requireRole(['admin', 'dev']), upload.single('backupFile'), (req, res) => { if (!req.file) { return res.status(400).json({ error: \"Nenhum arquivo de backup foi enviado.\" }); } const backupBuffer = req.file.buffer; db.close((err) => { if (err) { console.error(\"Erro ao fechar o DB antes de restaurar:\", err.message); return res.status(500).json({ error: \"Não foi possível fechar a conexão com o banco de dados atual.\" }); } fs.writeFile(DB_PATH, backupBuffer, (err) => { if (err) { console.error(\"Falha ao escrever o arquivo de backup:\", err.message); db = new sqlite3.Database(DB_PATH); return res.status(500).json({ error: \"Falha ao substituir o arquivo de banco de dados.\" }); } db = new sqlite3.Database(DB_PATH, (err) => { if (err) { console.error(\"DB restaurado, mas falha ao reconectar:\", err.message); return res.status(500).json({ error: \"Banco de dados restaurado, mas falha ao reconectar. Reinicie o servidor.\" }); } console.log(\"Banco de dados restaurado e reconectado com sucesso.\"); res.json({ success: true, message: \"Banco de dados restaurado com sucesso. A página será recarregada.\" }); }); }); }); });\n\n// APIs DE LOGS (apenas para Dev)\napp.get('/api/logs', requirePageLogin, requireRole(['dev']), (req, res) => {\n    const { type, start, end, limit, offset } = req.query;\n    let whereClauses = [];\n    let params = [];\n    \n    if (type && type !== 'all') {\n        whereClauses.push('type = ?');\n        params.push(type);\n    }\n    if (start) {\n        whereClauses.push('timestamp >= ?');\n        params.push(start);\n    }\n    if (end) {\n        whereClauses.push('timestamp <= ?');\n        params.push(end + ' 23:59:59');\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n    const limitNum = parseInt(limit) || 50;\n    const offsetNum = parseInt(offset) || 0;\n    \n    // Buscar total\n    db.get(`SELECT COUNT(*) as total FROM logs ${whereString}`, params, (err, countRow) => {\n        if (err) return res.status(500).json({ error: err.message });\n        \n        // Buscar logs\n        db.all(`SELECT * FROM logs ${whereString} ORDER BY timestamp DESC LIMIT ? OFFSET ?`, \n            [...params, limitNum, offsetNum], \n            (err, logs) => {\n                if (err) return res.status(500).json({ error: err.message });\n                \n                // Buscar estatísticas (últimas 24h)\n                const last24h = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n                db.all(`SELECT type, COUNT(*) as count FROM logs WHERE timestamp >= ? GROUP BY type`, [last24h], (err, statsRows) => {\n                    const stats = {\n                        errors: 0,\n                        warnings: 0,\n                        activeUsers: 0,\n                        uptime: Math.floor(process.uptime() / 60) + ' min'\n                    };\n                    \n                    if (!err && statsRows) {\n                        statsRows.forEach(row => {\n                            if (row.type === 'error') stats.errors = row.count;\n                            if (row.type === 'warning') stats.warnings = row.count;\n                        });\n                    }\n                    \n                    // Contar usuários ativos (última hora)\n                    const lastHour = new Date(Date.now() - 60 * 60 * 1000).toISOString();\n                    db.get(`SELECT COUNT(DISTINCT username) as count FROM logs WHERE timestamp >= ? AND type = 'access'`, [lastHour], (err, userRow) => {\n                        if (!err && userRow) stats.activeUsers = userRow.count;\n                        res.json({ logs, total: countRow.total, stats });\n                    });\n                });\n            }\n        );\n    });\n});\n\napp.delete('/api/logs', requirePageLogin, requireRole(['dev']), (req, res) => {\n    db.run('DELETE FROM logs', (err) => {\n        if (err) return res.status(500).json({ error: 'Erro ao limpar logs.' });\n        res.json({ success: true, message: 'Logs limpos com sucesso.' });\n    });\n});\n\n// Função auxiliar para registrar logs\nfunction logEvent(type, username, action, details) {\n    db.run('INSERT INTO logs (type, username, action, details) VALUES (?, ?, ?, ?)', \n        [type, username, action, details],\n        (err) => { if (err) console.error('Erro ao registrar log:', err.message); }\n    );\n}\n\n// Exportar função de log para usar em outras rotas\nglobal.logEvent = logEvent;\n\n// =================================================================\n// ROTAS DE ASSISTÊNCIA TÉCNICA\n// =================================================================\n\n// Página principal de Assistência Técnica\napp.get('/assistencia', requirePageLogin, requirePage(['assistencia']), (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'assistencia.html'));\n});\n\n// Página de Alertas para Técnicos (via SPA)\napp.get('/alertas-tecnico', requirePageLogin, (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\n\n// API - Listar Estoque Técnico\napp.get('/api/estoque-tecnico', requirePageLogin, requireRole(['tecnico', 'gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const search = req.query.search || '';\n    const disponivel = req.query.disponivel;\n    const loja = req.query.loja;\n    \n    let whereClauses = [];\n    let params = [];\n    \n    if (search) {\n        whereClauses.push('(nome_peca LIKE ? OR codigo_interno LIKE ?)');\n        params.push(`%${search}%`, `%${search}%`);\n    }\n    \n    if (disponivel === 'true') {\n        whereClauses.push('quantidade > 0');\n    }\n    \n    if (loja) {\n        whereClauses.push('loja = ?');\n        params.push(loja);\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n    \n    db.all(`SELECT * FROM estoque_tecnico ${whereString} ORDER BY nome_peca ASC`, params, (err, rows) => {\n        if (err) return res.status(500).json({ error: err.message });\n        res.json(rows || []);\n    });\n});\n\n// API - Adicionar Peça ao Estoque\napp.post('/api/estoque-tecnico', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { nome_peca, codigo_interno, quantidade, valor_custo, loja } = req.body;\n    \n    if (!nome_peca || !codigo_interno || !loja) {\n        return res.status(400).json({ error: 'Nome da peça, código interno e loja são obrigatórios.' });\n    }\n    \n    db.run(\n        'INSERT INTO estoque_tecnico (nome_peca, codigo_interno, quantidade, valor_custo, loja) VALUES (?, ?, ?, ?, ?)',\n        [nome_peca, codigo_interno, quantidade || 0, valor_custo || 0, loja],\n        function(err) {\n            if (err) {\n                if (err.message.includes('UNIQUE')) {\n                    return res.status(400).json({ error: 'Código interno já existe.' });\n                }\n                return res.status(500).json({ error: err.message });\n            }\n            logEvent('info', req.session.username, 'estoque_add', `Peça adicionada: ${nome_peca} (Loja: ${loja})`);\n            res.status(201).json({ success: true, id: this.lastID });\n        }\n    );\n});\n\n// API - Atualizar Estoque de Peça\napp.put('/api/estoque-tecnico/:id', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    const { nome_peca, codigo_interno, quantidade, valor_custo, loja } = req.body;\n    \n    db.run(\n        `UPDATE estoque_tecnico SET \n            nome_peca = ?, \n            codigo_interno = ?, \n            quantidade = ?, \n            valor_custo = ?,\n            loja = ?,\n            updated_at = CURRENT_TIMESTAMP\n        WHERE id = ?`,\n        [nome_peca, codigo_interno, quantidade, valor_custo, loja, id],\n        function(err) {\n            if (err) return res.status(500).json({ error: err.message });\n            if (this.changes === 0) return res.status(404).json({ error: 'Peça não encontrada.' });\n            logEvent('info', req.session.username, 'estoque_update', `Estoque atualizado: ID ${id} (Loja: ${loja})`);\n            res.json({ success: true });\n        }\n    );\n});\n\n// API - Deletar Peça do Estoque\napp.delete('/api/estoque-tecnico/:id', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    \n    db.run('DELETE FROM estoque_tecnico WHERE id = ?', [id], function(err) {\n        if (err) return res.status(500).json({ error: err.message });\n        if (this.changes === 0) return res.status(404).json({ error: 'Peça não encontrada.' });\n        logEvent('info', req.session.username, 'estoque_delete', `Peça removida: ID ${id}`);\n        res.json({ success: true });\n    });\n});\n\n// API - Listar Assistências\napp.get('/api/assistencias', requirePageLogin, requireRole(['tecnico', 'gerente', 'consultor', 'monitoramento', 'admin', 'dev']), (req, res) => {\n    const status = req.query.status;\n    const search = req.query.search || '';\n    const limit = req.query.limit ? parseInt(req.query.limit) : null;\n    const lojaFilter = req.query.loja || '';\n    \n    let whereClauses = [];\n    let params = [];\n    \n    // Filtrar por loja baseado no cargo\n    if (req.session.role === 'tecnico' && req.session.loja_tecnico) {\n        // Técnico vê apenas sua loja\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(req.session.loja_tecnico.trim());\n    } else if (req.session.role === 'gerente' && req.session.loja_gerente) {\n        // Gerente vê apenas sua loja\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(req.session.loja_gerente.trim());\n    } else if (req.session.role === 'consultor' && req.session.lojas_consultor) {\n        // Consultor vê lojas que administra\n        try {\n            const lojasArray = JSON.parse(req.session.lojas_consultor);\n            if (lojasArray && lojasArray.length > 0) {\n                const placeholders = lojasArray.map(() => 'TRIM(loja) = ?').join(' OR ');\n                whereClauses.push(`(${placeholders})`);\n                params.push(...lojasArray.map(l => l.trim()));\n            }\n        } catch (e) {\n            // Se lojas_consultor não for um JSON válido, não adiciona filtro\n        }\n    }\n    \n    // Filtro opcional por loja específica (para cargos que veem múltiplas lojas)\n    if (lojaFilter && ['consultor', 'admin', 'dev', 'monitoramento'].includes(req.session.role)) {\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(lojaFilter.trim());\n    }\n    \n    if (status && status !== 'todos') {\n        // Suportar múltiplos status separados por vírgula\n        const statusList = status.split(',').map(s => s.trim());\n        if (statusList.length === 1) {\n            whereClauses.push('status = ?');\n            params.push(statusList[0]);\n        } else {\n            const placeholders = statusList.map(() => '?').join(',');\n            whereClauses.push(`status IN (${placeholders})`);\n            params.push(...statusList);\n        }\n    }\n    \n    if (search) {\n        whereClauses.push('(cliente_nome LIKE ? OR cliente_cpf LIKE ? OR numero_pedido LIKE ?)');\n        params.push(`%${search}%`, `%${search}%`, `%${search}%`);\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n    const limitString = limit ? ` LIMIT ${limit}` : '';\n    \n    db.all(`SELECT * FROM assistencias ${whereString} ORDER BY created_at DESC${limitString}`, params, (err, rows) => {\n        if (err) return res.status(500).json({ error: err.message });\n        res.json(rows || []);\n    });\n});\n\n// API - Criar Assistência\napp.post('/api/assistencias', requirePageLogin, requireRole(['consultor', 'gerente', 'admin', 'dev']), (req, res) => {\n    let {\n        cliente_nome,\n        cliente_cpf,\n        numero_pedido,\n        data_entrada,\n        valor_peca_loja,\n        valor_servico_cliente,\n        aparelho,\n        peca_id,\n        peca_nome,\n        observacoes,\n        loja\n    } = req.body;\n    \n    // Se for gerente, forçar loja do gerente\n    if (req.session.role === 'gerente' && req.session.loja_gerente) {\n        loja = req.session.loja_gerente;\n    }\n    \n    if (!cliente_nome || !cliente_cpf || !data_entrada || !aparelho) {\n        return res.status(400).json({ error: 'Campos obrigatórios: cliente, CPF, data de entrada e aparelho.' });\n    }\n    \n    db.run(\n        `INSERT INTO assistencias (\n            cliente_nome, cliente_cpf, numero_pedido, data_entrada,\n            valor_peca_loja, valor_servico_cliente, aparelho,\n            peca_id, peca_nome, observacoes, tecnico_responsavel, loja\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n        [\n            cliente_nome, cliente_cpf, numero_pedido, data_entrada,\n            valor_peca_loja || 0, valor_servico_cliente || 0, aparelho,\n            peca_id, peca_nome, observacoes, req.session.username, loja\n        ],\n        function(err) {\n            if (err) return res.status(500).json({ error: err.message });\n            logEvent('info', req.session.username, 'assistencia_create', `Assistência criada: ${cliente_nome}`);\n            res.status(201).json({ success: true, id: this.lastID });\n        }\n    );\n});\n\n// API - Atualizar Assistência\napp.put('/api/assistencias/:id', requirePageLogin, requireRole(['consultor', 'gerente', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    const {\n        cliente_nome,\n        cliente_cpf,\n        numero_pedido,\n        data_entrada,\n        data_conclusao,\n        valor_peca_loja,\n        valor_servico_cliente,\n        aparelho,\n        peca_id,\n        peca_nome,\n        observacoes,\n        status,\n        loja\n    } = req.body;\n    \n    db.run(\n        `UPDATE assistencias SET \n            cliente_nome = ?, cliente_cpf = ?, numero_pedido = ?,\n            data_entrada = ?, data_conclusao = ?,\n            valor_peca_loja = ?, valor_servico_cliente = ?,\n            aparelho = ?, peca_id = ?, peca_nome = ?,\n            observacoes = ?, status = ?, loja = ?,\n            updated_at = CURRENT_TIMESTAMP\n        WHERE id = ?`,\n        [\n            cliente_nome, cliente_cpf, numero_pedido, data_entrada, data_conclusao,\n            valor_peca_loja, valor_servico_cliente, aparelho, peca_id, peca_nome,\n            observacoes, status, loja, id\n        ],\n        function(err) {\n            if (err) return res.status(500).json({ error: err.message });\n            if (this.changes === 0) return res.status(404).json({ error: 'Assistência não encontrada.' });\n            logEvent('info', req.session.username, 'assistencia_update', `Assistência atualizada: ID ${id}`);\n            res.json({ success: true });\n        }\n    );\n});\n\n// API - Concluir Assistência (atualiza status e estoque)\napp.post('/api/assistencias/:id/concluir', requirePageLogin, requireRole(['consultor', 'gerente', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    \n    // Buscar assistência\n    db.get('SELECT * FROM assistencias WHERE id = ?', [id], (err, assistencia) => {\n        if (err) return res.status(500).json({ error: err.message });\n        if (!assistencia) return res.status(404).json({ error: 'Assistência não encontrada.' });\n        \n        // Atualizar assistência para concluída\n        db.run(\n            `UPDATE assistencias SET \n                status = 'Concluído',\n                data_conclusao = ?,\n                updated_at = CURRENT_TIMESTAMP\n            WHERE id = ?`,\n            [new Date().toISOString().split('T')[0], id],\n            function(err) {\n                if (err) return res.status(500).json({ error: err.message });\n                \n                // Se tem peça associada, atualizar estoque\n                if (assistencia.peca_id) {\n                    db.run(\n                        'UPDATE estoque_tecnico SET quantidade = quantidade - 1 WHERE id = ? AND quantidade > 0',\n                        [assistencia.peca_id],\n                        (err) => {\n                            if (err) console.error('Erro ao atualizar estoque:', err.message);\n                        }\n                    );\n                }\n                \n                logEvent('info', req.session.username, 'assistencia_complete', `Assistência concluída: ${assistencia.cliente_nome}`);\n                res.json({ success: true, message: 'Assistência concluída com sucesso!' });\n            }\n        );\n    });\n});\n\n// API - Histórico de Assistências (apenas concluídas)\napp.get('/api/assistencias/historico', requirePageLogin, requireRole(['tecnico', 'gerente', 'consultor', 'monitoramento', 'admin', 'dev']), (req, res) => {\n    const search = req.query.search || '';\n    const lojaFilter = req.query.loja || '';\n    \n    let whereClauses = [\"status = 'Concluído'\"];\n    let params = [];\n    \n    // Filtrar por loja baseado no cargo\n    if (req.session.role === 'tecnico' && req.session.loja_tecnico) {\n        // Técnico vê apenas sua loja\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(req.session.loja_tecnico.trim());\n    } else if (req.session.role === 'gerente' && req.session.loja_gerente) {\n        // Gerente vê apenas sua loja\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(req.session.loja_gerente.trim());\n    } else if (req.session.role === 'consultor' && req.session.lojas_consultor) {\n        // Consultor vê lojas que administra\n        try {\n            const lojasArray = JSON.parse(req.session.lojas_consultor);\n            if (lojasArray && lojasArray.length > 0) {\n                const placeholders = lojasArray.map(() => 'TRIM(loja) = ?').join(' OR ');\n                whereClauses.push(`(${placeholders})`);\n                params.push(...lojasArray.map(l => l.trim()));\n            }\n        } catch (e) {\n            // Se lojas_consultor não for um JSON válido, não adiciona filtro\n        }\n    }\n    \n    // Filtro opcional por loja específica (para cargos que veem múltiplas lojas)\n    if (lojaFilter && ['consultor', 'admin', 'dev', 'monitoramento'].includes(req.session.role)) {\n        whereClauses.push('TRIM(loja) = ?');\n        params.push(lojaFilter.trim());\n    }\n    \n    if (search) {\n        whereClauses.push('(cliente_nome LIKE ? OR cliente_cpf LIKE ? OR numero_pedido LIKE ?)');\n        params.push(`%${search}%`, `%${search}%`, `%${search}%`);\n    }\n    \n    const whereString = `WHERE ${whereClauses.join(' AND ')}`;\n    \n    db.all(`SELECT * FROM assistencias ${whereString} ORDER BY data_conclusao DESC, created_at DESC`, params, (err, rows) => {\n        if (err) return res.status(500).json({ error: err.message });\n        res.json(rows || []);\n    });\n});\n\n// API - Deletar Assistência (apenas concluídas)\napp.delete('/api/assistencias/:id', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    const { id } = req.params;\n    \n    // Primeiro, verificar se a assistência existe e se está concluída\n    db.get('SELECT id, status FROM assistencias WHERE id = ?', [id], (err, row) => {\n        if (err) return res.status(500).json({ error: err.message });\n        if (!row) return res.status(404).json({ error: 'Assistência não encontrada.' });\n        \n        // Verificar se está concluída\n        if (row.status !== 'Concluído') {\n            return res.status(403).json({ \n                error: 'Apenas assistências concluídas podem ser removidas.' \n            });\n        }\n        \n        // Se estiver concluída, deletar\n        db.run('DELETE FROM assistencias WHERE id = ?', [id], function(err) {\n            if (err) return res.status(500).json({ error: err.message });\n            logEvent('info', req.session.username, 'assistencia_delete', `Assistência concluída removida: ID ${id}`);\n            res.json({ success: true });\n        });\n    });\n});\n\n// API - Estatísticas de Assistência Técnica para Dashboard\napp.get('/api/assistencias/stats-tecnico', requirePageLogin, requireRole(['tecnico']), (req, res) => {\n    const lojaTecnico = req.session.loja_tecnico;\n    \n    if (!lojaTecnico) {\n        return res.status(400).json({ error: 'Técnico sem loja atribuída' });\n    }\n    \n    const hoje = new Date().toISOString().split('T')[0];\n    const mesAtual = hoje.substring(0, 7);\n    \n    // Em andamento\n    db.get(`\n        SELECT COUNT(*) as total \n        FROM assistencias \n        WHERE TRIM(loja) = ? AND status = 'Em andamento'\n    `, [lojaTecnico.trim()], (err, emAndamento) => {\n        if (err) return res.status(500).json({ error: err.message });\n        \n        // Concluídas hoje\n        db.get(`\n            SELECT COUNT(*) as total \n            FROM assistencias \n            WHERE TRIM(loja) = ? AND status = 'Concluído' AND DATE(data_saida) = ?\n        `, [lojaTecnico.trim(), hoje], (err2, concluidasHoje) => {\n            if (err2) return res.status(500).json({ error: err2.message });\n            \n            // Total do mês\n            db.get(`\n                SELECT COUNT(*) as total \n                FROM assistencias \n                WHERE TRIM(loja) = ? AND strftime('%Y-%m', data_entrada) = ?\n            `, [lojaTecnico.trim(), mesAtual], (err3, totalMes) => {\n                if (err3) return res.status(500).json({ error: err3.message });\n                \n                // Aguardando peças\n                db.get(`\n                    SELECT COUNT(*) as total \n                    FROM assistencias \n                    WHERE TRIM(loja) = ? AND status = 'Aguardando peças'\n                `, [lojaTecnico.trim()], (err4, aguardandoPecas) => {\n                    if (err4) return res.status(500).json({ error: err4.message });\n                    \n                    res.json({\n                        emAndamento: emAndamento?.total || 0,\n                        concluidasHoje: concluidasHoje?.total || 0,\n                        totalMes: totalMes?.total || 0,\n                        aguardandoPecas: aguardandoPecas?.total || 0\n                    });\n                });\n            });\n        });\n    });\n});\n\napp.get('/api/assistencias/stats', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    // Técnico com mais assistências\n    db.get(`\n        SELECT tecnico_responsavel, COUNT(*) as total \n        FROM assistencias \n        WHERE tecnico_responsavel IS NOT NULL \n        GROUP BY tecnico_responsavel \n        ORDER BY total DESC \n        LIMIT 1\n    `, (err, topTecnico) => {\n        if (err) return res.status(500).json({ error: err.message });\n        \n        // Loja com mais assistências\n        db.get(`\n            SELECT loja, COUNT(*) as total \n            FROM assistencias \n            WHERE loja IS NOT NULL \n            GROUP BY loja \n            ORDER BY total DESC \n            LIMIT 1\n        `, (err2, topLoja) => {\n            if (err2) return res.status(500).json({ error: err2.message });\n            \n            // Total de assistências e valores\n            db.get(`\n                SELECT \n                    COUNT(*) as total_assistencias,\n                    SUM(CASE WHEN status = 'Concluído' THEN 1 ELSE 0 END) as concluidas,\n                    SUM(CASE WHEN status = 'Em andamento' THEN 1 ELSE 0 END) as em_andamento,\n                    SUM(valor_peca_loja + valor_servico_cliente) as valor_total\n                FROM assistencias\n            `, (err3, totais) => {\n                if (err3) return res.status(500).json({ error: err3.message });\n                \n                res.json({\n                    topTecnico: topTecnico || { tecnico_responsavel: '-', total: 0 },\n                    topLoja: topLoja || { loja: '-', total: 0 },\n                    totais: totais || { total_assistencias: 0, concluidas: 0, em_andamento: 0, valor_total: 0 }\n                });\n            });\n        });\n    });\n});\n\n// API - Assistências por Loja (detalhamento)\napp.get('/api/assistencias/por-loja', requirePageLogin, requireRole(['gerente', 'consultor', 'admin', 'dev']), (req, res) => {\n    db.all(`\n        SELECT \n            loja,\n            COUNT(*) as total,\n            SUM(CASE WHEN status = 'Concluído' THEN 1 ELSE 0 END) as concluidas,\n            SUM(CASE WHEN status = 'Em andamento' THEN 1 ELSE 0 END) as em_andamento,\n            SUM(valor_peca_loja + valor_servico_cliente) as valor_total\n        FROM assistencias\n        WHERE loja IS NOT NULL\n        GROUP BY loja\n        ORDER BY total DESC\n    `, (err, rows) => {\n        if (err) return res.status(500).json({ error: err.message });\n        res.json(rows || []);\n    });\n});\n\n// =================================================================\n// INICIALIZAÇÃO DO SERVIDOR\n// =================================================================\nconst startTime = new Date();\nconsole.log(`Iniciando servidor em ${startTime.toLocaleString('pt-BR')}...`);\n\napp.listen(PORT, '0.0.0.0', () => {\n    console.log(`Servidor rodando em http://0.0.0.0:${PORT}`);\n    logEvent('info', 'system', 'server_start', `Servidor iniciado em http://0.0.0.0:${PORT}`);\n});\n\n","size_bytes":84603},"public/js/pages/gerenciar-usuarios.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initGerenciarUsuariosPage(currentUser) {\n    // Ocultar aba de backup para admin\n    const backupTab = document.getElementById('backup-tab');\n    const backupPane = document.getElementById('backup');\n    if (currentUser.role === 'admin') {\n        if (backupTab) backupTab.style.display = 'none';\n        if (backupPane) backupPane.style.display = 'none';\n    }\n    \n    initUsuarios(currentUser);\n    if (currentUser.role === 'dev') {\n        initBackup();\n    }\n}\n\n// --- LÓGICA DE GERENCIAMENTO DE USUÁRIOS ---\nfunction initUsuarios(currentUser) {\n    const tableBody = document.getElementById('tabela-usuarios-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-usuario');\n    const modalEl = document.getElementById('modal-usuario');\n    \n    if (!tableBody || !btnAdicionar || !modalEl) return;\n\n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-usuario');\n    const modalTitle = document.getElementById('modalUsuarioLabel');\n    const roleSelect = document.getElementById('usuario-role');\n    const campoLojaGerente = document.getElementById('campo-loja-gerente');\n    const campoLojasConsultor = document.getElementById('campo-lojas-consultor');\n    const campoLojaTecnico = document.getElementById('campo-loja-tecnico');\n    const selectLojaGerente = document.getElementById('usuario-loja-gerente');\n    const selectLojasConsultor = document.getElementById('usuario-lojas-consultor');\n    const selectLojaTecnico = document.getElementById('usuario-loja-tecnico');\n    \n    let usuariosCache = [];\n    let lojasCache = [];\n\n    const roleNames = {\n        'gerente': 'Gerente',\n        'consultor': 'Consultor',\n        'monitoramento': 'Monitoramento',\n        'tecnico': 'Técnico',\n        'admin': 'Administrador',\n        'dev': 'Desenvolvedor'\n    };\n\n    async function carregarLojas() {\n        try {\n            const response = await fetch('/api/lojas');\n            if (!response.ok) throw new Error('Falha ao carregar lojas.');\n            lojasCache = await response.json();\n            \n            // Preencher selects\n            selectLojaGerente.innerHTML = '<option value=\"\">Selecione uma loja</option>' + \n                lojasCache.map(loja => `<option value=\"${loja.nome}\">${loja.nome}</option>`).join('');\n            \n            selectLojasConsultor.innerHTML = \n                lojasCache.map(loja => `<option value=\"${loja.nome}\">${loja.nome}</option>`).join('');\n            \n            selectLojaTecnico.innerHTML = '<option value=\"\">Selecione uma loja</option>' + \n                lojasCache.map(loja => `<option value=\"${loja.nome}\">${loja.nome}</option>`).join('');\n        } catch(e) {\n            console.error('Erro ao carregar lojas:', e);\n        }\n    }\n\n    function mostrarCamposLojas(role) {\n        campoLojaGerente.style.display = role === 'gerente' ? 'block' : 'none';\n        campoLojasConsultor.style.display = role === 'consultor' ? 'block' : 'none';\n        campoLojaTecnico.style.display = role === 'tecnico' ? 'block' : 'none';\n        \n        // Resetar valores ao mudar de role\n        if (role !== 'gerente') selectLojaGerente.value = '';\n        if (role !== 'consultor') {\n            Array.from(selectLojasConsultor.options).forEach(opt => opt.selected = false);\n        }\n        if (role !== 'tecnico') selectLojaTecnico.value = '';\n    }\n\n    roleSelect.addEventListener('change', (e) => {\n        mostrarCamposLojas(e.target.value);\n    });\n\n    async function carregarUsuarios() {\n        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch('/api/usuarios');\n            if (!response.ok) throw new Error('Falha ao carregar usuários.');\n            usuariosCache = await response.json();\n            \n            if (usuariosCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Nenhum usuário cadastrado.</td></tr>';\n                return;\n            }\n            \n            tableBody.innerHTML = usuariosCache.map(user => {\n                const isCurrentUser = user.id === currentUser.id;\n                const deleteButton = isCurrentUser ? \n                    `<button class=\"btn btn-sm btn-outline-secondary\" disabled title=\"Não é possível excluir o próprio usuário\"><i class=\"bi bi-trash\"></i></button>` : \n                    `<button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${user.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>`;\n                \n                // Determinar lojas vinculadas\n                let lojasVinculadas = '-';\n                if (user.role === 'gerente' && user.loja_gerente) {\n                    lojasVinculadas = `<span class=\"badge bg-info\">${user.loja_gerente}</span>`;\n                } else if (user.role === 'consultor' && user.lojas_consultor) {\n                    const lojas = user.lojas_consultor.split(',').filter(l => l);\n                    lojasVinculadas = lojas.map(l => `<span class=\"badge bg-info me-1\">${l.trim()}</span>`).join('');\n                } else if (user.role === 'tecnico' && user.loja_tecnico) {\n                    lojasVinculadas = `<span class=\"badge bg-info\">${user.loja_tecnico}</span>`;\n                }\n                \n                const roleBadgeColor = {\n                    'dev': 'bg-danger',\n                    'admin': 'bg-primary',\n                    'monitoramento': 'bg-success',\n                    'consultor': 'bg-warning',\n                    'gerente': 'bg-secondary',\n                    'tecnico': 'bg-secondary'\n                };\n                \n                return `<tr>\n                    <td class=\"ps-3\">${user.id}</td>\n                    <td>${user.username}</td>\n                    <td><span class=\"badge ${roleBadgeColor[user.role] || 'bg-secondary'}\">${roleNames[user.role] || user.role}</span></td>\n                    <td>${lojasVinculadas}</td>\n                    <td class=\"text-end pe-3\">\n                        <button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${user.id}\" title=\"Editar\"><i class=\"bi bi-pencil\"></i></button>\n                        ${deleteButton}\n                    </td>\n                </tr>`;\n            }).join('');\n        } catch(e) {\n            tableBody.innerHTML = `<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar usuários.</td></tr>`;\n        }\n    }\n\n    function abrirModalParaAdicionar() {\n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Novo Usuário';\n        document.getElementById('usuario-id').value = '';\n        document.getElementById('usuario-password').required = true;\n        document.getElementById('usuario-password-label').textContent = 'Senha *';\n        \n        // Admin não pode criar Dev\n        const devOption = roleSelect.querySelector('option[value=\"dev\"]');\n        if (devOption) {\n            devOption.style.display = currentUser.role === 'admin' ? 'none' : 'block';\n        }\n        \n        mostrarCamposLojas('gerente'); // Padrão\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const user = usuariosCache.find(u => u.id === id);\n        if (!user) return;\n        modalForm.reset();\n        modalTitle.textContent = 'Editar Usuário';\n        document.getElementById('usuario-id').value = user.id;\n        document.getElementById('usuario-username').value = user.username;\n        document.getElementById('usuario-role').value = user.role;\n        \n        // Admin não pode alterar para Dev\n        const devOption = roleSelect.querySelector('option[value=\"dev\"]');\n        if (devOption) {\n            devOption.style.display = currentUser.role === 'admin' ? 'none' : 'block';\n        }\n        \n        // Preencher lojas\n        if (user.role === 'gerente' && user.loja_gerente) {\n            selectLojaGerente.value = user.loja_gerente;\n        }\n        if (user.role === 'consultor' && user.lojas_consultor) {\n            const lojas = user.lojas_consultor.split(',').map(l => l.trim()).filter(l => l);\n            Array.from(selectLojasConsultor.options).forEach(opt => {\n                opt.selected = lojas.includes(opt.value);\n            });\n        }\n        if (user.role === 'tecnico' && user.loja_tecnico) {\n            selectLojaTecnico.value = user.loja_tecnico;\n        }\n        \n        mostrarCamposLojas(user.role);\n        document.getElementById('usuario-password').required = false;\n        document.getElementById('usuario-password-label').textContent = 'Nova Senha (deixe em branco para não alterar)';\n        modal.show();\n    }\n\n    async function excluirUsuario(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir o usuário #${id}?`);\n        if (!confirmed) return;\n        try { \n            const response = await fetch(`/api/usuarios/${id}`, { method: 'DELETE' });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', 'Usuário excluído com sucesso.', 'success');\n            carregarUsuarios();\n        } catch (e) {\n            showToast('Erro', e.message || 'Não foi possível excluir o usuário.', 'danger');\n        }\n    }\n    \n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const id = document.getElementById('usuario-id').value;\n        const role = document.getElementById('usuario-role').value;\n        \n        const data = { \n            username: document.getElementById('usuario-username').value,\n            password: document.getElementById('usuario-password').value,\n            role: role\n        };\n        \n        // Adicionar lojas baseado no role\n        if (role === 'gerente') {\n            data.loja_gerente = selectLojaGerente.value || null;\n            data.lojas_consultor = '';\n            data.loja_tecnico = null;\n        } else if (role === 'consultor') {\n            data.loja_gerente = null;\n            const lojasSelected = Array.from(selectLojasConsultor.selectedOptions).map(opt => opt.value);\n            data.lojas_consultor = lojasSelected;\n            data.loja_tecnico = null;\n        } else if (role === 'tecnico') {\n            data.loja_gerente = null;\n            data.lojas_consultor = '';\n            data.loja_tecnico = selectLojaTecnico.value || null;\n        } else {\n            data.loja_gerente = null;\n            data.lojas_consultor = '';\n            data.loja_tecnico = null;\n        }\n        \n        if (!data.password) delete data.password;\n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/usuarios/${id}` : '/api/usuarios';\n        \n        try {\n            const response = await fetch(url, { \n                method, \n                headers: { 'Content-Type': 'application/json' }, \n                body: JSON.stringify(data) \n            });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', `Usuário ${id ? 'atualizado' : 'adicionado'} com sucesso.`, 'success');\n            modal.hide();\n            carregarUsuarios();\n        } catch(e) {\n            showToast('Erro', e.message || 'Não foi possível salvar o usuário.', 'danger');\n        }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n    \n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirUsuario(id);\n    });\n    \n    carregarLojas();\n    carregarUsuarios();\n}\n\n// --- LÓGICA DE BACKUP E RESTAURAÇÃO ---\nfunction initBackup() {\n    const dbSizeSpan = document.getElementById('db-size');\n    const btnLimparDb = document.getElementById('btn-limpar-db');\n    const btnRestaurarBackup = document.getElementById('btn-restaurar-backup');\n    const backupFileInput = document.getElementById('backup-file-input');\n\n    async function carregarInfoBackup() {\n        try {\n            const response = await fetch('/api/backup/info');\n            const data = await response.json();\n            dbSizeSpan.textContent = `${data.sizeMB} MB`;\n        } catch (error) {\n            dbSizeSpan.textContent = 'Erro ao carregar';\n            dbSizeSpan.classList.add('text-danger');\n        }\n    }\n\n    btnLimparDb.addEventListener('click', async () => {\n        const confirmed = await showConfirmModal('Você tem CERTEZA ABSOLUTA que deseja limpar todos os relatórios e demandas? Esta ação é IRREVERSÍVEL.');\n        if (!confirmed) return;\n\n        btnLimparDb.disabled = true;\n        btnLimparDb.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Limpando...';\n        try {\n            const response = await fetch('/api/backup/clear', { method: 'DELETE' });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', 'Banco de dados limpo com sucesso.', 'success');\n            carregarInfoBackup();\n        } catch (error) {\n            showToast('Erro', error.message, 'danger');\n        } finally {\n            btnLimparDb.disabled = false;\n            btnLimparDb.innerHTML = '<i class=\"bi bi-trash3-fill me-2\"></i>Limpar Relatórios e Demandas';\n        }\n    });\n\n    backupFileInput.addEventListener('change', () => {\n        btnRestaurarBackup.disabled = !backupFileInput.files.length;\n    });\n\n    btnRestaurarBackup.addEventListener('click', async () => {\n        const file = backupFileInput.files[0];\n        if (!file) {\n            showToast('Atenção', 'Selecione um arquivo de backup (.db) primeiro.', 'info');\n            return;\n        }\n\n        const confirmed = await showConfirmModal('Você está prestes a SUBSTITUIR TODO o banco de dados atual. O sistema atual será perdido para sempre. Deseja continuar?');\n        if (!confirmed) return;\n\n        const formData = new FormData();\n        formData.append('backupFile', file);\n\n        btnRestaurarBackup.disabled = true;\n        btnRestaurarBackup.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Restaurando...';\n\n        try {\n            const response = await fetch('/api/backup/restore', {\n                method: 'POST',\n                body: formData\n            });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso!', result.message, 'success');\n            setTimeout(() => window.location.reload(), 2000);\n        } catch (error) {\n            showToast('Erro na Restauração', error.message, 'danger');\n            btnRestaurarBackup.disabled = false;\n            btnRestaurarBackup.innerHTML = '<i class=\"bi bi-upload me-2\"></i>Restaurar';\n        }\n    });\n    \n    carregarInfoBackup();\n}\n","size_bytes":15193},"public/js/app.js":{"content":"// =================================================================\n// IMPORTS E CONFIGURAÇÃO DE PÁGINAS\n// =================================================================\nimport { initAdminPage } from './pages/admin.js';\nimport { initConsultaPage } from './pages/consulta.js';\nimport { initGerenciarLojasPage } from './pages/gerenciar-lojas.js';\nimport { initDemandasPage } from './pages/demandas.js';\nimport { initAssistenciaPage } from './pages/assistencia.js';\nimport { initAlertasTecnicoPage } from './pages/alertas-tecnico.js';\nimport { initNovoRelatorioPage } from './pages/novo-relatorio.js';\nimport { initGerenciarUsuariosPage } from './pages/gerenciar-usuarios.js';\nimport { initLogsPage } from './pages/logs.js';\nimport { initPageAnimations, initScrollAnimations } from './utils.js';\n\nconst pageInitializers = {\n    'admin': initAdminPage,\n    'consulta': initConsultaPage,\n    'gerenciar-lojas': initGerenciarLojasPage,\n    'demandas': initDemandasPage,\n    'assistencia': initAssistenciaPage,\n    'alertas-tecnico': initAlertasTecnicoPage,\n    'novo-relatorio': initNovoRelatorioPage,\n    'gerenciar-usuarios': initGerenciarUsuariosPage,\n    'logs': initLogsPage\n};\n\nlet currentUser = null;\n\n// =================================================================\n// LÓGICA DE NAVEGAÇÃO E CARREGAMENTO DE PÁGINAS\n// =================================================================\nasync function loadPage(path) {\n    const pageContent = document.getElementById('page-content');\n    if (!pageContent) return;\n\n    // Definir página padrão baseada no role\n    let defaultPage = 'admin';\n    if (currentUser && currentUser.role === 'tecnico') {\n        defaultPage = 'alertas-tecnico';\n    }\n    \n    const pageName = (path.startsWith('/') ? path.substring(1) : path).split('?')[0] || defaultPage;\n    const activePage = (pageName === '' || pageName === 'index.html') ? defaultPage : pageName;\n\n    // Atualiza a classe 'active' nos menus (desktop e mobile)\n    document.querySelectorAll('.sidebar-nav .nav-item').forEach(item => {\n        const link = item.querySelector('.nav-link');\n        const linkHrefPage = link.getAttribute('href').substring(1);\n        item.classList.toggle('active', linkHrefPage === activePage);\n    });\n\n    pageContent.innerHTML = '<div class=\"d-flex justify-content-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n\n    try {\n        const response = await fetch(`/content/${activePage}`);\n        if (!response.ok) throw new Error(`Página /content/${activePage} não encontrada.`);\n\n        pageContent.innerHTML = await response.text();\n        \n        // Inicializar animações de scroll para os novos elementos\n        setTimeout(() => initScrollAnimations(), 50);\n        \n        // Garante que a função de inicialização da página seja chamada\n        const initFunc = pageInitializers[activePage];\n        if (typeof initFunc === 'function') {\n           \n            setTimeout(() => {\n                try {\n                    \n                    initFunc(currentUser);\n                } catch (err) {\n                    console.error(`Erro ao inicializar a página '${activePage}':`, err);\n                }\n            }, 0);\n        }\n    } catch (error) {\n        console.error(\"Erro ao carregar página:\", error);\n        pageContent.innerHTML = `<div class=\"p-3 text-center text-danger\"><h3>Oops!</h3><p>Erro ao carregar conteúdo da página.</p></div>`;\n    }\n}\n\nfunction navigateTo(path) {\n    if (location.pathname + location.search === path) return;\n    history.pushState(null, '', path);\n    loadPage(path);\n}\n\n// =================================================================\n// SESSÃO E INICIALIZAÇÃO PRINCIPAL\n// =================================================================\nasync function setupSessionAndUI() {\n    try {\n        const response = await fetch('/api/session-info');\n        if (!response.ok) { window.location.href = '/login'; return; }\n        currentUser = await response.json();\n        window.currentUser = currentUser; // Expor para outras páginas\n        const permissions = currentUser.permissions || {};\n        \n        // Controlar visibilidade dos itens do menu baseado nas permissões\n        const menuVisibility = {\n            'nav-alertas': permissions['alertas-tecnico'] || false,\n            'nav-dashboard': permissions.dashboard || false,\n            'nav-consulta': permissions.consulta || false,\n            'nav-novo-relatorio': permissions['novo-relatorio'] || false,\n            'nav-lojas': permissions.lojas || false,\n            'nav-demandas': permissions.demandas || false,\n            'nav-assistencia': permissions.assistencia || false,\n            'nav-configuracoes': permissions['gerenciar-usuarios'] || false,\n            'nav-gerenciar-usuarios': permissions['gerenciar-usuarios'] || false,\n            'nav-logs': permissions.logs || false\n        };\n        \n        // Aplicar visibilidade\n        Object.keys(menuVisibility).forEach(menuId => {\n            document.querySelectorAll(`#${menuId}`).forEach(el => {\n                if (menuVisibility[menuId]) {\n                    el?.classList.remove('d-none');\n                } else {\n                    el?.classList.add('d-none');\n                }\n            });\n        });\n        \n        const userInfoContainer = document.getElementById('user-info-container');\n        if (userInfoContainer) {\n            let actionButtons = '';\n            \n            // Botão Novo Relatório apenas para monitoramento, admin e dev\n            if (['monitoramento', 'admin', 'dev'].includes(currentUser.role)) {\n                actionButtons += `<a href=\"/novo-relatorio\" id=\"live-mode-btn\" class=\"btn\" title=\"Novo Relatório\"><i class=\"bi bi-broadcast\"></i></a>`;\n            }\n            \n            // Botão de configurações para admin e dev\n            if (permissions['gerenciar-usuarios']) {\n                actionButtons += `<a href=\"/gerenciar-usuarios\" class=\"btn\" title=\"Configurações\"><i class=\"bi bi-gear-fill\"></i></a>`;\n            }\n            \n            // Botão de logs apenas para dev\n            if (permissions.logs) {\n                actionButtons += `<a href=\"/logs\" class=\"btn\" title=\"Logs do Sistema\"><i class=\"bi bi-file-earmark-text\"></i></a>`;\n            }\n\n            userInfoContainer.innerHTML = `\n                <div class=\"user-info\">\n                    <span>Olá, <strong>${currentUser.username}</strong></span>\n                    <small class=\"d-block user-role-${currentUser.role}\">${getRoleDisplayName(currentUser.role)}</small>\n                </div>\n                <div class=\"user-actions\">\n                    ${actionButtons}\n                    <a href=\"/logout\" class=\"btn\" title=\"Sair\"><i class=\"bi bi-box-arrow-right\"></i></a>\n                </div>`;\n        }\n    } catch (e) { console.error(\"Falha na sessão:\", e); window.location.href = '/login'; }\n}\n\nfunction getRoleDisplayName(role) {\n    const roleNames = {\n        'gerente': 'Gerente',\n        'consultor': 'Consultor',\n        'monitoramento': 'Monitoramento',\n        'admin': 'Administrador',\n        'dev': 'Desenvolvedor'\n    };\n    return roleNames[role] || role;\n}\n\n// =================================================================\n// CONTROLE DE SIDEBAR TOGGLE\n// =================================================================\nfunction initSidebarToggle() {\n    const sidebar = document.querySelector('.sidebar-desktop');\n    const mainContent = document.querySelector('.main-content');\n    const toggleBtn = document.getElementById('sidebar-toggle');\n    const showBtn = document.getElementById('sidebar-show-btn');\n    \n    if (!sidebar || !mainContent || !toggleBtn || !showBtn) return;\n    \n    // Carregar estado salvo do localStorage\n    const sidebarHidden = localStorage.getItem('sidebarHidden') === 'true';\n    \n    if (sidebarHidden) {\n        sidebar.classList.add('sidebar-hidden');\n        mainContent.classList.add('sidebar-hidden');\n        showBtn.classList.add('visible');\n    }\n    \n    // Toggle sidebar ao clicar no botão de ocultar\n    toggleBtn.addEventListener('click', () => {\n        const isHidden = sidebar.classList.toggle('sidebar-hidden');\n        mainContent.classList.toggle('sidebar-hidden');\n        \n        if (isHidden) {\n            showBtn.classList.add('visible');\n            localStorage.setItem('sidebarHidden', 'true');\n        } else {\n            showBtn.classList.remove('visible');\n            localStorage.setItem('sidebarHidden', 'false');\n        }\n    });\n    \n    // Mostrar sidebar ao clicar no botão flutuante\n    showBtn.addEventListener('click', () => {\n        sidebar.classList.remove('sidebar-hidden');\n        mainContent.classList.remove('sidebar-hidden');\n        showBtn.classList.remove('visible');\n        localStorage.setItem('sidebarHidden', 'false');\n    });\n}\n\nasync function main() {\n    await setupSessionAndUI();\n    \n    // Inicializar animações globais da página\n    initPageAnimations();\n    \n    // Inicializar controle de sidebar toggle\n    initSidebarToggle();\n    \n    // Redirecionar técnico para alertas se estiver na home\n    if (currentUser && currentUser.role === 'tecnico') {\n        const currentPath = location.pathname;\n        if (currentPath === '/' || currentPath === '/admin' || currentPath === '/dashboard') {\n            history.replaceState(null, '', '/alertas-tecnico');\n        }\n    }\n    \n    const mobileMenuModalEl = document.getElementById('mobileMenuModal');\n    const mobileMenuModal = mobileMenuModalEl ? new bootstrap.Modal(mobileMenuModalEl) : null;\n\n    document.body.addEventListener('click', e => {\n        const navLink = e.target.closest('a.nav-link');\n        if (navLink && navLink.closest('.sidebar-nav')) {\n            e.preventDefault();\n            const destination = navLink.getAttribute('href');\n            \n            if (navLink.closest('#mobileMenuModal')) {\n                mobileMenuModalEl.addEventListener('hidden.bs.modal', () => {\n                    navigateTo(destination);\n                }, { once: true });\n                if (mobileMenuModal) mobileMenuModal.hide();\n            } else {\n                navigateTo(destination);\n            }\n        }\n    });\n\n    window.addEventListener('popstate', () => loadPage(location.pathname + location.search));\n    loadPage(location.pathname + location.search);\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\n\n// =================================================================\n// FUNÇÕES DE UTILIDADE GLOBAIS\n// =================================================================\nexport function showToast(title, message, type = 'success') {\n    const toastEl = document.getElementById('notificationToast');\n    if (!toastEl) return;\n    const toast = bootstrap.Toast.getOrCreateInstance(toastEl);\n    \n    toastEl.querySelector('#toast-title').textContent = title;\n    toastEl.querySelector('#toast-body').textContent = message;\n    const toastHeader = toastEl.querySelector('.toast-header');\n    toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info');\n    if (type === 'success') toastHeader.classList.add('bg-success');\n    else if (type === 'danger') toastHeader.classList.add('bg-danger');\n    else toastHeader.classList.add('bg-info');\n    \n    toast.show();\n}\n\nexport function showConfirmModal(message) {\n    return new Promise((resolve) => {\n        const confirmModalEl = document.getElementById('confirmModal');\n        if (!confirmModalEl) { resolve(window.confirm(message)); return; }\n\n        const confirmModal = bootstrap.Modal.getOrCreateInstance(confirmModalEl);\n        confirmModalEl.querySelector('#confirmModalBody').textContent = message;\n\n        const btnYes = confirmModalEl.querySelector('#confirm-btn-yes');\n        const btnNo = confirmModalEl.querySelector('#confirm-btn-no');\n\n        const onYesClick = () => resolve(true);\n        const onNoClick = () => resolve(false);\n\n        btnYes.addEventListener('click', onYesClick, { once: true });\n        btnNo.addEventListener('click', onNoClick, { once: true });\n        \n        // Garante que se o modal for fechado de outra forma, ele resolve como 'false'\n        confirmModalEl.addEventListener('hidden.bs.modal', () => resolve(false), { once: true });\n\n        confirmModal.show();\n    });\n}","size_bytes":12347},"public/js/pages/demandas.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initDemandasPage() {\n    const containerPendentes = document.getElementById('demandas-pendentes-container');\n    const containerHistorico = document.getElementById('demandas-historico-container');\n    const abas = document.querySelectorAll('#demandasTab .nav-link');\n    const modalDemandaEl = document.getElementById('modal-add-demanda');\n    \n    // ===== A MUDANÇA ESTÁ AQUI =====\n    // Trocamos 'page-content' pelo nosso novo wrapper específico da página.\n    const demandasWrapper = document.getElementById('demandas-page-wrapper');\n    // ===============================\n\n    if (!modalDemandaEl || !demandasWrapper) return; // Adicionada verificação para o wrapper\n\n    const modalDemanda = new bootstrap.Modal(modalDemandaEl);\n    const formDemanda = document.getElementById('form-add-demanda');\n    const selectLojaModal = document.getElementById('demanda-loja');\n\n    async function carregarLojasNoModal() {\n        try {\n            const response = await fetch('/api/lojas?status=ativa');\n            const lojas = await response.json();\n            selectLojaModal.innerHTML = '<option value=\"\" selected disabled>Selecione uma loja</option>';\n            lojas.forEach(loja => {\n                selectLojaModal.add(new Option(loja.nome, loja.nome));\n            });\n        } catch (error) {\n            console.error(\"Falha ao carregar lojas:\", error);\n        }\n    }\n\n    async function carregarDemandas(tipo) {\n        const container = tipo === 'pendentes' ? containerPendentes : containerHistorico;\n        const url = `/api/demandas/${tipo}`;\n        if (!container) return;\n\n        container.innerHTML = '<p class=\"text-center\">Carregando...</p>';\n        try {\n            const response = await fetch(url);\n            const demandas = await response.json();\n            if (demandas.length === 0) {\n                container.innerHTML = '<p class=\"text-center text-muted\">Nenhuma demanda encontrada.</p>';\n                return;\n            }\n\n            const userRole = window.currentUser?.role;\n            const podeExcluir = ['admin', 'dev', 'monitoramento', 'consultor'].includes(userRole);\n            \n            container.innerHTML = demandas.map(d => {\n                const tagCores = { 'Urgente': 'bg-danger', 'Alta': 'bg-warning text-dark', 'Normal': 'bg-info text-dark', 'Baixa': 'bg-secondary' };\n                let acoesHtml = '';\n                \n                if (tipo === 'pendentes') {\n                    const btnExcluir = podeExcluir ? `<button class=\"btn btn-sm btn-danger\" data-action=\"excluir\" data-id=\"${d.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>` : '';\n                    acoesHtml = `<div class=\"d-flex justify-content-end mt-2\"><button class=\"btn btn-sm btn-success me-2\" data-action=\"concluir\" data-id=\"${d.id}\" title=\"Concluir\"><i class=\"bi bi-check-lg\"></i></button>${btnExcluir}</div>`;\n                } else if (tipo === 'historico') {\n                    if (podeExcluir) {\n                        acoesHtml = `<div class=\"d-flex justify-content-end mt-2\"><button class=\"btn btn-sm btn-danger\" data-action=\"excluir\" data-id=\"${d.id}\" title=\"Excluir do Histórico\"><i class=\"bi bi-trash\"></i></button></div>`;\n                    }\n                }\n                const footerHtml = tipo === 'pendentes' ? `Criado por <strong>${d.criado_por_usuario}</strong> em ${new Date(d.criado_em).toLocaleDateString('pt-BR')}` : `Concluído por <strong>${d.concluido_por_usuario || 'N/A'}</strong> em ${new Date(d.concluido_em).toLocaleDateString('pt-BR')}`;\n\n                return `<div class=\"card mb-3\"><div class=\"card-body\"><div class=\"d-flex justify-content-between align-items-start\"><div><h5 class=\"card-title mb-1\">${d.loja_nome}</h5><p class=\"card-text mb-0\">${d.descricao}</p></div><span class=\"badge ${tagCores[d.tag] || 'bg-light text-dark'}\">${d.tag}</span></div>${acoesHtml}</div><div class=\"card-footer text-muted small\">${footerHtml}</div></div>`;\n            }).join('');\n        } catch (e) {\n            container.innerHTML = '<p class=\"text-center text-danger\">Erro ao carregar demandas.</p>';\n        }\n    }\n\n    formDemanda.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const data = Object.fromEntries(new FormData(e.target).entries());\n        if (!data.loja_nome) {\n            showToast('Atenção', 'Selecione uma loja.', 'danger');\n            return;\n        }\n        try {\n            const response = await fetch('/api/demandas', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            if (!response.ok) throw new Error('Falha ao adicionar demanda.');\n            modalDemanda.hide();\n            e.target.reset();\n            showToast('Sucesso', 'Demanda adicionada.', 'success');\n            carregarDemandas('pendentes');\n        } catch (error) {\n            showToast('Erro', error.message, 'danger');\n        }\n    });\n\n    abas.forEach(aba => {\n        aba.addEventListener('shown.bs.tab', (event) => {\n            const targetId = event.target.getAttribute('data-bs-target');\n            // A lógica para carregar o histórico estava errada, corrigido para 'historico'\n            if (targetId === '#pendentes') carregarDemandas('pendentes');\n            else if (targetId === '#historico') carregarDemandas('historico'); // CORREÇÃO LÓGICA\n        });\n    });\n\n    // ===== A MUDANÇA ESTÁ AQUI =====\n    // O ouvinte agora está no nosso wrapper, isolado do resto do app.\n    demandasWrapper.addEventListener('click', async (e) => {\n        const button = e.target.closest('button[data-action]');\n        // A verificação de containeres ainda é uma boa prática\n        if (!button || !button.closest('#demandas-pendentes-container, #demandas-historico-container')) return;\n\n        const id = button.dataset.id;\n        const action = button.dataset.action;\n        const isPendente = !!button.closest('#demandas-pendentes-container');\n\n        if (action === 'concluir') {\n            const confirmed = await showConfirmModal('Marcar esta demanda como concluída?');\n            if (!confirmed) return;\n            try {\n                const response = await fetch(`/api/demandas/${id}/concluir`, { method: 'PUT' });\n                if (!response.ok) throw new Error('Falha ao concluir demanda.');\n                showToast('Sucesso', 'Demanda movida para o histórico.', 'info');\n                carregarDemandas('pendentes');\n            } catch (e) { showToast('Erro', 'Não foi possível concluir.', 'danger'); }\n        }\n\n        if (action === 'excluir') {\n            const confirmed = await showConfirmModal('EXCLUIR PERMANENTEMENTE esta demanda?');\n            if (!confirmed) return;\n            try {\n                const response = await fetch(`/api/demandas/${id}`, { method: 'DELETE' });\n                if (!response.ok) throw new Error('Falha ao excluir demanda.');\n                showToast('Sucesso', 'Demanda excluída.', 'success');\n                // A lógica para recarregar o histórico estava errada, corrigido.\n                if (isPendente) carregarDemandas('pendentes');\n                else carregarDemandas('historico'); // CORREÇÃO LÓGICA\n            } catch (e) { showToast('Erro', 'Não foi possível excluir.', 'danger'); }\n        }\n    });\n\n    carregarLojasNoModal();\n    carregarDemandas('pendentes');\n}","size_bytes":7448},"DASHBOARD_IMPROVEMENTS.md":{"content":"# Melhorias no Dashboard - Sistema de Relatórios de Lojas\n\n## 📊 Resumo das Melhorias Implementadas\n\nO dashboard foi completamente renovado com novos gráficos comparativos, melhor organização visual e cards informativos. Todas as melhorias mantêm o padrão visual do sistema.\n\n---\n\n## 🎨 Alterações Implementadas\n\n### 1. **Estrutura e Layout Aprimorados**\n\n#### ✅ Correções de Espaçamento\n- **Classes de Gap Consistentes**: Utilizado `g-3` (gap de 1rem) em todos os `.row` para espaçamento uniforme\n- **Margins Bottom**: Adicionado `mb-4` em sections para separação clara entre blocos\n- **Min-height em Comparações**: Adicionado `min-height: 20px` nos elementos de comparação para evitar saltos visuais\n- **Responsividade**: Grid Bootstrap otimizado (`col-12`, `col-sm-6`, `col-lg-3`, etc.)\n\n#### ✅ Alinhamento de Botões\n- **Botões de Período**: Agora usam `btn-outline-secondary` com estados de hover/active melhorados\n- **Botões de Formulário**: Classe `btn-sm` para tamanho consistente\n- **Selects**: Classe `form-select-sm` para alinhamento vertical perfeito\n\n#### ✅ Ícones Adicionados\nTodos os títulos e labels agora incluem ícones Bootstrap Icons:\n- `<i class=\"bi bi-shop\">` - Lojas\n- `<i class=\"bi bi-calendar3\">` - Calendário\n- `<i class=\"bi bi-speedometer2\">` - Visão Geral\n- `<i class=\"bi bi-bar-chart-line\">` - Métricas\n- `<i class=\"bi bi-graph-up\">` - Análise Comparativa\n- `<i class=\"bi bi-trophy\">` - Melhor Loja\n- E muitos outros...\n\n---\n\n### 2. **Novos Cards de Visão Geral** ⭐ NOVO\n\nSeção completamente nova no topo do dashboard com 4 cards informativos:\n\n```html\n<h4 class=\"mb-3\"><i class=\"bi bi-speedometer2\"></i> Visão Geral</h4>\n<div class=\"row g-3 mb-4\">\n    <!-- 4 cards com métricas -->\n</div>\n```\n\n#### Cards Implementados:\n\n1. **Total de Lojas Ativas**\n   - Ícone: `bi-building` (laranja)\n   - Mostra: Quantidade de lojas ativas no período\n   - Fonte de dados: `rankingData.length`\n\n2. **Melhor Loja (Conv.)**\n   - Ícone: `bi-trophy` (dourado)\n   - Mostra: Nome da loja com maior taxa de conversão\n   - Fonte de dados: Ranking ordenado por `tx_loja`\n\n3. **Média de Conversão**\n   - Ícone: `bi-graph-up-arrow` (verde)\n   - Mostra: Média da taxa de conversão de todas as lojas\n   - Cálculo: Soma de `tx_loja` / número de lojas\n\n4. **Total de Vendas**\n   - Ícone: `bi-cart-check` (laranja)\n   - Mostra: Total de vendas do período selecionado\n   - Fonte de dados: `currentData.total_vendas_loja`\n\n---\n\n### 3. **Gráfico de Barras Comparativo** ⭐ NOVO\n\nLocalização: Logo após os cards de métricas principais\n\n#### Características:\n- **Tipo**: Gráfico de barras vertical (Chart.js)\n- **Dimensões**: 8 colunas (col-lg-8) com 400px de altura\n- **Canvas ID**: `dashboard-bar-chart`\n\n#### Funcionalidades:\n- **Seletor de Métrica**: Dropdown para alternar entre:\n  - Vendas (padrão) - Cor laranja (`--accent-color`)\n  - Clientes - Cor verde (`--color-success`)\n  - Taxa de Conversão - Cor azul (`#4169E1`)\n  \n- **Top 10 Lojas**: Mostra as 10 melhores lojas na métrica selecionada\n- **Tooltips**: Formatação em português com separadores de milhar\n- **Responsivo**: Ajusta-se automaticamente ao tamanho da tela\n\n#### Código JavaScript:\n```javascript\nfunction renderBarChart(rankingData) {\n    // Ordena por métrica selecionada\n    // Pega top 10\n    // Renderiza com cores dinâmicas baseadas na métrica\n}\n```\n\n---\n\n### 4. **Gráfico Donut de Conversão** ⭐ NOVO\n\nLocalização: Ao lado do gráfico de barras (col-lg-4)\n\n#### Características:\n- **Tipo**: Gráfico Donut (Chart.js)\n- **Dimensões**: 4 colunas com 400px de altura\n- **Canvas ID**: `dashboard-donut-chart`\n\n#### Funcionalidades:\n- **Top 5 Lojas**: Mostra as 5 lojas com melhor taxa de conversão\n- **Cores Personalizadas**:\n  ```javascript\n  const colors = [\n      '#FF6384', // Rosa\n      '#36A2EB', // Azul\n      '#FFCE56', // Amarelo\n      '#4BC0C0', // Ciano\n      '#9966FF'  // Roxo\n  ];\n  ```\n- **Legenda**: Posicionada na parte inferior\n- **Tooltips**: Mostra taxa de conversão com 2 casas decimais\n\n#### Código JavaScript:\n```javascript\nfunction renderDonutChart(rankingData) {\n    // Ordena por tx_loja\n    // Pega top 5\n    // Renderiza donut com cores personalizadas\n}\n```\n\n---\n\n### 5. **Gráfico de Ranking Horizontal** ⭐ NOVO\n\nLocalização: Seção de Ranking, ao lado da tabela\n\n#### Características:\n- **Tipo**: Barra horizontal (Chart.js com `indexAxis: 'y'`)\n- **Dimensões**: 6 colunas com 450px de altura\n- **Canvas ID**: `dashboard-ranking-chart`\n\n#### Funcionalidades:\n- **Top 10 Lojas**: Ordenadas por taxa de conversão\n- **Cores Dinâmicas por Desempenho**:\n  ```javascript\n  backgroundColor: function(context) {\n      const value = context.parsed.x;\n      if (value >= 70) return '#2ea043';     // Verde (excelente)\n      if (value >= 50) return '--accent-color'; // Laranja (bom)\n      return '#dc3545';                       // Vermelho (precisa melhorar)\n  }\n  ```\n- **Escala**: 0% a 100% com labels formatados\n- **Ordem Invertida**: Do menor para o maior (top para bottom)\n\n#### Código JavaScript:\n```javascript\nfunction renderRankingChart(rankingData) {\n    // Ordena e inverte (.reverse())\n    // Aplica cores condicionais\n    // Renderiza horizontal\n}\n```\n\n---\n\n### 6. **Melhorias na Tabela de Ranking**\n\n#### Alterações:\n- **Medalhas**: Primeiros 3 lugares ganham emojis 🥇🥈🥉\n- **Sticky Header**: Cabeçalho fixo ao fazer scroll (`position: sticky`)\n- **Max-height**: 500px com scroll automático\n- **Hover Effects**: Destaque ao passar o mouse sobre linhas\n\n#### Código Atualizado:\n```javascript\nconst medal = index === 0 ? '🥇' : \n              index === 1 ? '🥈' : \n              index === 2 ? '🥉' : \n              `#${index + 1}`;\n```\n\n---\n\n## 📁 Arquivos Modificados\n\n### 1. `views/admin.html`\n**Tamanho**: ~220 linhas (antes: ~149)\n\n**Principais Mudanças**:\n- ✅ Adicionada seção \"Visão Geral\" com 4 cards\n- ✅ Reorganizada estrutura com headings `<h4>` separando seções\n- ✅ Adicionados 3 novos canvas para gráficos\n- ✅ Melhorado layout responsivo com `g-3` consistente\n- ✅ Ícones Bootstrap adicionados em todos os títulos\n- ✅ Min-height em elementos de comparação para evitar layout shift\n\n### 2. `public/js/pages/admin.js`\n**Tamanho**: ~520 linhas (antes: ~261)\n\n**Principais Mudanças**:\n- ✅ Adicionadas 3 novas variáveis globais de gráficos\n- ✅ Função `renderBarChart()` - Gráfico de barras comparativo\n- ✅ Função `renderDonutChart()` - Gráfico donut\n- ✅ Função `renderRankingChart()` - Gráfico horizontal\n- ✅ Função `updateOverviewCards()` - Atualiza cards de visão geral\n- ✅ Event listener para `bar-chart-metric-select`\n- ✅ Loading state estendido para todos os gráficos\n\n---\n\n## 🔧 Como Testar\n\n### 1. Fazer Login\n```\nUsuário: admin\nSenha: admin\n```\n\n### 2. Acessar o Dashboard\n- Clique em \"Dashboard\" no menu lateral\n- Ou acesse diretamente: `http://localhost:5000/admin`\n\n### 3. Testar Funcionalidades\n\n#### a) Filtros\n- Selecione diferentes lojas\n- Teste períodos rápidos (Hoje, 7 dias, Este Mês, Mês Passado)\n- Use o período manual com datas customizadas\n- Alterne entre \"Período Anterior\" e \"Ano Anterior\"\n\n#### b) Gráficos\n- **Gráfico de Barras**: Alterne entre Vendas, Clientes e Conversão\n- **Gráfico Donut**: Visualize a distribuição das top 5 lojas\n- **Gráfico Horizontal**: Veja o ranking visual com cores\n- **Gráfico de Linha**: Acompanhe a evolução temporal\n\n#### c) Ranking\n- **Tabela**: Use o select para ordenar por diferentes métricas\n- **Top 3**: Verifique os emojis de medalha\n- **Scroll**: Role a tabela se houver muitas lojas\n\n---\n\n## 🎨 Personalização de Ícones\n\nTodos os ícones foram adicionados como placeholders usando Bootstrap Icons. Para substituir por ícones personalizados:\n\n### Onde estão os ícones:\n\n1. **HTML** (`views/admin.html`):\n```html\n<!-- Exemplo -->\n<i class=\"bi bi-shop\"></i>\n<i class=\"bi bi-calendar3\"></i>\n<i class=\"bi bi-speedometer2\"></i>\n```\n\n2. **Como Substituir**:\n- **Opção 1**: Manter Bootstrap Icons e trocar apenas a classe\n  ```html\n  <i class=\"bi bi-shop\"></i>  →  <i class=\"bi bi-house-fill\"></i>\n  ```\n\n- **Opção 2**: Usar Font Awesome\n  ```html\n  <i class=\"bi bi-shop\"></i>  →  <i class=\"fas fa-store\"></i>\n  ```\n\n- **Opção 3**: Usar SVG customizado\n  ```html\n  <i class=\"bi bi-shop\"></i>  →  <img src=\"/icons/custom-shop.svg\" alt=\"Shop\" style=\"width: 20px;\">\n  ```\n\n### Lista de Ícones Usados:\n| Contexto | Ícone Atual | Classe |\n|----------|-------------|--------|\n| Lojas | 🏪 | `bi-shop` |\n| Calendário | 📅 | `bi-calendar3` |\n| Período | 📆 | `bi-calendar-range` |\n| Comparar | ⇄ | `bi-arrow-left-right` |\n| Pesquisar | 🔍 | `bi-search` |\n| Dashboard | 🎛️ | `bi-speedometer2` |\n| Prédio | 🏢 | `bi-building` |\n| Troféu | 🏆 | `bi-trophy` |\n| Gráfico | 📈 | `bi-graph-up-arrow` |\n| Carrinho | 🛒 | `bi-cart-check` |\n| Monitor | 🖥️ | `bi-display` |\n| Loja | 🏪 | `bi-shop` |\n| Barras | 📊 | `bi-bar-chart-fill` |\n| Pizza | 🥧 | `bi-pie-chart-fill` |\n| Lista | 📋 | `bi-list-ol` |\n| Medalha | 🏅 | `bi-award-fill` |\n\n---\n\n## 📊 Dados Utilizados\n\n### APIs Consumidas:\n1. **`/api/dashboard-data`**: Métricas agregadas (clientes, vendas, conversão)\n2. **`/api/ranking`**: Lista de todas as lojas com suas métricas\n3. **`/api/dashboard/chart-data`**: Dados temporais para gráfico de linha\n4. **`/api/lojas?status=ativa`**: Lista de lojas ativas\n\n### Estrutura de Dados Esperada:\n\n#### Dashboard Data:\n```json\n{\n    \"total_clientes_monitoramento\": 1500,\n    \"total_vendas_monitoramento\": 320,\n    \"total_omni\": 45,\n    \"tx_conversao_monitoramento\": 24.33,\n    \"total_clientes_loja\": 1480,\n    \"total_vendas_loja\": 310,\n    \"tx_conversao_loja\": 20.95\n}\n```\n\n#### Ranking Data:\n```json\n[\n    {\n        \"loja\": \"Loja Shopping Center\",\n        \"total_clientes_loja\": 450,\n        \"total_vendas_loja\": 120,\n        \"tx_loja\": 26.67,\n        \"total_clientes_monitoramento\": 460,\n        \"total_vendas_monitoramento\": 125,\n        \"tx_monitoramento\": 27.17,\n        \"total_omni\": 5\n    }\n]\n```\n\n---\n\n## 🐛 Possíveis Problemas e Soluções\n\n### Problema 1: Gráficos não aparecem\n**Causa**: Chart.js pode não estar carregado\n**Solução**: Verificar se o CDN do Chart.js está incluído no HTML base\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n```\n\n### Problema 2: Erro \"Erro ao analisar dados\"\n**Causa**: Banco de dados vazio (sem relatórios)\n**Solução**: Criar lojas e relatórios de teste primeiro\n1. Ir em \"Gerenciar Lojas\" e criar lojas\n2. Ir em \"Novo Relatório\" e criar alguns relatórios\n3. Voltar ao Dashboard\n\n### Problema 3: Layout quebrado em mobile\n**Causa**: Classes responsivas do Bootstrap\n**Solução**: Já implementado com `col-12`, `col-sm-6`, `col-lg-3`, etc.\n\n### Problema 4: Cores dos gráficos não aparecem\n**Causa**: Variáveis CSS não definidas\n**Solução**: Verificar em `public/css/style.css`:\n```css\n:root {\n    --accent-color: #ff7b00;\n    --color-success: #2ea043;\n    --main-bg: #1A1A1D;\n}\n```\n\n---\n\n## 📝 Checklist de Implementação\n\n- ✅ Cards de Visão Geral (4 cards)\n- ✅ Gráfico de Barras Comparativo\n- ✅ Gráfico Donut de Conversão\n- ✅ Gráfico Horizontal de Ranking\n- ✅ Melhorias na Tabela de Ranking\n- ✅ Ícones em todos os títulos\n- ✅ Espaçamento consistente (gap-3)\n- ✅ Responsividade mobile/desktop\n- ✅ Tooltips com comparações\n- ✅ Medalhas para top 3\n- ✅ Event listeners para selects\n- ✅ Loading states para todos os gráficos\n- ✅ Formatação de números em pt-BR\n- ✅ Cores dinâmicas baseadas em desempenho\n\n---\n\n## 🚀 Próximos Passos Sugeridos\n\n1. **Exportação de Gráficos**: Adicionar botão para baixar gráficos como PNG\n2. **Filtro de Período Customizado**: Adicionar comparação \"Semana Anterior\", \"Trimestre\"\n3. **Alertas de Performance**: Destacar lojas com queda de conversão\n4. **Gráfico de Tendências**: Adicionar previsão de vendas com ML\n5. **Dashboard em Tempo Real**: WebSocket para atualização automática\n6. **Temas**: Modo claro/escuro\n7. **Animações**: Transições suaves ao trocar gráficos\n\n---\n\n## 📞 Suporte\n\nSe tiver dúvidas ou problemas:\n1. Verifique os logs do console do navegador (F12)\n2. Verifique os logs do servidor\n3. Confirme que há dados no banco de dados\n4. Teste com dados mockados temporariamente\n\n---\n\n**Desenvolvido em**: Outubro 2025  \n**Tecnologias**: Node.js, Express, SQLite, Chart.js 4.x, Bootstrap 5, Bootstrap Icons\n","size_bytes":12523},"middleware/roleAuth.js":{"content":"/**\n * Middleware de Autorização baseado em Roles\n * Sistema de controle de acesso para diferentes tipos de usuários\n */\n\n// Definição de roles disponíveis no sistema\nconst ROLES = {\n    DEV: 'dev',\n    ADMIN: 'admin',\n    MONITORAMENTO: 'monitoramento',\n    CONSULTOR: 'consultor',\n    GERENTE: 'gerente',\n    TECNICO: 'tecnico'\n};\n\n// Definição de permissões por role\nconst PERMISSIONS = {\n    [ROLES.DEV]: {\n        canAccessAllData: true,\n        canManageUsers: true,\n        canManageLojas: true,\n        canCreateReports: true,\n        canViewLogs: true,\n        canAccessDemandas: true,\n        canExportData: true,\n        canManageAssistencia: true,\n        canManageEstoque: true,\n        menuItems: ['dashboard', 'consulta', 'novo-relatorio', 'lojas', 'demandas', 'assistencia', 'gerenciar-usuarios', 'logs', 'backup']\n    },\n    [ROLES.ADMIN]: {\n        canAccessAllData: true,\n        canManageUsers: true,\n        canManageLojas: true,\n        canCreateReports: true,\n        canViewLogs: false,\n        canAccessDemandas: true,\n        canExportData: true,\n        canManageAssistencia: true,\n        canManageEstoque: true,\n        menuItems: ['dashboard', 'consulta', 'novo-relatorio', 'lojas', 'demandas', 'assistencia', 'gerenciar-usuarios']\n    },\n    [ROLES.MONITORAMENTO]: {\n        canAccessAllData: true,\n        canManageUsers: false,\n        canManageLojas: false,\n        canCreateReports: true,\n        canViewLogs: false,\n        canAccessDemandas: true,\n        canExportData: true,\n        canViewAssistencia: true,\n        menuItems: ['dashboard', 'consulta', 'novo-relatorio', 'lojas', 'demandas', 'assistencia']\n    },\n    [ROLES.CONSULTOR]: {\n        canAccessAllData: false,\n        canManageUsers: false,\n        canManageLojas: false,\n        canCreateReports: false,\n        canViewLogs: false,\n        canAccessDemandas: true,\n        canExportData: true,\n        canManageVendedores: true,\n        canViewAssistencia: true,\n        canDeleteConcluidas: true,\n        menuItems: ['dashboard', 'consulta', 'lojas', 'demandas', 'assistencia']\n    },\n    [ROLES.GERENTE]: {\n        canAccessAllData: false,\n        canManageUsers: false,\n        canManageLojas: false,\n        canCreateReports: false,\n        canViewLogs: false,\n        canAccessDemandas: true,\n        canExportData: false,\n        canManageVendedores: true,\n        canViewAssistencia: true,\n        canDeleteConcluidas: true,\n        menuItems: ['dashboard', 'lojas', 'demandas', 'assistencia']  // Removido 'consulta' - gerente não acessa relatórios de monitoramento\n    },\n    [ROLES.TECNICO]: {\n        canAccessAllData: false,\n        canManageUsers: false,\n        canManageLojas: false,\n        canCreateReports: false,\n        canViewLogs: false,\n        canAccessDemandas: false,\n        canExportData: false,\n        canManageAssistencia: true,\n        canManageEstoque: true,\n        menuItems: ['alertas-tecnico', 'assistencia']\n    }\n};\n\n/**\n * Middleware para verificar se o usuário tem um dos roles permitidos\n * @param {Array<string>} allowedRoles - Array de roles permitidos\n */\nfunction requireRole(allowedRoles) {\n    return (req, res, next) => {\n        if (!req.session || !req.session.role) {\n            return res.status(401).json({ error: 'Não autenticado.' });\n        }\n\n        if (allowedRoles.includes(req.session.role)) {\n            return next();\n        }\n\n        return res.status(403).json({ error: 'Acesso negado. Permissões insuficientes.' });\n    };\n}\n\n/**\n * Middleware para verificar se usuário pode acessar dados de uma loja específica\n */\nfunction canAccessLoja(db) {\n    return (req, res, next) => {\n        const userRole = req.session.role;\n        const userId = req.session.userId;\n        \n        // Dev e Admin têm acesso total\n        if (userRole === ROLES.DEV || userRole === ROLES.ADMIN || userRole === ROLES.MONITORAMENTO) {\n            return next();\n        }\n\n        // Gerente e Consultor precisam verificar vínculos\n        const lojaNome = req.query.loja || req.body.loja || req.params.loja;\n        \n        if (!lojaNome) {\n            // Se não especificou loja, deixa passar - será filtrado depois\n            return next();\n        }\n\n        // Buscar vínculos do usuário\n        db.get('SELECT loja_gerente, lojas_consultor FROM usuarios WHERE id = ?', [userId], (err, user) => {\n            if (err || !user) {\n                return res.status(500).json({ error: 'Erro ao verificar permissões.' });\n            }\n\n            let hasAccess = false;\n\n            if (userRole === ROLES.GERENTE && user.loja_gerente === lojaNome) {\n                hasAccess = true;\n            } else if (userRole === ROLES.CONSULTOR && user.lojas_consultor) {\n                const lojas = user.lojas_consultor.split(',').map(l => l.trim());\n                hasAccess = lojas.includes(lojaNome);\n            }\n\n            if (hasAccess) {\n                return next();\n            } else {\n                return res.status(403).json({ error: 'Acesso negado a esta loja.' });\n            }\n        });\n    };\n}\n\n/**\n * Retorna filtro SQL baseado no role do usuário\n */\nfunction getLojaFilter(role, loja_gerente, lojas_consultor, loja_tecnico) {\n    // Se não tem role, trata como admin (compatibilidade com sessões antigas)\n    if (!role) {\n        return null;\n    }\n\n    // Dev, Admin e Monitoramento veem tudo\n    if (role === ROLES.DEV || role === ROLES.ADMIN || role === ROLES.MONITORAMENTO) {\n        return null;\n    }\n\n    // Gerente - filtrar por uma loja\n    if (role === ROLES.GERENTE && loja_gerente) {\n        return {\n            clause: 'TRIM(loja) = ?',\n            params: [loja_gerente.trim()]\n        };\n    }\n\n    // Consultor - filtrar por múltiplas lojas\n    if (role === ROLES.CONSULTOR && lojas_consultor) {\n        const lojas = lojas_consultor.split(',').map(l => l.trim()).filter(l => l);\n        if (lojas.length > 0) {\n            const placeholders = lojas.map(() => '?').join(',');\n            return {\n                clause: `TRIM(loja) IN (${placeholders})`,\n                params: lojas\n            };\n        }\n    }\n\n    // Técnico - filtrar por uma loja\n    if (role === ROLES.TECNICO && loja_tecnico) {\n        return {\n            clause: 'TRIM(loja) = ?',\n            params: [loja_tecnico.trim()]\n        };\n    }\n\n    // Sem acesso\n    return null;\n}\n\n/**\n * Retorna permissões do role no formato esperado pelo frontend\n */\nfunction getPermissions(role) {\n    const rolePermissions = PERMISSIONS[role] || PERMISSIONS[ROLES.GERENTE];\n    \n    // Converter menuItems array para objeto com propriedades individuais\n    const menuPermissions = {};\n    rolePermissions.menuItems.forEach(item => {\n        menuPermissions[item] = true;\n    });\n    \n    return {\n        ...rolePermissions,\n        ...menuPermissions\n    };\n}\n\n/**\n * Middleware para verificar se usuário pode acessar uma página\n */\nfunction requirePage(allowedMenuItems) {\n    return (req, res, next) => {\n        if (!req.session || !req.session.role) {\n            return res.redirect('/login');\n        }\n\n        const permissions = getPermissions(req.session.role);\n        const hasAccess = allowedMenuItems.some(item => permissions.menuItems.includes(item));\n\n        if (hasAccess) {\n            return next();\n        }\n\n        return res.redirect('/403');\n    };\n}\n\nmodule.exports = {\n    ROLES,\n    PERMISSIONS,\n    requireRole,\n    canAccessLoja,\n    getLojaFilter,\n    getPermissions,\n    requirePage\n};\n","size_bytes":7520},"RESUMO_MELHORIAS.md":{"content":"# ✨ Resumo das Melhorias no Dashboard\n\n## 🎯 O que foi feito?\n\nSeu dashboard agora está **muito mais completo e visual**! Adicionei novos gráficos comparativos, cards informativos e corrigi todos os problemas de espaçamento e alinhamento.\n\n---\n\n## 📊 Novidades Visuais\n\n### 1. Cards de Visão Geral (Novo!)\nNo topo do dashboard, 4 cards mostram:\n- 🏢 **Total de Lojas Ativas**\n- 🏆 **Melhor Loja** (com taxa de conversão)\n- 📈 **Média de Conversão** de todas as lojas\n- 🛒 **Total de Vendas** do período\n\n### 2. Gráfico de Barras Comparativo (Novo!)\n- Compare lojas por **Vendas**, **Clientes** ou **Conversão**\n- Mostra as **top 10 lojas**\n- Selector interativo para trocar a métrica\n\n### 3. Gráfico Donut (Novo!)\n- Visualização em pizza das **top 5 lojas**\n- Mostra distribuição de taxa de conversão\n- Cores vibrantes e legenda na parte inferior\n\n### 4. Gráfico de Ranking Horizontal (Novo!)\n- **Barras horizontais** ordenadas por conversão\n- Cores dinâmicas:\n  - 🟢 Verde: Conversão ≥ 70% (excelente!)\n  - 🟠 Laranja: Conversão ≥ 50% (bom)\n  - 🔴 Vermelho: Conversão < 50% (precisa melhorar)\n- Top 10 lojas mais performáticas\n\n### 5. Melhorias na Tabela de Ranking\n- 🥇🥈🥉 **Medalhas** para os 3 primeiros lugares\n- **Cabeçalho fixo** ao fazer scroll\n- **Hover effects** nas linhas\n\n---\n\n## 🔧 Correções de Layout\n\n✅ **Espaçamento consistente** entre todos os elementos  \n✅ **Botões alinhados** perfeitamente  \n✅ **Ícones adicionados** em todos os títulos e labels  \n✅ **Grid responsivo** funciona perfeitamente em mobile  \n✅ **Min-height** em comparações evita elementos \"pulando\"  \n\n---\n\n## 🎨 Ícones Incluídos\n\nTodos os ícones são **placeholders** do Bootstrap Icons. Você pode facilmente substituir por ícones customizados se quiser!\n\nExemplos de ícones adicionados:\n- 🏪 Lojas\n- 📅 Calendário  \n- 🎛️ Dashboard\n- 📊 Gráficos\n- 🏆 Ranking\n- 🛒 Vendas\n- E muitos mais...\n\n---\n\n## 🚀 Como Testar\n\n1. **Faça login** com `admin` / `admin`\n2. **Clique em \"Dashboard\"** no menu\n3. **Crie algumas lojas** em \"Gerenciar Lojas\" (se ainda não tiver)\n4. **Adicione relatórios** em \"Novo Relatório\"\n5. **Volte ao Dashboard** e veja tudo funcionando!\n\n### Funcionalidades para Testar:\n- ✅ Filtros de período (Hoje, 7 dias, Este Mês, etc.)\n- ✅ Seletor de loja\n- ✅ Comparação com período anterior/ano anterior\n- ✅ Troca de métrica no gráfico de barras\n- ✅ Ordenação da tabela de ranking\n- ✅ Todas as visualizações de gráficos\n\n---\n\n## 📁 Arquivos Modificados\n\n1. **`views/admin.html`** - Estrutura HTML do dashboard\n2. **`public/js/pages/admin.js`** - Lógica JavaScript e gráficos\n3. **`DASHBOARD_IMPROVEMENTS.md`** - Documentação técnica completa\n\n---\n\n## 📚 Documentação Completa\n\nPara detalhes técnicos completos, veja o arquivo:\n**`DASHBOARD_IMPROVEMENTS.md`**\n\nEle contém:\n- Código de exemplo de cada gráfico\n- Como personalizar ícones\n- Estrutura de dados das APIs\n- Troubleshooting de problemas comuns\n- Sugestões de próximos passos\n\n---\n\n## 💡 Dica Importante\n\nSe ao acessar o dashboard aparecer \"Erro ao analisar dados\", significa que o banco está vazio. Basta:\n1. Criar algumas lojas em \"Gerenciar Lojas\"\n2. Adicionar relatórios em \"Novo Relatório\"  \n3. Voltar ao Dashboard\n\nOs gráficos irão popular automaticamente com os dados reais!\n\n---\n\n**Pronto! Seu dashboard está muito mais completo e profissional! 🎉**\n","size_bytes":3472}},"version":2}