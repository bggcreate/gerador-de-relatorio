{"file_contents":{"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/consulta.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nlet eventController;\n\nexport function initConsultaPage() {\n    const formFiltros = document.getElementById('form-filtros-consulta');\n    const tableBody = document.getElementById('tabela-relatorios-corpo');\n    const filtroLoja = document.getElementById('filtro-loja');\n    const filtroInicio = document.getElementById('filtro-data-inicio');\n    const filtroFim = document.getElementById('filtro-data-fim');\n    // ADICIONADO: Seleção do novo filtro de ordem\n    const filtroOrdem = document.getElementById('filtro-ordem');\n    const btnLimpar = document.getElementById('btn-limpar-filtros');\n    const btnCarregarMais = document.getElementById('btn-carregar-mais');\n    const modalViewEl = document.getElementById('modal-visualizar-relatorio');\n    const pageContent = document.getElementById('page-content');\n\n    if (!formFiltros || !modalViewEl) return;\n    const modalView = new bootstrap.Modal(modalViewEl);\n\n    let currentOffset = 0;\n    const limit = 20;\n    let currentReportId = null;\n    let totalReportsCount = 0;\n\n    if (eventController) {\n        eventController.abort();\n    }\n    eventController = new AbortController();\n\n    async function carregarRelatorios(isNewSearch = true) {\n        if (isNewSearch) {\n            currentOffset = 0;\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        }\n        btnCarregarMais.disabled = true;\n        btnCarregarMais.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Carregando...';\n\n        const params = new URLSearchParams();\n        if (filtroLoja.value) params.append('loja', filtroLoja.value);\n        if (filtroInicio.value) params.append('data_inicio', filtroInicio.value);\n        if (filtroFim.value) params.append('data_fim', filtroFim.value);\n        // ADICIONADO: Envio do parâmetro de ordenação para a API\n        params.append('sortOrder', filtroOrdem.value);\n        params.append('limit', limit);\n        params.append('offset', currentOffset);\n\n        try {\n            const response = await fetch(`/api/relatorios?${params.toString()}`);\n            const { relatorios, total } = await response.json();\n\n            if (isNewSearch) {\n                totalReportsCount = total;\n            }\n\n            const formatCurrency = (value) => {\n                const numberValue = Number(value) || 0;\n                return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(numberValue);\n            };\n\n            const newRowsHtml = relatorios.map((r, index) => {\n                // ALTERAÇÃO: Lógica para criar um ID sequencial contínuo\n                const isDescending = filtroOrdem.value === 'desc';\n                const sequentialId = isDescending\n                    ? totalReportsCount - currentOffset - index\n                    : currentOffset + index + 1;\n\n                return `\n                    <tr>\n                        <td class=\"ps-3\">${sequentialId}</td>\n                        <td>${r.loja}</td>\n                        <td>${new Date(r.data).toLocaleDateString('pt-BR', {timeZone: 'UTC'})}</td>\n                        <td>${formatCurrency(r.total_vendas_dinheiro)}</td>\n                        <td class=\"text-end pe-3\">\n                            <div class=\"btn-group btn-group-sm\" role=\"group\">\n                                <button type=\"button\" class=\"btn btn-outline-primary\" data-action=\"visualizar\" data-id=\"${r.id}\" title=\"Visualizar\"><i class=\"bi bi-eye\"></i></button>\n                                <a href=\"/novo-relatorio?edit=${r.id}\" class=\"btn btn-outline-secondary\" title=\"Editar\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                <button type=\"button\" class=\"btn btn-outline-danger\" data-action=\"excluir\" data-id=\"${r.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>\n                            </div>\n                        </td>\n                    </tr>\n                `;\n            }).join('');\n\n            if (isNewSearch) {\n                tableBody.innerHTML = relatorios.length > 0 ? newRowsHtml : '<tr><td colspan=\"5\" class=\"text-center\">Nenhum relatório encontrado.</td></tr>';\n            } else {\n                tableBody.insertAdjacentHTML('beforeend', newRowsHtml);\n            }\n\n            currentOffset += relatorios.length;\n            btnCarregarMais.classList.toggle('d-none', currentOffset >= totalReportsCount);\n\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar relatórios.</td></tr>';\n        } finally {\n            btnCarregarMais.disabled = false;\n            btnCarregarMais.innerHTML = 'Carregar Mais Relatórios';\n        }\n    }\n\n    async function visualizarRelatorio(id) {\n        currentReportId = id;\n        const modalBody = document.getElementById('modal-body-content');\n        const modalLabel = document.getElementById('modal-visualizar-label');\n        modalLabel.textContent = `Carregando Relatório...`;\n        modalBody.innerHTML = '<div class=\"d-flex justify-content-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n        modalView.show();\n\n        try {\n            const response = await fetch(`/api/relatorios/${id}/pdf`);\n            if (!response.ok) throw new Error(\"Não foi possível gerar a visualização do PDF.\");\n            const fileBlob = await response.blob();\n            const fileURL = URL.createObjectURL(fileBlob);\n            modalLabel.textContent = `Visualizar Relatório #${id}`;\n            modalBody.innerHTML = `<iframe src=\"${fileURL}\" style=\"width: 100%; height: 70vh; border: none;\"></iframe>`;\n        } catch (e) {\n            modalBody.innerHTML = `<div class=\"p-3 text-center text-danger\"><h3>Oops!</h3><p>Não foi possível carregar a visualização.</p></div>`;\n            showToast('Erro', e.message, 'danger');\n        }\n    }\n\n    async function excluirRelatorio(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir o relatório #${id}?`);\n        if (!confirmed) return;\n        try {\n            const response = await fetch(`/api/relatorios/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir o relatório.');\n            showToast('Sucesso', 'Relatório excluído com sucesso.', 'success');\n            carregarRelatorios(true);\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir o relatório.', 'danger');\n        }\n    }\n\n    async function carregarLojasNoFiltro() {\n        try {\n            const response = await fetch('/api/lojas');\n            const lojas = await response.json();\n            filtroLoja.innerHTML = '<option value=\"\">Todas as Lojas</option>';\n            lojas.forEach(loja => filtroLoja.add(new Option(loja.nome, loja.nome)));\n        } catch (e) {\n            console.error(\"Erro ao carregar lojas:\", e);\n        }\n    }\n    \n    // --- Event Listeners ---\n    document.getElementById('btn-copiar-texto-modal')?.addEventListener('click', async () => {\n        if (!currentReportId) return;\n        try {\n            const response = await fetch(`/api/relatorios/${currentReportId}/txt`);\n            if (!response.ok) throw new Error(\"Falha ao buscar texto para cópia.\");\n            const textToCopy = await response.text();\n            await navigator.clipboard.writeText(textToCopy);\n            showToast('Sucesso!', 'Texto copiado.', 'success');\n        } catch (err) {\n            showToast('Erro', 'Não foi possível copiar o texto.', 'danger');\n        }\n    }, { signal: eventController.signal });\n\n    document.getElementById('btn-gerar-pdf-modal')?.addEventListener('click', () => {\n        if (!currentReportId) return;\n        window.open(`/api/relatorios/${currentReportId}/pdf`, '_blank');\n    }, { signal: eventController.signal });\n\n    formFiltros.addEventListener('submit', (e) => { e.preventDefault(); carregarRelatorios(true); }, { signal: eventController.signal });\n    \n    // ADICIONADO: Resetar o filtro de ordem ao limpar\n    btnLimpar.addEventListener('click', () => { \n        formFiltros.reset(); \n        filtroOrdem.value = 'desc'; // Garante que o padrão seja selecionado\n        carregarRelatorios(true); \n    }, { signal: eventController.signal });\n    \n    btnCarregarMais.addEventListener('click', () => carregarRelatorios(false), { signal: eventController.signal });\n\n    pageContent.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button || !button.closest('#tabela-relatorios-corpo')) return;\n        const id = button.dataset.id;\n        const action = button.dataset.action;\n        if (action === 'visualizar') visualizarRelatorio(id);\n        if (action === 'excluir') excluirRelatorio(id);\n    }, { signal: eventController.signal });\n    \n    // ADICIONADO: Event listener para o novo filtro de ordem\n    filtroOrdem.addEventListener('change', () => carregarRelatorios(true), { signal: eventController.signal });\n\n    const formExport = document.getElementById('form-export-excel');\n    const exportMonthSelect = document.getElementById('export-month');\n    const exportYearSelect = document.getElementById('export-year');\n    \n    if (exportYearSelect.options.length <= 1) {\n        const currentYear = new Date().getFullYear();\n        for (let i = 0; i < 5; i++) {\n            const year = currentYear - i;\n            exportYearSelect.add(new Option(year, year));\n        }\n    }\n    exportMonthSelect.value = new Date().getMonth() + 1;\n\n    formExport.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const btn = e.target.querySelector('button');\n        const originalText = btn.innerHTML;\n        btn.disabled = true;\n        btn.innerHTML = `<span class=\"spinner-border spinner-border-sm\"></span> Gerando...`;\n        \n        try {\n            const response = await fetch(`/api/export/excel?month=${exportMonthSelect.value}&year=${exportYearSelect.value}`);\n            if (response.ok) {\n                const blob = await response.blob();\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                const monthName = new Date(exportYearSelect.value, exportMonthSelect.value - 1).toLocaleString('pt-BR', { month: 'long' });\n                a.download = `Relatorios_${monthName}_${exportYearSelect.value}.xlsx`;\n                a.href = url;\n                a.click();\n                window.URL.revokeObjectURL(url);\n            } else {\n                const result = await response.json();\n                showToast(\"Erro ao Exportar\", result.error || \"Não foi possível gerar.\", \"danger\");\n            }\n        } catch (err) {\n            showToast(\"Erro\", \"Falha na exportação.\", \"danger\");\n        } finally {\n            btn.disabled = false;\n            btn.innerHTML = originalText;\n        }\n    }, { signal: eventController.signal });\n\n    carregarLojasNoFiltro().then(() => carregarRelatorios(true));\n}","size_bytes":11140},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/admin.js":{"content":"import { showToast } from '../utils.js';\n\n// --- Variáveis de Estado Globais no Módulo ---\nlet dashboardLineChart = null;\nlet lastRankingData = [];\n\n// --- Funções Auxiliares ---\nconst getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\nconst toISODateString = (date) => date.toISOString().split('T')[0];\n\nfunction setLoadingState(isLoading) {\n    const kpiElements = document.querySelectorAll('[id^=\"geral-\"], [id^=\"loja-\"]');\n    const chartCanvas = document.getElementById('dashboard-line-chart');\n    const rankingBody = document.getElementById('ranking-corpo-tabela');\n\n    if (isLoading) {\n        kpiElements.forEach(el => {\n            if (el.tagName === 'H2' || el.tagName === 'H3') {\n                el.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span>';\n            } else { el.innerHTML = ''; }\n        });\n        if (rankingBody) rankingBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></td></tr>';\n        if (dashboardLineChart) dashboardLineChart.destroy();\n        if (chartCanvas) chartCanvas.style.opacity = '0.5';\n    } else {\n        if (chartCanvas) chartCanvas.style.opacity = '1';\n    }\n}\n\nfunction getComparisonHtml(current, previous, unit = '') {\n    const currentNum = parseFloat(current);\n    const previousNum = parseFloat(previous);\n    if (isNaN(currentNum) || isNaN(previousNum)) return '';\n\n    if (previousNum === 0) return currentNum > 0 ? '<span class=\"text-success\">▲ Novo</span>' : '';\n    \n    const diff = ((currentNum - previousNum) / previousNum) * 100;\n    if (Math.abs(diff) < 0.1) return '';\n\n    const icon = diff > 0 ? '▲' : '▼';\n    const colorClass = diff > 0 ? 'text-success' : 'text-danger';\n    \n    const previousFormatted = unit === '%' ? previousNum.toFixed(2) : previousNum.toLocaleString('pt-BR');\n    const tooltipTitle = `Valor anterior: ${previousFormatted}${unit}`;\n\n    return `<span class=\"${colorClass}\" data-bs-toggle=\"tooltip\" data-bs-title=\"${tooltipTitle}\">${icon} ${diff.toFixed(1)}%</span>`;\n}\n\n// --- Funções de Renderização ---\nfunction renderRankingTable(rankingData) {\n    const rankingBody = document.getElementById('ranking-corpo-tabela');\n    const sortBy = document.getElementById('ranking-sort-select').value;\n    \n    const sortedData = [...rankingData].sort((a, b) => parseFloat(b[sortBy]) - parseFloat(a[sortBy]));\n\n    if (sortedData.length > 0) {\n        rankingBody.innerHTML = sortedData.map((loja, index) => `\n            <tr>\n                <td class=\"ps-3\"><b>#${index + 1}</b></td>\n                <td>${loja.loja}</td>\n                <td><b>${parseFloat(loja.tx_loja).toFixed(2)}%</b></td>\n                <td>${parseFloat(loja.tx_monitoramento).toFixed(2)}%</td>\n                <td>${loja.total_vendas_loja.toLocaleString('pt-BR')}</td>\n                <td>${loja.total_clientes_loja.toLocaleString('pt-BR')}</td>\n            </tr>\n        `).join('');\n    } else {\n        rankingBody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center p-4\">Nenhuma loja ativa encontrada.</td></tr>';\n    }\n}\n\nfunction renderLineChart(currentChartData, comparisonChartData) {\n    const ctx = document.getElementById('dashboard-line-chart').getContext('2d');\n    \n    const datasets = [\n        {\n            label: 'Tx. Conv. Loja (Atual)',\n            data: currentChartData.txConversaoLoja,\n            borderColor: getCssVar('--color-success'),\n            backgroundColor: getCssVar('--color-success') + '20',\n            fill: true, tension: 0.4, borderWidth: 2.5\n        },\n        {\n            label: 'Tx. Conv. Monit. (Atual)',\n            data: currentChartData.txConversaoMonitoramento,\n            borderColor: getCssVar('--accent-color'),\n            backgroundColor: getCssVar('--accent-color') + '20',\n            fill: true, tension: 0.4, borderWidth: 2.5\n        },\n        {\n            label: 'Tx. Conv. Loja (Comparado)',\n            data: comparisonChartData.txConversaoLoja,\n            borderColor: getCssVar('--color-success'),\n            borderDash: [5, 5], fill: false, tension: 0.4, borderWidth: 1.5\n        },\n        {\n            label: 'Tx. Conv. Monit. (Comparado)',\n            data: comparisonChartData.txConversaoMonitoramento,\n            borderColor: getCssVar('--accent-color'),\n            borderDash: [5, 5], fill: false, tension: 0.4, borderWidth: 1.5\n        }\n    ];\n    \n    if (dashboardLineChart) dashboardLineChart.destroy();\n    dashboardLineChart = new Chart(ctx, {\n        type: 'line',\n        data: { labels: currentChartData.labels, datasets: datasets },\n        options: {\n            responsive: true, maintainAspectRatio: false,\n            interaction: { mode: 'index', intersect: false },\n            plugins: { legend: { position: 'top' }, tooltip: { position: 'nearest' } },\n            scales: { y: { beginAtZero: true, ticks: { callback: (value) => value + '%' } } }\n        }\n    });\n}\n\nfunction updateUI(results) {\n    const [currentData, rankingData, currentChartData, comparisonData, comparisonChartData] = results;\n\n    document.getElementById('geral-clientes').textContent = currentData.total_clientes_monitoramento.toLocaleString('pt-BR');\n    document.getElementById('geral-vendas').textContent = (currentData.total_vendas_monitoramento + currentData.total_omni).toLocaleString('pt-BR');\n    document.getElementById('geral-tx-conversao').textContent = `${parseFloat(currentData.tx_conversao_monitoramento).toFixed(2)}%`;\n    document.getElementById('loja-clientes').textContent = currentData.total_clientes_loja.toLocaleString('pt-BR');\n    document.getElementById('loja-vendas').textContent = currentData.total_vendas_loja.toLocaleString('pt-BR');\n    document.getElementById('loja-tx-conversao').textContent = `${parseFloat(currentData.tx_conversao_loja).toFixed(2)}%`;\n\n    document.getElementById('geral-clientes-comp').innerHTML = getComparisonHtml(currentData.total_clientes_monitoramento, comparisonData.total_clientes_monitoramento);\n    document.getElementById('geral-vendas-comp').innerHTML = getComparisonHtml(currentData.total_vendas_monitoramento + currentData.total_omni, comparisonData.total_vendas_monitoramento + comparisonData.total_omni);\n    document.getElementById('geral-tx-conversao-comp').innerHTML = getComparisonHtml(currentData.tx_conversao_monitoramento, comparisonData.tx_conversao_monitoramento, '%');\n    document.getElementById('loja-clientes-comp').innerHTML = getComparisonHtml(currentData.total_clientes_loja, comparisonData.total_clientes_loja);\n    document.getElementById('loja-vendas-comp').innerHTML = getComparisonHtml(currentData.total_vendas_loja, comparisonData.total_vendas_loja);\n    document.getElementById('loja-tx-conversao-comp').innerHTML = getComparisonHtml(currentData.tx_conversao_loja, comparisonData.tx_conversao_loja, '%');\n\n    renderLineChart(currentChartData, comparisonChartData);\n    \n    lastRankingData = rankingData;\n    renderRankingTable(lastRankingData);\n\n    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]');\n    [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n}\n\n// --- Lógica Principal e Eventos ---\nexport function initAdminPage() {\n    const form = document.getElementById('form-filtros-dashboard');\n    if (!form) return;\n\n    const lojaSelect = document.getElementById('filtro-loja-dashboard');\n    const dataInicioInput = document.getElementById('filtro-data-inicio-dashboard');\n    const dataFimInput = document.getElementById('filtro-data-fim-dashboard');\n    const quickPeriodButtons = document.querySelectorAll('[data-period]');\n    const comparisonTypeSelect = document.getElementById('comparison-type-select');\n    const rankingSortSelect = document.getElementById('ranking-sort-select');\n\n    async function carregarLojas() {\n        try {\n            const response = await fetch('/api/lojas?status=ativa');\n            const lojas = await response.json();\n            lojas.forEach(loja => lojaSelect.add(new Option(loja.nome, loja.nome)));\n        } catch (error) { console.error('Falha ao carregar lojas', error); }\n    }\n    \n    function setDateRange(period) {\n        const hoje = new Date();\n        let inicio, fim = new Date(hoje);\n        switch (period) {\n            case 'hoje': inicio = hoje; break;\n            case '7d': inicio = new Date(); inicio.setDate(hoje.getDate() - 6); break;\n            case 'mes-atual': inicio = new Date(hoje.getFullYear(), hoje.getMonth(), 1); break;\n            case 'mes-passado':\n                inicio = new Date(hoje.getFullYear(), hoje.getMonth() - 1, 1);\n                fim = new Date(hoje.getFullYear(), hoje.getMonth(), 0);\n                break;\n        }\n        dataInicioInput.value = toISODateString(inicio);\n        dataFimInput.value = toISODateString(fim);\n    }\n\n    async function analisarDados(e) {\n        if(e) e.preventDefault();\n        setLoadingState(true);\n\n        const loja = lojaSelect.value;\n        const dataInicio = dataInicioInput.value;\n        const dataFim = dataFimInput.value;\n\n        if (!dataInicio || !dataFim) {\n            showToast(\"Atenção\", \"Por favor, selecione um período de datas.\", \"danger\");\n            setLoadingState(false);\n            return;\n        }\n        \n        const baseParams = { data_inicio: dataInicio, data_fim: dataFim };\n        if (loja !== 'todas') {\n            baseParams.loja = loja;\n        }\n\n        const currentParams = new URLSearchParams(baseParams);\n\n        const startDate = new Date(dataInicio + 'T00:00:00');\n        const endDate = new Date(dataFim + 'T00:00:00');\n        let compStartDate, compEndDate;\n        if (comparisonTypeSelect.value === 'ano-anterior') {\n            compStartDate = new Date(startDate); compStartDate.setFullYear(startDate.getFullYear() - 1);\n            compEndDate = new Date(endDate); compEndDate.setFullYear(endDate.getFullYear() - 1);\n        } else {\n            const diff = endDate.getTime() - startDate.getTime();\n            compEndDate = new Date(startDate.getTime() - 86400000);\n            compStartDate = new Date(compEndDate.getTime() - diff);\n        }\n        const compBaseParams = {...baseParams, data_inicio: toISODateString(compStartDate), data_fim: toISODateString(compEndDate) };\n        const comparisonParams = new URLSearchParams(compBaseParams);\n        \n        const apiCalls = [\n            fetch(`/api/dashboard-data?${currentParams.toString()}`),\n            fetch(`/api/ranking?${new URLSearchParams({ data_inicio: dataInicio, data_fim: dataFim })}`),\n            fetch(`/api/dashboard/chart-data?${currentParams.toString()}`),\n            fetch(`/api/dashboard-data?${comparisonParams.toString()}`),\n            fetch(`/api/dashboard/chart-data?${comparisonParams.toString()}`)\n        ];\n        \n        try {\n            const responses = await Promise.all(apiCalls);\n            const results = await Promise.all(responses.map(res => {\n                if(!res.ok) throw new Error(`Falha na API: ${res.status} ${res.statusText}`);\n                return res.json();\n            }));\n\n            updateUI(results);\n        } catch (error) {\n            console.error(\"Erro ao analisar dados:\", error);\n            showToast(\"Erro\", \"Não foi possível carregar os dados do dashboard.\", \"danger\");\n        } finally {\n            setLoadingState(false);\n        }\n    }\n    \n    form.addEventListener('submit', analisarDados);\n    \n    quickPeriodButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            quickPeriodButtons.forEach(btn => btn.classList.remove('active'));\n            e.currentTarget.classList.add('active');\n            setDateRange(e.currentTarget.dataset.period);\n        });\n    });\n\n    if (rankingSortSelect) {\n        rankingSortSelect.addEventListener('change', () => {\n            if (lastRankingData.length > 0) {\n                renderRankingTable(lastRankingData);\n            }\n        });\n    }\n\n    carregarLojas();\n    setDateRange('7d');\n    const initialActiveButton = document.querySelector('[data-period=\"7d\"]');\n    if(initialActiveButton) initialActiveButton.classList.add('active');\n    analisarDados();\n}","size_bytes":12240},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/novo-relatorio.js":{"content":"import { showToast } from '../utils.js';\n\nexport function initNovoRelatorioPage() {\n    const form = document.getElementById('form-novo-relatorio');\n    if (!form) return;\n\n    // --- Seleção de Elementos ---\n    const btnImportarPdf = document.getElementById(\"btn-importar-pdf\");\n    const pdfFileInput = document.getElementById(\"pdf-file-input\");\n    const btnSalvarTudo = document.getElementById(\"btn-salvar-tudo\");\n    const btnLimparFormulario = document.getElementById(\"btn-limpar-formulario\");\n    const btnAddVendedor = document.getElementById(\"btn-add-vendedor\");\n    const containerVendedores = document.getElementById(\"container-vendedores\");\n    const placeholderVendedores = document.getElementById(\"vendedores-placeholder\");\n    const lojaSelect = document.getElementById(\"loja\");\n    const dataInput = document.getElementById(\"data\");\n    const resultadosPdfContainer = document.getElementById('resultados-pdf-container');\n    const totalVendasDinheiroInput = form.querySelector('[name=\"total_vendas_dinheiro\"]');\n    const ticketMedioInput = form.querySelector('[name=\"ticket_medio\"]');\n    const paInput = form.querySelector('[name=\"pa\"]');\n    const clientesMonitoramentoInput = document.getElementById('clientes_monitoramento_input');\n    const vendasMonitoramentoInput = document.getElementById('vendas_monitoramento_input');\n    const clientesLojaInput = document.getElementById('clientes_loja_input');\n    const vendasLojaInput = document.getElementById('vendas_loja_input');\n    const omniInput = document.getElementById('quantidade_omni_input');\n    const monitoramentoDonutCanvas = document.getElementById('monitoramento-donut-chart');\n    const lojaDonutCanvas = document.getElementById('loja-donut-chart');\n    \n    // ADICIONADO: Selecionar os novos inputs de pagamento\n    const vendasCartaoInput = document.getElementById('vendas_cartao_input');\n    const vendasPixInput = document.getElementById('vendas_pix_input');\n    const vendasDinheiroInput = document.getElementById('vendas_dinheiro_input');\n    const vendasTotalPagamentoInput = document.getElementById('vendas_total_pagamento_input');\n\n    // --- Variáveis de Estado ---\n    let lojasCache = [];\n    const urlParams = new URLSearchParams(window.location.search);\n    const reportId = urlParams.get('edit');\n    let monitoramentoDonutChart = null;\n    let lojaDonutChart = null;\n    const DRAFT_KEY = 'draftRelatorio';\n\n    // --- Funções de Gerenciamento de Rascunho ---\n    function salvarRascunho() {\n        if (reportId) return;\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n        const nomes = formData.getAll('vendedor_nome');\n        const atendimentos = formData.getAll('vendedor_atendimentos');\n        const vendas = formData.getAll('vendedor_vendas');\n        data.vendedores = nomes.map((nome, index) => ({ nome: nome.trim(), atendimentos: atendimentos[index] || 0, vendas: vendas[index] || 0 }));\n        data.pdfSectionVisible = resultadosPdfContainer.style.display === 'block';\n        sessionStorage.setItem(DRAFT_KEY, JSON.stringify(data));\n    }\n\n    function carregarRascunho() {\n        if (reportId) return;\n        const draft = sessionStorage.getItem(DRAFT_KEY);\n        if (!draft) return;\n        const data = JSON.parse(draft);\n        for (const key in data) {\n            const input = form.querySelector(`[name=\"${key}\"]`);\n            if (input && key !== 'vendedores') input.value = data[key];\n        }\n        if (data.vendedores && Array.isArray(data.vendedores)) {\n            containerVendedores.innerHTML = '';\n            data.vendedores.forEach(vendedor => adicionarVendedor(vendedor));\n        }\n        if (data.pdfSectionVisible && resultadosPdfContainer) {\n            resultadosPdfContainer.style.display = 'block';\n        }\n        updateVendedoresPlaceholder();\n        handleSelecaoDeLoja();\n        calcularEAtualizarGraficos();\n        calcularTotalVendasPagamento(); // Adicionado para atualizar o total ao carregar rascunho\n        showToast(\"Rascunho Carregado\", \"Seu relatório não salvo foi restaurado.\", \"info\");\n    }\n\n    function limparRascunhoEFormulario() {\n        form.reset();\n        sessionStorage.removeItem(DRAFT_KEY);\n        const hoje = new Date();\n        const offset = hoje.getTimezoneOffset();\n        dataInput.value = new Date(hoje.getTime() - (offset * 60 * 1000)).toISOString().split('T')[0];\n        containerVendedores.innerHTML = '';\n        if(resultadosPdfContainer) resultadosPdfContainer.style.display = 'none';\n        updateVendedoresPlaceholder();\n        handleSelecaoDeLoja();\n        calcularEAtualizarGraficos();\n        calcularTotalVendasPagamento(); // Adicionado para resetar o total ao limpar\n        showToast(\"Formulário Limpo\", \"Todos os campos foram resetados.\", \"success\");\n    }\n\n    // --- Funções de UI e Lógica ---\n    const getCssVar = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();\n    \n    function renderDonutChart(canvas, percentage, color) {\n        if (!canvas) return null;\n        const textElement = document.getElementById(canvas.id.replace('chart', 'text'));\n        if (textElement) textElement.textContent = `${parseFloat(percentage).toFixed(1)}%`;\n        const data = { datasets: [{ data: [percentage, 100 - percentage > 0 ? 100 - percentage : 0], backgroundColor: [color, '#333333'], borderColor: getCssVar('--content-bg'), borderWidth: 3, cutout: '75%' }] };\n        const options = { responsive: true, maintainAspectRatio: true, plugins: { legend: { display: false }, tooltip: { enabled: false } } };\n        const ctx = canvas.getContext('2d');\n        if (canvas.chart) canvas.chart.destroy();\n        canvas.chart = new Chart(ctx, { type: 'doughnut', data, options });\n        return canvas.chart;\n    }\n\n    function updateDonutChart(chartInstance, percentage) {\n        if (!chartInstance) return;\n        const textElement = document.getElementById(chartInstance.canvas.id.replace('chart', 'text'));\n        if (textElement) textElement.textContent = `${parseFloat(percentage).toFixed(1)}%`;\n        chartInstance.data.datasets[0].data[0] = percentage;\n        chartInstance.data.datasets[0].data[1] = 100 - percentage > 0 ? 100 - percentage : 0;\n        chartInstance.update();\n    }\n    \n    // ADICIONADO: Nova função para somar os totais de pagamento\n    function calcularTotalVendasPagamento() {\n        const cartao = Number(vendasCartaoInput.value) || 0;\n        const pix = Number(vendasPixInput.value) || 0;\n        const dinheiro = Number(vendasDinheiroInput.value) || 0;\n        vendasTotalPagamentoInput.value = cartao + pix + dinheiro;\n    }\n\n    function calcularEAtualizarGraficos() {\n        const clientesM = Number(clientesMonitoramentoInput.value) || 0;\n        const vendasM = Number(vendasMonitoramentoInput.value) || 0;\n        const omni = omniInput ? (Number(omniInput.value) || 0) : 0;\n        const totalVendasM = vendasM + omni;\n        const txMonitoramento = clientesM > 0 ? (totalVendasM / clientesM) * 100 : 0;\n        updateDonutChart(monitoramentoDonutChart, txMonitoramento);\n        \n        const clientesL = Number(clientesLojaInput.value) || 0;\n        const vendasL = Number(vendasLojaInput.value) || 0;\n        const txLoja = clientesL > 0 ? (vendasL / clientesL) * 100 : 0;\n        updateDonutChart(lojaDonutChart, txLoja);\n    }\n\n    function updateVendedoresPlaceholder() { if(placeholderVendedores) placeholderVendedores.style.display = containerVendedores.children.length === 0 ? \"block\" : \"none\"; };\n    \n    async function carregarLojas() {\n        try {\n            const response = await fetch(\"/api/lojas\");\n            if (!response.ok) throw new Error('Falha ao carregar lojas.');\n            lojasCache = await response.json();\n            lojaSelect.innerHTML = '<option value=\"\" disabled selected>Selecione uma loja</option>';\n            const lojasFiltradas = reportId ? lojasCache : lojasCache.filter(l => l.status === 'ativa');\n            lojasFiltradas.forEach(l => lojaSelect.add(new Option(l.nome, l.nome)));\n        } catch (e) { console.error(\"Erro ao carregar lojas\", e); }\n    }\n    \n    function handleSelecaoDeLoja() {\n        const lojaSelecionada = lojasCache.find(loja => loja.nome === lojaSelect.value);\n        const containerEspecial = document.getElementById('container-funcao-especial');\n        const campoOmni = document.getElementById('campo-omni');\n        const campoBuscaAssist = document.getElementById('campo-busca-assist');\n\n        if(containerEspecial) containerEspecial.style.display = \"none\";\n        if(campoOmni) campoOmni.style.display = \"none\";\n        if(campoBuscaAssist) campoBuscaAssist.style.display = \"none\";\n\n        if (!lojaSelecionada || !lojaSelecionada.funcao_especial) {\n            calcularEAtualizarGraficos();\n            return;\n        }\n        containerEspecial.style.display = \"block\";\n        if (lojaSelecionada.funcao_especial === \"Omni\") campoOmni.style.display = \"block\";\n        else if (lojaSelecionada.funcao_especial === \"Busca por Assist. Tec.\") campoBuscaAssist.style.display = \"block\";\n        \n        calcularEAtualizarGraficos();\n    }\n    \n    function adicionarVendedor(vendedor = { nome: '', atendimentos: 0, vendas: 0 }) {\n        const div = document.createElement(\"div\");\n        div.className = \"input-group input-group-sm mb-2\";\n        div.innerHTML = `<input type=\"text\" class=\"form-control\" name=\"vendedor_nome\" placeholder=\"Nome do Vendedor\" value=\"${vendedor.nome||''}\" required><input type=\"number\" class=\"form-control\" name=\"vendedor_atendimentos\" value=\"${vendedor.atendimentos||0}\" min=\"0\" title=\"Atendimentos\"><input type=\"number\" class=\"form-control\" name=\"vendedor_vendas\" value=\"${vendedor.vendas||0}\" min=\"0\" title=\"Vendas\"><button type=\"button\" class=\"btn btn-outline-danger\" data-action=\"remover-vendedor\"><i class=\"bi bi-trash\"></i></button>`;\n        containerVendedores.appendChild(div);\n        updateVendedoresPlaceholder();\n    }\n    \n    async function carregarDadosParaEdicao() {\n        showToast(\"Modo de Edição\", \"Carregando dados do relatório...\", \"info\");\n        await carregarLojas();\n        try {\n            const response = await fetch(`/api/relatorios/${reportId}`);\n            if (!response.ok) throw new Error('Relatório não encontrado.');\n            const { relatorio } = await response.json();\n\n            if(resultadosPdfContainer && relatorio.total_vendas_dinheiro && parseFloat(String(relatorio.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) > 0) {\n                resultadosPdfContainer.style.display = 'block';\n            }\n            \n            const vendedores = JSON.parse(relatorio.vendedores||'[]');\n            for (const key in relatorio) { \n                const input = form.querySelector(`[name=\"${key}\"]`); \n                if (input) input.value = relatorio[key]; \n            }\n            containerVendedores.innerHTML = '';\n            vendedores.forEach(vend => adicionarVendedor(vend));\n            \n            updateVendedoresPlaceholder();\n            handleSelecaoDeLoja();\n            btnSalvarTudo.textContent = 'SALVAR ALTERAÇÕES';\n            calcularEAtualizarGraficos();\n            calcularTotalVendasPagamento(); // Adicionado para calcular o total ao carregar para edição\n        } catch(e) { showToast(\"Erro\", \"Não foi possível carregar os dados para edição.\", \"danger\"); }\n    }\n    \n    async function handleSalvarTudo() {\n        if (!form.checkValidity()) { \n            form.reportValidity(); \n            showToast(\"Campos Inválidos\", \"Por favor, preencha todos os campos obrigatórios.\", \"danger\");\n            return;\n        }\n        \n        const fd = new FormData(form);\n        const data = Object.fromEntries(fd.entries());\n        const n = fd.getAll('vendedor_nome'), a = fd.getAll('vendedor_atendimentos'), v = fd.getAll('vendedor_vendas');\n        data.vendedores = JSON.stringify(n.map((nome, i) => ({ nome: nome.trim(), atendimentos: parseInt(a[i],10)||0, vendas: parseInt(v[i],10)||0 })).filter(vend => vend.nome));\n        \n        const method = reportId ? 'PUT' : 'POST';\n        const url = reportId ? `/api/relatorios/${reportId}` : '/api/relatorios';\n        \n        btnSalvarTudo.disabled = true;\n        btnSalvarTudo.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Salvando...';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Erro desconhecido ao salvar.');\n            showToast('Sucesso!', reportId ? 'Relatório atualizado com sucesso!' : 'Relatório salvo com sucesso!', 'success');\n            \n            if (reportId) {\n                setTimeout(() => window.location.href = '/consulta', 1000);\n            } else {\n                limparRascunhoEFormulario();\n            }\n        } catch (e) {\n            showToast('Falha ao Salvar', e.message, 'danger');\n        } finally {\n            btnSalvarTudo.disabled = false;\n            btnSalvarTudo.textContent = reportId ? 'SALVAR ALTERAÇÕES' : 'SALVAR RELATÓRIO COMPLETO';\n        }\n    }\n    \n    // --- Lógica de Importação de PDF ---\n    btnImportarPdf.addEventListener('click', () => pdfFileInput.click());\n    pdfFileInput.addEventListener('change', async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        btnImportarPdf.disabled = true;\n        btnImportarPdf.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Processando...';\n\n        try {\n            const formData = new FormData();\n            formData.append('pdfFile', file);\n            const response = await fetch('/api/process-pdf', { method: 'POST', body: formData });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error || 'Erro ao processar PDF.');\n            \n            const { data: extractedData } = result;\n            \n            // PREENCHIMENTO EXPLÍCITO CORRIGIDO\n            if (extractedData.total_vendas_dinheiro) totalVendasDinheiroInput.value = extractedData.total_vendas_dinheiro;\n            if (extractedData.ticket_medio) ticketMedioInput.value = extractedData.ticket_medio;\n            if (extractedData.pa) paInput.value = extractedData.pa;\n            if (extractedData.data) dataInput.value = extractedData.data;\n            if (extractedData.loja) {\n                const storeExists = Array.from(lojaSelect.options).some(option => option.text.trim().toUpperCase() === extractedData.loja.trim().toUpperCase());\n                if (storeExists) {\n                    lojaSelect.value = Array.from(lojaSelect.options).find(option => option.text.trim().toUpperCase() === extractedData.loja.trim().toUpperCase()).value;\n                } else {\n                    showToast(\"Atenção\", `A loja \"${extractedData.loja}\" do PDF não foi encontrada no sistema.`, \"danger\");\n                }\n            }\n            containerVendedores.innerHTML = '';\n            if (extractedData.vendedores && extractedData.vendedores.length > 0) {\n                extractedData.vendedores.forEach(vendedor => adicionarVendedor(vendedor));\n            }\n            \n            if(resultadosPdfContainer) resultadosPdfContainer.style.display = 'block';\n            \n            // ATUALIZAÇÃO DA UI\n            updateVendedoresPlaceholder();\n            handleSelecaoDeLoja();\n            calcularEAtualizarGraficos();\n            salvarRascunho();\n            showToast(\"Sucesso!\", \"Dados do PDF importados com sucesso.\", \"success\");\n\n        } catch (error) {\n            showToast(\"Erro na Importação\", error.message, \"danger\");\n        } finally {\n            btnImportarPdf.disabled = false;\n            btnImportarPdf.innerHTML = '<i class=\"bi bi-file-earmark-arrow-up-fill me-2\"></i>Importar de PDF';\n            pdfFileInput.value = '';\n        }\n    });\n\n    // --- Inicialização dos Event Listeners ---\n    btnAddVendedor.addEventListener(\"click\", () => adicionarVendedor());\n    btnSalvarTudo.addEventListener(\"click\", handleSalvarTudo);\n    btnLimparFormulario.addEventListener(\"click\", limparRascunhoEFormulario);\n    lojaSelect.addEventListener(\"change\", handleSelecaoDeLoja);\n\n    form.addEventListener('input', () => {\n        calcularEAtualizarGraficos();\n        salvarRascunho();\n    });\n\n    // ADICIONADO: Event listeners para os novos campos de pagamento\n    vendasCartaoInput.addEventListener('input', calcularTotalVendasPagamento);\n    vendasPixInput.addEventListener('input', calcularTotalVendasPagamento);\n    vendasDinheiroInput.addEventListener('input', calcularTotalVendasPagamento);\n\n    containerVendedores.addEventListener(\"click\", e => {\n        if (e.target.closest('button[data-action=\"remover-vendedor\"]')) {\n            e.target.closest(\".input-group\").remove();\n            updateVendedoresPlaceholder();\n            salvarRascunho();\n        }\n    });\n\n    // --- Lógica de Inicialização da Página ---\n    monitoramentoDonutChart = renderDonutChart(monitoramentoDonutCanvas, 0, getCssVar('--accent-color'));\n    lojaDonutChart = renderDonutChart(lojaDonutCanvas, 0, getCssVar('--color-success'));\n\n    if (reportId) {\n        document.querySelector('h4.mb-0').textContent = 'Editar Relatório Existente';\n        carregarDadosParaEdicao();\n    } else {\n        carregarLojas();\n        updateVendedoresPlaceholder();\n        carregarRascunho();\n    }\n}","size_bytes":17636},"monitoramento-lojas-varejo-main/create-relatorio/public/js/app.js":{"content":"// =================================================================\n// IMPORTS E CONFIGURAÇÃO DE PÁGINAS\n// =================================================================\nimport { initAdminPage } from './pages/admin.js';\nimport { initConsultaPage } from './pages/consulta.js';\nimport { initGerenciarLojasPage } from './pages/gerenciar-lojas.js';\nimport { initDemandasPage } from './pages/demandas.js';\nimport { initNovoRelatorioPage } from './pages/novo-relatorio.js';\nimport { initGerenciarUsuariosPage } from './pages/gerenciar-usuarios.js';\n\nconst pageInitializers = {\n    'admin': initAdminPage,\n    'consulta': initConsultaPage,\n    'gerenciar-lojas': initGerenciarLojasPage,\n    'demandas': initDemandasPage,\n    'novo-relatorio': initNovoRelatorioPage,\n    // A página gerenciar-usuarios carrega o conteúdo de usuários e backup\n    'gerenciar-usuarios': initGerenciarUsuariosPage \n};\n\nlet currentUser = null;\n\n// =================================================================\n// LÓGICA DE NAVEGAÇÃO E CARREGAMENTO DE PÁGINAS\n// =================================================================\nasync function loadPage(path) {\n    const pageContent = document.getElementById('page-content');\n    if (!pageContent) return;\n\n    const defaultPage = 'admin';\n    const pageName = (path.startsWith('/') ? path.substring(1) : path).split('?')[0] || defaultPage;\n    const activePage = (pageName === '' || pageName === 'index.html') ? defaultPage : pageName;\n\n    // Atualiza a classe 'active' nos menus (desktop e mobile)\n    document.querySelectorAll('.sidebar-nav .nav-item').forEach(item => {\n        const link = item.querySelector('.nav-link');\n        const linkHrefPage = link.getAttribute('href').substring(1);\n        item.classList.toggle('active', linkHrefPage === activePage);\n    });\n\n    pageContent.innerHTML = '<div class=\"d-flex justify-content-center p-5\"><div class=\"spinner-border\" role=\"status\"></div></div>';\n\n    try {\n        const response = await fetch(`/content/${activePage}`);\n        if (!response.ok) throw new Error(`Página /content/${activePage} não encontrada.`);\n\n        pageContent.innerHTML = await response.text();\n        \n        // Garante que a função de inicialização da página seja chamada\n        const initFunc = pageInitializers[activePage];\n        if (typeof initFunc === 'function') {\n           \n            setTimeout(() => {\n                try {\n                    \n                    initFunc(currentUser);\n                } catch (err) {\n                    console.error(`Erro ao inicializar a página '${activePage}':`, err);\n                }\n            }, 0);\n        }\n    } catch (error) {\n        console.error(\"Erro ao carregar página:\", error);\n        pageContent.innerHTML = `<div class=\"p-3 text-center text-danger\"><h3>Oops!</h3><p>Erro ao carregar conteúdo da página.</p></div>`;\n    }\n}\n\nfunction navigateTo(path) {\n    if (location.pathname + location.search === path) return;\n    history.pushState(null, '', path);\n    loadPage(path);\n}\n\n// =================================================================\n// SESSÃO E INICIALIZAÇÃO PRINCIPAL\n// =================================================================\nasync function setupSessionAndUI() {\n    try {\n        const response = await fetch('/api/session-info');\n        if (!response.ok) { window.location.href = '/login'; return; }\n        currentUser = await response.json();\n        const userInfoContainer = document.getElementById('user-info-container');\n        if (userInfoContainer) {\n            let adminButtons = '';\n            // Mostra os links de admin se o usuário for admin\n            if (currentUser.role === 'admin') {\n                document.querySelectorAll('#nav-gerenciar').forEach(el => el?.classList.remove('d-none'));\n                 // A página de gerenciar usuários é acessada pelo link \"Lojas\", mas o botão fica no footer.\n                adminButtons = `<a href=\"/gerenciar-usuarios\" class=\"btn\" title=\"Configurações\"><i class=\"bi bi-gear-fill\"></i></a>`;\n            }\n            // Mostra o link de demandas para todos\n            document.querySelectorAll('#nav-demandas').forEach(el => el?.classList.remove('d-none'));\n\n            userInfoContainer.innerHTML = `<div class=\"user-info\"><span>Olá, <strong>${currentUser.username}</strong></span></div><div class=\"user-actions\"><a href=\"/live\" id=\"live-mode-btn\" class=\"btn\" title=\"Modo Live\"><i class=\"bi bi-broadcast\"></i></a>${adminButtons}<a href=\"/logout\" class=\"btn\" title=\"Sair\"><i class=\"bi bi-box-arrow-right\"></i></a></div>`;\n            \n            document.getElementById('live-mode-btn')?.addEventListener('click', (e) => {\n                e.preventDefault();\n                window.open(e.currentTarget.href, 'live-window', 'width=550,height=850,scrollbars=yes,resizable=yes');\n            });\n        }\n    } catch (e) { console.error(\"Falha na sessão:\", e); window.location.href = '/login'; }\n}\n\nasync function main() {\n    await setupSessionAndUI();\n    const mobileMenuModalEl = document.getElementById('mobileMenuModal');\n    const mobileMenuModal = mobileMenuModalEl ? new bootstrap.Modal(mobileMenuModalEl) : null;\n\n    document.body.addEventListener('click', e => {\n        const navLink = e.target.closest('a.nav-link');\n        if (navLink && navLink.closest('.sidebar-nav')) {\n            e.preventDefault();\n            const destination = navLink.getAttribute('href');\n            \n            if (navLink.closest('#mobileMenuModal')) {\n                mobileMenuModalEl.addEventListener('hidden.bs.modal', () => {\n                    navigateTo(destination);\n                }, { once: true });\n                if (mobileMenuModal) mobileMenuModal.hide();\n            } else {\n                navigateTo(destination);\n            }\n        }\n    });\n\n    window.addEventListener('popstate', () => loadPage(location.pathname + location.search));\n    loadPage(location.pathname + location.search);\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\n\n// =================================================================\n// FUNÇÕES DE UTILIDADE GLOBAIS\n// =================================================================\nexport function showToast(title, message, type = 'success') {\n    const toastEl = document.getElementById('notificationToast');\n    if (!toastEl) return;\n    const toast = bootstrap.Toast.getOrCreateInstance(toastEl);\n    \n    toastEl.querySelector('#toast-title').textContent = title;\n    toastEl.querySelector('#toast-body').textContent = message;\n    const toastHeader = toastEl.querySelector('.toast-header');\n    toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info');\n    if (type === 'success') toastHeader.classList.add('bg-success');\n    else if (type === 'danger') toastHeader.classList.add('bg-danger');\n    else toastHeader.classList.add('bg-info');\n    \n    toast.show();\n}\n\nexport function showConfirmModal(message) {\n    return new Promise((resolve) => {\n        const confirmModalEl = document.getElementById('confirmModal');\n        if (!confirmModalEl) { resolve(window.confirm(message)); return; }\n\n        const confirmModal = bootstrap.Modal.getOrCreateInstance(confirmModalEl);\n        confirmModalEl.querySelector('#confirmModalBody').textContent = message;\n\n        const btnYes = confirmModalEl.querySelector('#confirm-btn-yes');\n        const btnNo = confirmModalEl.querySelector('#confirm-btn-no');\n\n        const onYesClick = () => resolve(true);\n        const onNoClick = () => resolve(false);\n\n        btnYes.addEventListener('click', onYesClick, { once: true });\n        btnNo.addEventListener('click', onNoClick, { once: true });\n        \n        // Garante que se o modal for fechado de outra forma, ele resolve como 'false'\n        confirmModalEl.addEventListener('hidden.bs.modal', () => resolve(false), { once: true });\n\n        confirmModal.show();\n    });\n}","size_bytes":7920},"monitoramento-lojas-varejo-main/create-relatorio/public/css/style.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap');\n\n/* ============================================================\n   VARIÁVEIS\n============================================================ */\n:root {\n    --sidebar-width: 250px;\n    --main-bg: #1A1A1D;\n    --content-bg: rgba(28, 28, 28, 0.65);\n    --hover-bg: #000000;\n    --border-color: #383838;\n    --accent-color: #ff7b00;\n    --glow-color: rgba(255, 123, 0, 0.15);\n    --color-success: #2ea043;\n    --text-light: #ffffff;\n    --text-muted: #b0b0b0;\n    --text-input-color: #e5e7eb;\n    --border-radius-large: 16px;\n    --border-radius-small: 8px;\n    --transition-speed: 0.2s;\n}\n\n/* ============================================================\n   ESTRUTURA PRINCIPAL E ESTILOS GLOBAIS\n============================================================ */\nbody { background-color: var(--main-bg) !important; font-family: 'Inter', sans-serif; }\n.main-content { padding: 2.5rem; height: 100vh; overflow-y: auto; }\n#page-content { max-width: 1400px; margin: 0 auto; }\nbody, body *, .card, .card *, .modal, .modal * { color: var(--text-light) !important; }\nsmall { color: var(--text-muted) !important; }\n\nh4.mb-3 {\n    font-weight: 700; padding-bottom: 1rem; position: relative;\n    border-bottom: 1px solid var(--border-color); margin-bottom: 2.5rem !important;\n}\nh4.mb-3::after {\n    content: ''; position: absolute; bottom: -1px; left: 0; width: 100%; height: 1px;\n    background-color: transparent; box-shadow: 0 0 15px -2px var(--glow-color);\n}\n\n/* ============================================================\n   SIDEBAR DESKTOP\n============================================================ */\n.sidebar-desktop {\n    position: fixed; top: 0; left: 0; width: var(--sidebar-width); height: 100vh;\n    background-color: var(--content-bg); border-right: 1px solid var(--border-color);\n    padding: 1.5rem; z-index: 1000; display: flex; flex-direction: column;\n    -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px);\n}\n.sidebar-header { display: flex; align-items: center; gap: 0.75rem; font-size: 1.5rem; font-weight: 700; padding-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); }\n.sidebar-header i { color: var(--accent-color) !important; font-size: 1.8rem; }\n.sidebar-nav { list-style: none !important; padding: 0 !important; margin: 1.5rem 0; flex-grow: 1; }\n.sidebar-nav .nav-item { margin-bottom: 0.25rem !important; }\n.nav-link { display: flex; align-items: center; gap: 1rem; padding: 0.8rem 1rem; border-radius: var(--border-radius-small); color: var(--text-muted) !important; text-decoration: none; transition: all var(--transition-speed); }\n.nav-link:hover { color: var(--text-light) !important; background-color: var(--hover-bg); }\n.nav-item.active .nav-link { color: var(--text-light) !important; background-color: var(--main-bg); font-weight: 600; }\n.nav-item.active .nav-link i { color: var(--accent-color) !important; }\n.sidebar-footer { margin-top: auto; padding-top: 1.5rem; border-top: 1px solid var(--border-color); }\n#user-info-container { display: flex; flex-direction: column; gap: 1rem; }\n#user-info-container .user-info { font-weight: 600; }\n#user-info-container .user-actions { display: flex; gap: 0.5rem; }\n#user-info-container .btn { background-color: transparent !important; border: 1px solid var(--border-color) !important; color: var(--text-muted) !important; padding: 0.4rem 0.6rem; font-size: 1rem; }\n#user-info-container .btn:hover { background-color: var(--hover-bg) !important; color: var(--accent-color) !important; border-color: var(--accent-color) !important; }\n\n/* ============================================================\n   COMPONENTES GERAIS (Cards, Forms, Botões)\n============================================================ */\n.card, .alert, .list-group-item { background-color: var(--content-bg) !important; border-radius: var(--border-radius-large) !important; border: 1px solid var(--border-color) !important; margin-bottom: 1.5rem; }\n#page-content > .container-fluid > .card:first-of-type { box-shadow: 0 8px 32px -8px var(--glow-color); }\n.card-header { font-weight: 600; background-color: transparent !important; border-bottom: 1px solid var(--border-color) !important; padding: 1rem 1.5rem; }\n.card-body { padding: 1.5rem !important; }\n.form-control, .form-select { background-color: var(--main-bg) !important; border: 1px solid var(--border-color) !important; color: var(--text-input-color) !important; }\ninput[type=\"date\"]::-webkit-calendar-picker-indicator { filter: invert(1); opacity: 0.7; cursor: pointer; }\n.btn { transition: all var(--transition-speed) ease; font-weight: 600; border-radius: var(--border-radius-small); }\n.btn-primary { background-color: var(--accent-color) !important; color: var(--main-bg) !important; border: none !important; }\n\n/* ============================================================\n   LAYOUT RESPONSIVO\n============================================================ */\n@media (min-width: 992px) { .main-content { margin-left: var(--sidebar-width); } }\n@media (max-width: 991.98px) { .main-content { padding: 1.5rem; padding-top: 80px; } }\n\n/* ============================================================\n   HEADER E MENU MOBILE (MODAL)\n============================================================ */\n.mobile-header {\n    position: fixed; top: 0; left: 0; width: 100%; height: 60px; background-color: var(--content-bg);\n    border-bottom: 1px solid var(--border-color); display: flex; align-items: center; padding: 0 1rem;\n    z-index: 1030; -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px);\n}\n.mobile-header .btn { font-size: 1.5rem; color: var(--text-light) !important; }\n.mobile-header-title { display: flex; align-items: center; gap: 0.5rem; font-size: 1.2rem; font-weight: 700; margin-left: 1rem; }\n.mobile-header-title i { color: var(--accent-color) !important; }\n.modal-content.mobile-menu-content { background-color: #111111; border: none; -webkit-backdrop-filter: none; backdrop-filter: none; }\n.mobile-menu-content .modal-header { border-bottom-color: var(--border-color); }\n.mobile-menu-content .modal-header .modal-title { display: flex; align-items: center; gap: 0.5rem; font-weight: 700; font-size: 1.2rem; }\n.mobile-menu-content .modal-header .modal-title i { color: var(--accent-color) !important; }\n.mobile-menu-content .modal-body { padding-top: 2rem; }\n.mobile-menu-content .nav-link { font-size: 1.2rem; padding: 1rem; }\n\n/* ============================================================\n   CORREÇÕES DE COMPONENTES (Tabelas, Modais, Abas)\n============================================================ */\n.card .table-responsive, .card .table { background-color: transparent; }\n.card .table { --bs-table-bg: transparent; --bs-table-striped-bg: rgba(0, 0, 0, 0.05); }\n.modal-content { background-color: var(--content-bg) !important; border-radius: var(--border-radius-large) !important; border: 1px solid var(--border-color) !important; -webkit-backdrop-filter: blur(12px); backdrop-filter: blur(12px); }\n.modal-header { border-bottom-color: var(--border-color) !important; }\n.modal-footer { border-top-color: var(--border-color) !important; }\n.nav-tabs { border-bottom: 2px solid var(--border-color) !important; }\n.nav-tabs .nav-link { background: transparent !important; border: none !important; border-bottom: 3px solid transparent !important; color: var(--text-muted) !important; margin-bottom: -2px; }\n.nav-tabs .nav-link:hover { border-bottom-color: var(--border-color) !important; }\n.nav-tabs .nav-link.active { color: var(--text-light) !important; font-weight: 600; border-bottom-color: var(--accent-color) !important; }\n\n/* ============================================================\n   REFORMULAÇÃO DO FORMULÁRIO DE FILTROS DO DASHBOARD\n============================================================ */\n#form-filtros-dashboard .form-label {\n    font-size: 0.8rem;\n    font-weight: 500;\n    color: var(--text-muted);\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    margin-bottom: 0.5rem; /* Espaçamento consistente */\n}\n\n/* Container do controle segmentado */\n#form-filtros-dashboard .btn-group {\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius-small);\n    padding: 3px;\n    background-color: var(--main-bg);\n}\n\n/* Botões individuais dentro do controle */\n#form-filtros-dashboard .btn-group .btn {\n    background-color: transparent !important;\n    border: none !important;\n    color: var(--text-muted) !important;\n    font-weight: 500;\n    box-shadow: none !important;\n    transition: all 0.2s ease-in-out;\n    border-radius: 6px !important; /* Bordas arredondadas para todos */\n    padding-top: 0.375rem; /* Ajuste para alinhamento vertical */\n    padding-bottom: 0.375rem;\n}\n\n#form-filtros-dashboard .btn-group .btn:hover {\n    color: var(--text-light) !important;\n    background-color: rgba(255, 255, 255, 0.05) !important;\n}\n\n/* Botão ATIVO no controle */\n#form-filtros-dashboard .btn-group .btn.active {\n    background-color: var(--hover-bg) !important;\n    color: var(--text-light) !important;\n    font-weight: 600;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.3) !important;\n}\n\n.input-group-text {\n    background-color: var(--border-color) !important; /* Um cinza um pouco mais escuro para destaque */\n    border-color: var(--border-color) !important;\n    color: var(--text-muted) !important;\n    font-weight: 600;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    opacity: 0.95;\n}\n\n/* Aplica o brilho laranja ao passar o mouse sobre botões primários */\n.btn-primary:hover {\n    box-shadow: 0 0 12px var(--glow-color);\n}\n\n/* Aplica um brilho verde ao passar o mouse sobre botões de sucesso */\n.btn-success:hover {\n    box-shadow: 0 0 12px rgba(46, 160, 67, 0.6);\n}\n\n/* Aplica um brilho vermelho ao passar o mouse sobre botões de perigo */\n.btn-danger:hover, .btn-outline-danger:hover {\n    box-shadow: 0 0 12px rgba(248, 113, 113, 0.6);\n}\n\n/* Aplica um brilho cinza ao passar o mouse sobre botões secundários */\n.btn-secondary:hover, .btn-outline-secondary:hover {\n    box-shadow: 0 0 12px rgba(108, 117, 125, 0.4);\n}","size_bytes":10138},"monitoramento-lojas-varejo-main/create-relatorio/public/js/utils.js":{"content":"/**\n * Exibe uma notificação toast no canto da tela.\n * @param {string} title Título do toast.\n * @param {string} message Mensagem do corpo do toast.\n * @param {'success'|'danger'|'info'} type O tipo de notificação (muda a cor).\n */\nexport function showToast(title, message, type = 'success') {\n    const toastEl = document.getElementById('notificationToast');\n    if (!toastEl) return;\n    const toastHeader = toastEl.querySelector('.toast-header');\n    const toastTitle = document.getElementById('toast-title');\n    const toastBody = document.getElementById('toast-body');\n\n    toastTitle.textContent = title;\n    toastBody.textContent = message;\n\n    toastHeader.classList.remove('bg-success', 'bg-danger', 'bg-info');\n    if (type === 'success') toastHeader.classList.add('bg-success');\n    else if (type === 'danger') toastHeader.classList.add('bg-danger');\n    else toastHeader.classList.add('bg-info');\n\n    const toast = new bootstrap.Toast(toastEl);\n    toast.show();\n}\n\n/**\n * Exibe um modal de confirmação e retorna uma Promise que resolve como true ou false.\n * @param {string} message A pergunta a ser exibida no modal.\n * @returns {Promise<boolean>} Retorna true se o usuário clicar \"Sim\", senão false.\n */\nexport function showConfirmModal(message) {\n    return new Promise((resolve) => {\n        const confirmModalEl = document.getElementById('confirmModal');\n        if (!confirmModalEl) {\n            resolve(window.confirm(message));\n            return;\n        }\n\n        const confirmModal = new bootstrap.Modal(confirmModalEl);\n        document.getElementById('confirmModalBody').textContent = message;\n\n        const btnYes = document.getElementById('confirm-btn-yes');\n        const btnNo = document.getElementById('confirm-btn-no');\n        const btnClose = confirmModalEl.querySelector('.btn-close');\n\n        const handleResolve = (value) => {\n            btnYes.removeEventListener('click', onYesClick);\n            btnNo.removeEventListener('click', onNoClick);\n            btnClose.removeEventListener('click', onNoClick);\n            confirmModalEl.removeEventListener('hidden.bs.modal', onHidden);\n\n            if (confirmModal._isShown) {\n                confirmModal.hide();\n            }\n            resolve(value);\n        };\n\n        const onYesClick = () => handleResolve(true);\n        const onNoClick = () => handleResolve(false);\n        const onHidden = () => handleResolve(false);\n\n        btnYes.addEventListener('click', onYesClick, { once: true });\n        btnNo.addEventListener('click', onNoClick, { once: true });\n        btnClose.addEventListener('click', onNoClick, { once: true });\n        confirmModalEl.addEventListener('hidden.bs.modal', onHidden, { once: true });\n\n        confirmModal.show();\n    });\n}","size_bytes":2767},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/gerenciar-lojas.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initGerenciarLojasPage() {\n    const tableBody = document.getElementById('tabela-lojas-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-loja');\n    const modalEl = document.getElementById('modal-loja');\n    \n    if (!tableBody || !btnAdicionar || !modalEl) return;\n    \n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-loja');\n    const modalTitle = document.getElementById('modalLojaLabel');\n    let lojasCache = [];\n\n    async function carregarLojas() {\n        tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch('/api/lojas');\n            lojasCache = await response.json();\n            if (lojasCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center\">Nenhuma loja cadastrada.</td></tr>';\n                return;\n            }\n            tableBody.innerHTML = lojasCache.map(loja => {\n                const statusBadge = loja.status === 'ativa' ? `<span class=\"badge bg-success\">Ativa</span>` : `<span class=\"badge bg-secondary\">Inativa</span>`;\n                return `<tr><td>${loja.nome}</td><td>${statusBadge}</td><td>${loja.funcao_especial || '-'}</td><td>${loja.observacoes || '-'}</td><td class=\"text-end pe-3\"><button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${loja.id}\"><i class=\"bi bi-pencil\"></i></button> <button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${loja.id}\"><i class=\"bi bi-trash\"></i></button></td></tr>`;\n            }).join('');\n        } catch (e) {\n            tableBody.innerHTML = '<tr><td colspan=\"5\" class=\"text-center text-danger\">Erro ao carregar.</td></tr>';\n        }\n    }\n\n    function abrirModalParaAdicionar() {\n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Nova Loja';\n        document.getElementById('loja-id').value = '';\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const loja = lojasCache.find(l => l.id === id);\n        if (!loja) return;\n        modalForm.reset();\n        modalTitle.textContent = 'Editar Loja';\n        document.getElementById('loja-id').value = loja.id;\n        document.getElementById('loja-nome').value = loja.nome;\n        document.getElementById('loja-status').value = loja.status;\n        document.getElementById('loja-funcao-especial').value = loja.funcao_especial || '';\n        document.getElementById('loja-observacoes').value = loja.observacoes || '';\n        modal.show();\n    }\n\n    async function excluirLoja(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir esta loja?`);\n        if (!confirmed) return;\n        try {\n            const response = await fetch(`/api/lojas/${id}`, { method: 'DELETE' });\n            if (!response.ok) throw new Error('Falha ao excluir.');\n            showToast('Sucesso', 'Loja excluída.', 'success');\n            carregarLojas();\n        } catch (e) {\n            showToast('Erro', 'Não foi possível excluir a loja.', 'danger');\n        }\n    }\n\n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const id = document.getElementById('loja-id').value;\n        const data = { nome: document.getElementById('loja-nome').value, status: document.getElementById('loja-status').value, funcao_especial: document.getElementById('loja-funcao-especial').value, observacoes: document.getElementById('loja-observacoes').value };\n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/lojas/${id}` : '/api/lojas';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            if (!response.ok) throw new Error('Falha ao salvar. Nome já existe?');\n            showToast('Sucesso', `Loja salva.`, 'success');\n            modal.hide();\n            carregarLojas();\n        } catch(e) { showToast('Erro', e.message, 'danger'); }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirLoja(id);\n    });\n    carregarLojas();\n}","size_bytes":4587},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/demandas.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initDemandasPage() {\n    const containerPendentes = document.getElementById('demandas-pendentes-container');\n    const containerHistorico = document.getElementById('demandas-historico-container');\n    const abas = document.querySelectorAll('#demandasTab .nav-link');\n    const modalDemandaEl = document.getElementById('modal-add-demanda');\n    \n    // ===== A MUDANÇA ESTÁ AQUI =====\n    // Trocamos 'page-content' pelo nosso novo wrapper específico da página.\n    const demandasWrapper = document.getElementById('demandas-page-wrapper');\n    // ===============================\n\n    if (!modalDemandaEl || !demandasWrapper) return; // Adicionada verificação para o wrapper\n\n    const modalDemanda = new bootstrap.Modal(modalDemandaEl);\n    const formDemanda = document.getElementById('form-add-demanda');\n    const selectLojaModal = document.getElementById('demanda-loja');\n\n    async function carregarLojasNoModal() {\n        try {\n            const response = await fetch('/api/lojas?status=ativa');\n            const lojas = await response.json();\n            selectLojaModal.innerHTML = '<option value=\"\" selected disabled>Selecione uma loja</option>';\n            lojas.forEach(loja => {\n                selectLojaModal.add(new Option(loja.nome, loja.nome));\n            });\n        } catch (error) {\n            console.error(\"Falha ao carregar lojas:\", error);\n        }\n    }\n\n    async function carregarDemandas(tipo) {\n        const container = tipo === 'pendentes' ? containerPendentes : containerHistorico;\n        const url = `/api/demandas/${tipo}`;\n        if (!container) return;\n\n        container.innerHTML = '<p class=\"text-center\">Carregando...</p>';\n        try {\n            const response = await fetch(url);\n            const demandas = await response.json();\n            if (demandas.length === 0) {\n                container.innerHTML = '<p class=\"text-center text-muted\">Nenhuma demanda encontrada.</p>';\n                return;\n            }\n\n            container.innerHTML = demandas.map(d => {\n                const tagCores = { 'Urgente': 'bg-danger', 'Alta': 'bg-warning text-dark', 'Normal': 'bg-info text-dark', 'Baixa': 'bg-secondary' };\n                let acoesHtml = '';\n                // A lógica para tipo 'concluidas' estava errada, corrigido para 'historico'\n                if (tipo === 'pendentes') {\n                    acoesHtml = `<div class=\"d-flex justify-content-end mt-2\"><button class=\"btn btn-sm btn-success me-2\" data-action=\"concluir\" data-id=\"${d.id}\" title=\"Concluir\"><i class=\"bi bi-check-lg\"></i></button><button class=\"btn btn-sm btn-danger\" data-action=\"excluir\" data-id=\"${d.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button></div>`;\n                } else if (tipo === 'historico') { // CORREÇÃO LÓGICA\n                    acoesHtml = `<div class=\"d-flex justify-content-end mt-2\"><button class=\"btn btn-sm btn-danger\" data-action=\"excluir\" data-id=\"${d.id}\" title=\"Excluir do Histórico\"><i class=\"bi bi-trash\"></i></button></div>`;\n                }\n                const footerHtml = tipo === 'pendentes' ? `Criado por <strong>${d.criado_por_usuario}</strong> em ${new Date(d.criado_em).toLocaleDateString('pt-BR')}` : `Concluído por <strong>${d.concluido_por_usuario || 'N/A'}</strong> em ${new Date(d.concluido_em).toLocaleDateString('pt-BR')}`;\n\n                return `<div class=\"card mb-3\"><div class=\"card-body\"><div class=\"d-flex justify-content-between align-items-start\"><div><h5 class=\"card-title mb-1\">${d.loja_nome}</h5><p class=\"card-text mb-0\">${d.descricao}</p></div><span class=\"badge ${tagCores[d.tag] || 'bg-light text-dark'}\">${d.tag}</span></div>${acoesHtml}</div><div class=\"card-footer text-muted small\">${footerHtml}</div></div>`;\n            }).join('');\n        } catch (e) {\n            container.innerHTML = '<p class=\"text-center text-danger\">Erro ao carregar demandas.</p>';\n        }\n    }\n\n    formDemanda.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const data = Object.fromEntries(new FormData(e.target).entries());\n        if (!data.loja_nome) {\n            showToast('Atenção', 'Selecione uma loja.', 'danger');\n            return;\n        }\n        try {\n            const response = await fetch('/api/demandas', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            if (!response.ok) throw new Error('Falha ao adicionar demanda.');\n            modalDemanda.hide();\n            e.target.reset();\n            showToast('Sucesso', 'Demanda adicionada.', 'success');\n            carregarDemandas('pendentes');\n        } catch (error) {\n            showToast('Erro', error.message, 'danger');\n        }\n    });\n\n    abas.forEach(aba => {\n        aba.addEventListener('shown.bs.tab', (event) => {\n            const targetId = event.target.getAttribute('data-bs-target');\n            // A lógica para carregar o histórico estava errada, corrigido para 'historico'\n            if (targetId === '#pendentes') carregarDemandas('pendentes');\n            else if (targetId === '#historico') carregarDemandas('historico'); // CORREÇÃO LÓGICA\n        });\n    });\n\n    // ===== A MUDANÇA ESTÁ AQUI =====\n    // O ouvinte agora está no nosso wrapper, isolado do resto do app.\n    demandasWrapper.addEventListener('click', async (e) => {\n        const button = e.target.closest('button[data-action]');\n        // A verificação de containeres ainda é uma boa prática\n        if (!button || !button.closest('#demandas-pendentes-container, #demandas-historico-container')) return;\n\n        const id = button.dataset.id;\n        const action = button.dataset.action;\n        const isPendente = !!button.closest('#demandas-pendentes-container');\n\n        if (action === 'concluir') {\n            const confirmed = await showConfirmModal('Marcar esta demanda como concluída?');\n            if (!confirmed) return;\n            try {\n                const response = await fetch(`/api/demandas/${id}/concluir`, { method: 'PUT' });\n                if (!response.ok) throw new Error('Falha ao concluir demanda.');\n                showToast('Sucesso', 'Demanda movida para o histórico.', 'info');\n                carregarDemandas('pendentes');\n            } catch (e) { showToast('Erro', 'Não foi possível concluir.', 'danger'); }\n        }\n\n        if (action === 'excluir') {\n            const confirmed = await showConfirmModal('EXCLUIR PERMANENTEMENTE esta demanda?');\n            if (!confirmed) return;\n            try {\n                const response = await fetch(`/api/demandas/${id}`, { method: 'DELETE' });\n                if (!response.ok) throw new Error('Falha ao excluir demanda.');\n                showToast('Sucesso', 'Demanda excluída.', 'success');\n                // A lógica para recarregar o histórico estava errada, corrigido.\n                if (isPendente) carregarDemandas('pendentes');\n                else carregarDemandas('historico'); // CORREÇÃO LÓGICA\n            } catch (e) { showToast('Erro', 'Não foi possível excluir.', 'danger'); }\n        }\n    });\n\n    carregarLojasNoModal();\n    carregarDemandas('pendentes');\n}","size_bytes":7240},"monitoramento-lojas-varejo-main/create-relatorio/public/js/pages/gerenciar-usuarios.js":{"content":"import { showToast, showConfirmModal } from '../utils.js';\n\nexport function initGerenciarUsuariosPage(currentUser) {\n    // A função agora inicializa tanto usuários quanto backup\n    initUsuarios(currentUser);\n    initBackup();\n}\n\n// --- LÓGICA DE GERENCIAMENTO DE USUÁRIOS (Sem alterações) ---\nfunction initUsuarios(currentUser) {\n    const tableBody = document.getElementById('tabela-usuarios-corpo');\n    const btnAdicionar = document.getElementById('btn-adicionar-usuario');\n    const modalEl = document.getElementById('modal-usuario');\n    \n    if (!tableBody || !btnAdicionar || !modalEl) return;\n\n    const modal = new bootstrap.Modal(modalEl);\n    const modalForm = document.getElementById('form-usuario');\n    const modalTitle = document.getElementById('modalUsuarioLabel');\n    let usuariosCache = [];\n\n    async function carregarUsuarios() {\n        tableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center\">Carregando...</td></tr>';\n        try {\n            const response = await fetch('/api/usuarios');\n            if (!response.ok) throw new Error('Falha ao carregar usuários.');\n            usuariosCache = await response.json();\n            \n            if (usuariosCache.length === 0) {\n                tableBody.innerHTML = '<tr><td colspan=\"4\" class=\"text-center\">Nenhum usuário cadastrado.</td></tr>';\n                return;\n            }\n            tableBody.innerHTML = usuariosCache.map(user => {\n                const isCurrentUser = user.id === currentUser.id;\n                const deleteButton = isCurrentUser ? `<button class=\"btn btn-sm btn-outline-secondary\" disabled title=\"Não é possível excluir o próprio usuário\"><i class=\"bi bi-trash\"></i></button>` : `<button class=\"btn btn-sm btn-outline-danger\" data-action=\"excluir\" data-id=\"${user.id}\" title=\"Excluir\"><i class=\"bi bi-trash\"></i></button>`;\n                return `<tr><td class=\"ps-3\">${user.id}</td><td>${user.username}</td><td><span class=\"badge ${user.role === 'admin' ? 'bg-primary' : 'bg-secondary'}\">${user.role}</span></td><td class=\"text-end pe-3\"><button class=\"btn btn-sm btn-outline-secondary\" data-action=\"editar\" data-id=\"${user.id}\" title=\"Editar\"><i class=\"bi bi-pencil\"></i></button> ${deleteButton}</td></tr>`;\n            }).join('');\n        } catch(e) {\n            tableBody.innerHTML = `<tr><td colspan=\"4\" class=\"text-center text-danger\">Erro ao carregar usuários.</td></tr>`;\n        }\n    }\n\n    function abrirModalParaAdicionar() {\n        modalForm.reset();\n        modalTitle.textContent = 'Adicionar Novo Usuário';\n        document.getElementById('usuario-id').value = '';\n        document.getElementById('usuario-password').required = true;\n        document.getElementById('usuario-password-label').textContent = 'Senha *';\n        modal.show();\n    }\n\n    function abrirModalParaEditar(id) {\n        const user = usuariosCache.find(u => u.id === id);\n        if (!user) return;\n        modalForm.reset();\n        modalTitle.textContent = 'Editar Usuário';\n        document.getElementById('usuario-id').value = user.id;\n        document.getElementById('usuario-username').value = user.username;\n        document.getElementById('usuario-role').value = user.role;\n        document.getElementById('usuario-password').required = false;\n        document.getElementById('usuario-password-label').textContent = 'Nova Senha (deixe em branco para não alterar)';\n        modal.show();\n    }\n\n    async function excluirUsuario(id) {\n        const confirmed = await showConfirmModal(`Tem certeza que deseja excluir o usuário #${id}?`);\n        if (!confirmed) return;\n        try { \n            const response = await fetch(`/api/usuarios/${id}`, { method: 'DELETE' });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', 'Usuário excluído com sucesso.', 'success');\n            carregarUsuarios();\n        } catch (e) {\n            showToast('Erro', e.message || 'Não foi possível excluir o usuário.', 'danger');\n        }\n    }\n    \n    modalForm.addEventListener('submit', async (e) => {\n        e.preventDefault();\n        const id = document.getElementById('usuario-id').value;\n        const data = { username: document.getElementById('usuario-username').value, password: document.getElementById('usuario-password').value, role: document.getElementById('usuario-role').value };\n        if (!data.password) delete data.password;\n        const method = id ? 'PUT' : 'POST';\n        const url = id ? `/api/usuarios/${id}` : '/api/usuarios';\n        try {\n            const response = await fetch(url, { method, headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', `Usuário ${id ? 'atualizado' : 'adicionado'} com sucesso.`, 'success');\n            modal.hide();\n            carregarUsuarios();\n        } catch(e) {\n            showToast('Erro', e.message || 'Não foi possível salvar o usuário.', 'danger');\n        }\n    });\n\n    btnAdicionar.addEventListener('click', abrirModalParaAdicionar);\n    \n    tableBody.addEventListener('click', (e) => {\n        const button = e.target.closest('button[data-action]');\n        if (!button) return;\n        const id = parseInt(button.dataset.id, 10);\n        const action = button.dataset.action;\n        if (action === 'editar') abrirModalParaEditar(id);\n        if (action === 'excluir') excluirUsuario(id);\n    });\n    \n    carregarUsuarios();\n}\n\n// --- LÓGICA DE BACKUP E RESTAURAÇÃO (NOVO) ---\nfunction initBackup() {\n    const dbSizeSpan = document.getElementById('db-size');\n    const btnLimparDb = document.getElementById('btn-limpar-db');\n    const btnRestaurarBackup = document.getElementById('btn-restaurar-backup');\n    const backupFileInput = document.getElementById('backup-file-input');\n\n    // Carrega o tamanho do DB ao entrar na aba\n    async function carregarInfoBackup() {\n        try {\n            const response = await fetch('/api/backup/info');\n            const data = await response.json();\n            dbSizeSpan.textContent = `${data.sizeMB} MB`;\n        } catch (error) {\n            dbSizeSpan.textContent = 'Erro ao carregar';\n            dbSizeSpan.classList.add('text-danger');\n        }\n    }\n\n    // Limpar DB\n    btnLimparDb.addEventListener('click', async () => {\n        const confirmed = await showConfirmModal('Você tem CERTEZA ABSOLUTA que deseja limpar todos os relatórios e demandas? Esta ação é IRREVERSÍVEL.');\n        if (!confirmed) return;\n\n        btnLimparDb.disabled = true;\n        btnLimparDb.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Limpando...';\n        try {\n            const response = await fetch('/api/backup/clear', { method: 'DELETE' });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso', 'Banco de dados limpo com sucesso.', 'success');\n            carregarInfoBackup(); // Atualiza o tamanho\n        } catch (error) {\n            showToast('Erro', error.message, 'danger');\n        } finally {\n            btnLimparDb.disabled = false;\n            btnLimparDb.innerHTML = '<i class=\"bi bi-trash3-fill me-2\"></i>Limpar Relatórios e Demandas';\n        }\n    });\n\n    // Habilita/Desabilita o botão de restaurar conforme um arquivo é selecionado\n    backupFileInput.addEventListener('change', () => {\n        btnRestaurarBackup.disabled = !backupFileInput.files.length;\n    });\n\n    // Restaurar Backup\n    btnRestaurarBackup.addEventListener('click', async () => {\n        const file = backupFileInput.files[0];\n        if (!file) {\n            showToast('Atenção', 'Selecione um arquivo de backup (.db) primeiro.', 'info');\n            return;\n        }\n\n        const confirmed = await showConfirmModal('Você está prestes a SUBSTITUIR TODO o banco de dados atual. O sistema atual será perdido para sempre. Deseja continuar?');\n        if (!confirmed) return;\n\n        const formData = new FormData();\n        formData.append('backupFile', file);\n\n        btnRestaurarBackup.disabled = true;\n        btnRestaurarBackup.innerHTML = '<span class=\"spinner-border spinner-border-sm\"></span> Restaurando...';\n\n        try {\n            const response = await fetch('/api/backup/restore', {\n                method: 'POST',\n                body: formData\n            });\n            const result = await response.json();\n            if (!response.ok) throw new Error(result.error);\n            showToast('Sucesso!', result.message, 'success');\n            // Recarrega a página inteira para garantir que o sistema use o novo DB\n            setTimeout(() => window.location.reload(), 2000);\n        } catch (error) {\n            showToast('Erro na Restauração', error.message, 'danger');\n            btnRestaurarBackup.disabled = false;\n            btnRestaurarBackup.innerHTML = '<i class=\"bi bi-upload me-2\"></i>Restaurar';\n        }\n    });\n    \n    // Carrega as informações iniciais ao carregar a página\n    carregarInfoBackup();\n}","size_bytes":9189},"monitoramento-lojas-varejo-main/create-relatorio/server.js":{"content":"// =================================================================\n// SISTEMA DE FLUXO \n// =================================================================\nconst express = require('express');\nconst sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\nconst session = require('express-session');\nconst fs = require('fs');\nconst PDFDocument = require('pdfkit');\nconst ExcelJS = require('exceljs');\nconst multer = require('multer');\nconst pdf = require('pdf-parse');\n\n\nconst app = express();\nconst PORT = 3000;\n\n// --- CONFIGURAÇÃO GERAL ---\nconst dataDir = path.join(__dirname, 'data');\nif (!fs.existsSync(dataDir)) {\n    fs.mkdirSync(dataDir, { recursive: true });\n}\nconst DB_PATH = path.join(dataDir, 'relatorios.db');\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(session({\n    secret: 'chave-definitiva-123',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { httpOnly: true, maxAge: 24 * 60 * 60 * 1000 }\n}));\n\n// --- CONFIGURAÇÃO DO MULTER ---\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// --- MIDDLEWARES ---\nconst requirePageLogin = (req, res, next) => {\n    if (req.session && req.session.userId) {\n        return next();\n    }\n    res.redirect('/login');\n};\nconst requireAdmin = (req, res, next) => {\n    if (req.session && req.session.role === 'admin') {\n        return next();\n    }\n    res.status(403).json({ error: 'Acesso negado.' });\n};\n\n// --- BANCO DE DADOS ---\nlet db = new sqlite3.Database(DB_PATH, err => {\n    if (err) {\n        return console.error(\"Erro fatal ao conectar ao DB:\", err.message);\n    }\n    console.log(\"Conectado ao banco de dados SQLite.\");\n    db.serialize(() => {\n        db.run(`CREATE TABLE IF NOT EXISTS usuarios (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL, role TEXT NOT NULL)`);\n        db.run(`CREATE TABLE IF NOT EXISTS lojas (id INTEGER PRIMARY KEY AUTOINCREMENT, nome TEXT UNIQUE NOT NULL, status TEXT, funcao_especial TEXT, observacoes TEXT)`);\n        db.run(`CREATE TABLE IF NOT EXISTS relatorios (\n            id INTEGER PRIMARY KEY AUTOINCREMENT, loja TEXT, data TEXT, hora_abertura TEXT, hora_fechamento TEXT,\n            gerente_entrada TEXT, gerente_saida TEXT, clientes_monitoramento INTEGER, vendas_monitoramento INTEGER,\n            clientes_loja INTEGER, vendas_loja INTEGER, total_vendas_dinheiro REAL, ticket_medio TEXT, pa TEXT,\n            quantidade_trocas INTEGER, nome_funcao_especial TEXT, quantidade_funcao_especial INTEGER,\n            quantidade_omni INTEGER, vendedores TEXT, nome_arquivo TEXT, enviado_por_usuario TEXT,\n            enviado_em DATETIME DEFAULT CURRENT_TIMESTAMP, vendas_cartao INTEGER, vendas_pix INTEGER, vendas_dinheiro INTEGER\n        )`);\n        db.run(`CREATE TABLE IF NOT EXISTS demandas (id INTEGER PRIMARY KEY AUTOINCREMENT, loja_nome TEXT NOT NULL, descricao TEXT NOT NULL, tag TEXT DEFAULT 'Normal', status TEXT DEFAULT 'pendente', criado_por_usuario TEXT, concluido_por_usuario TEXT, criado_em DATETIME DEFAULT CURRENT_TIMESTAMP, concluido_em DATETIME)`);\n        const adminUsername = 'admin';\n        const correctPassword = 'admin';\n        db.get('SELECT * FROM usuarios WHERE username = ?', [adminUsername], (err, row) => {\n            if (err) return;\n            if (!row) {\n                db.run('INSERT INTO usuarios (username, password, role) VALUES (?, ?, ?)', [adminUsername, correctPassword, 'admin']);\n            } else if (row.password !== correctPassword) {\n                db.run('UPDATE usuarios SET password = ? WHERE username = ?', [correctPassword, adminUsername]);\n            }\n        });\n    });\n});\n\n// --- ROTAS DE PÁGINAS ---\napp.get('/login', (req, res) => res.sendFile(path.join(__dirname, 'views', 'login.html')));\napp.get('/live', requirePageLogin, (req, res) => res.sendFile(path.join(__dirname, 'views', 'live.html')));\napp.get(['/', '/admin', '/consulta', '/demandas', '/gerenciar-lojas', '/novo-relatorio', '/gerenciar-usuarios'], requirePageLogin, (req, res) => {\n    res.sendFile(path.join(__dirname, 'views', 'index.html'));\n});\napp.get('/content/:page', requirePageLogin, (req, res) => {\n    const allowedPages = ['admin', 'consulta', 'demandas', 'gerenciar-lojas', 'novo-relatorio', 'gerenciar-usuarios'];\n    if (allowedPages.includes(req.params.page)) {\n        res.sendFile(path.join(__dirname, 'views', `${req.params.page}.html`));\n    } else {\n        res.status(404).send('Página não encontrada');\n    }\n});\n\n\n// --- ROTAS DE API ---\n\n// <<<---------------------------------------------------->>>\n// <<<                    leitura PDF                     >>>\n// <<<---------------------------------------------------->>>\napp.post('/api/process-pdf', requirePageLogin, upload.single('pdfFile'), async (req, res) => {\n    if (!req.file) {\n        return res.status(400).json({ error: \"Nenhum arquivo PDF enviado.\" });\n    }\n\n    try {\n        const data = await pdf(req.file.buffer);\n        const text = data.text;\n        const lines = text.split('\\n').map(line => line.trim()).filter(Boolean);\n\n        // Função para converter valores no formato \"1.234,56\" para número\n        const parseBrazilianNumber = (str) => {\n            if (!str) return 0;\n            return parseFloat(String(str).replace(/\\./g, '').replace(',', '.'));\n        };\n\n        let extractedData;\n\n        // VERIFICA O TIPO DE PDF\n        if (text.includes(\"Desempenho de vendedores\")) {\n            // --- LÓGICA PARA PDF TIPO OMNI ---\n            console.log(\"Processando PDF estilo Omni (Desempenho de vendedores)...\");\n\n            const linhaTotais = lines.find(l => l.startsWith('Totais:'));\n            if (!linhaTotais) {\n                throw new Error(\"Linha 'Totais:' não encontrada no PDF.\");\n            }\n\n            // Extrai todos os números da linha de totais\n            const valores = linhaTotais.replace('Totais:', '').trim().split(/\\s+/);\n            \n            // Mapeia os valores\n            const vendas_loja = Math.round(parseBrazilianNumber(valores[1])); // Total de Vendas\n            const pa = parseBrazilianNumber(valores[2]); // Peças/Venda\n            const total_vendas_dinheiro = parseBrazilianNumber(valores[3]); // Vl. Vendas\n            const ticket_medio = parseBrazilianNumber(valores[4]); // Ticket Médio\n            const clientes_loja = parseInt(valores[5], 10); // Abordagens\n\n            // Extrai dados \n            const storeNameMatch = text.match(/(\\d{1,}-\\d{6}-.+)/);\n            const storeName = storeNameMatch ? storeNameMatch[1].trim() : \"Loja não identificada\";\n            \n            const dateMatch = text.match(/Período: (\\d{2}\\/\\d{2}\\/\\d{4})/);\n            const reportDate = dateMatch ? new Date(dateMatch[1].split('/').reverse().join('-')).toISOString().split('T')[0] : null;\n\n            const vendorLines = lines.filter(line => line.match(/^\\d+\\s+.+\\s+\\(\\d+\\)/));\n            const vendedores = vendorLines.map(line => {\n                const nameMatch = line.match(/^\\d+\\s+(.*?)\\s+\\(\\d+\\)/);\n                const nome = nameMatch ? nameMatch[1].trim() : \"Desconhecido\";\n                \n                const statsPart = line.replace(nameMatch[0], '').trim();\n                const stats = statsPart.split(/\\s+/);\n                \n                const vendas = Math.round(parseBrazilianNumber(stats[1]));\n                const atendimentos = parseInt(stats[5], 10) || 0;\n                \n                return { nome, vendas, atendimentos };\n            });\n\n            extractedData = {\n                loja: storeName,\n                data: reportDate,\n                clientes_loja: clientes_loja,\n                vendas_loja: vendas_loja,\n                total_vendas_dinheiro: `R$ ${total_vendas_dinheiro.toFixed(2).replace('.', ',')}`,\n                ticket_medio: `R$ ${ticket_medio.toFixed(2).replace('.', ',')}`,\n                pa: pa.toFixed(2).replace('.', ','),\n                vendedores: vendedores\n            };\n\n        } else {\n            // --- LÓGICA PARA PDF TIPO BUSCA TÉCNICA ---\n            console.log(\"Processando PDF estilo Busca Técnica...\");\n            \n            const linhaTotais = lines.find(l => l.includes('Totais:'));\n            const idxTotais = lines.indexOf(linhaTotais);\n            const linhaDados = lines[idxTotais + 1] || '';\n            const linhaLimpa = linhaDados.replace(/(\\d{1,3})\\.(\\d{3},\\d{2})/g, '$1.$2 ').replace(/ +/g, ' ').trim();\n            const valoresTotais = linhaLimpa.match(/(\\d{1,3}(?:\\.\\d{3})*,\\d{2})|(\\d+\\.\\d{2})|(\\d+)/g);\n            \n            if (!valoresTotais || valoresTotais.length < 7) {\n                throw new Error(\"Não foi possível extrair os valores corretamente da linha Totais do PDF.\");\n            }\n            \n            const totalVendasValor = parseBrazilianNumber(valoresTotais[0]);\n            const pa = parseBrazilianNumber(valoresTotais[valoresTotais.length - 4]);\n            const ticketMedio = parseBrazilianNumber(valoresTotais[valoresTotais.length - 3]);\n            \n            const linhaSplitada = linhaLimpa.split(' ');\n            const indexDoValorTotal = linhaSplitada.findIndex(v => v.includes(valoresTotais[0]));\n            const totalAtendimentos = parseInt(linhaSplitada[indexDoValorTotal + 2], 10) || 0;\n            \n            const storeNameMatch = text.match(/^\\s*\\d{3}\\s*-\\s*(.+)/m);\n            const storeName = storeNameMatch ? storeNameMatch[1].trim().replace(/\\s+STORE$/, \"\") : \"Loja não identificada\";\n            \n            const dateMatch = text.match(/Período de (\\d{2}\\/\\d{2}\\/\\d{4}) a (\\d{2}\\/\\d{2}\\/\\d{4})/);\n            const reportDate = dateMatch ? new Date(dateMatch[1].split('/').reverse().join('-')).toISOString().split('T')[0] : null;\n\n            const vendorLines = lines.filter(line => /^\\d+º/.test(line));\n            const vendedores = vendorLines.map(line => {\n                const vendorParts = line.trim().split(/\\s+/);\n                const nome = vendorParts.slice(2, -7).join(' ');\n                const atendimentos = parseInt(vendorParts[vendorParts.length - 4], 10) || 0;\n                return { nome, vendas: atendimentos, atendimentos };\n            });\n\n            extractedData = {\n                loja: storeName,\n                data: reportDate,\n                clientes_loja: totalAtendimentos,\n                vendas_loja: totalAtendimentos,\n                total_vendas_dinheiro: `R$ ${totalVendasValor.toFixed(2).replace('.', ',')}`,\n                ticket_medio: `R$ ${ticketMedio.toFixed(2).replace('.', ',')}`,\n                pa: pa.toFixed(2).replace('.', ','),\n                vendedores: vendedores\n            };\n        }\n\n        res.json({ success: true, data: extractedData });\n\n    } catch (error) {\n        console.error(\"### ERRO NO PROCESSAMENTO DO PDF ###\", error);\n        res.status(500).json({ error: error.message || \"Erro ao processar o PDF.\" });\n    }\n});\n// <<<---------------------------------------------------->>>\n// <<<          FIM DA API DE PDF                         >>>\n// <<<---------------------------------------------------->>>\n\n\n// APIs DE SESSÃO E USUÁRIOS \napp.post('/api/login', (req, res) => { const { username, password } = req.body; db.get('SELECT * FROM usuarios WHERE username = ? AND password = ?', [username, password], (err, user) => { if (err || !user) return res.status(401).json({ message: 'Credenciais inválidas.' }); req.session.userId = user.id; req.session.username = user.username; req.session.role = user.role; res.json({ success: true }); }); });\napp.get('/logout', (req, res) => { req.session.destroy(() => res.redirect('/login')); });\napp.get('/api/session-info', requirePageLogin, (req, res) => { res.json({ id: req.session.userId, username: req.session.username, role: req.session.role }); });\napp.get('/api/usuarios', requirePageLogin, requireAdmin, (req, res) => { db.all(\"SELECT id, username, role FROM usuarios ORDER BY username\", (err, users) => { if (err) return res.status(500).json({ error: err.message }); res.json(users || []); }); });\napp.post('/api/usuarios', requirePageLogin, requireAdmin, (req, res) => { const { username, password, role } = req.body; if (!username || !password || !role) return res.status(400).json({ error: 'Todos os campos são obrigatórios.' }); db.run('INSERT INTO usuarios (username, password, role) VALUES (?, ?, ?)', [username, password, role], function (err) { if (err) return res.status(500).json({ error: 'Erro ao criar usuário. O nome de usuário já pode existir.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.put('/api/usuarios/:id', requirePageLogin, requireAdmin, (req, res) => { const { id } = req.params; const { username, password, role } = req.body; if (!username || !role) return res.status(400).json({ error: 'Username e Cargo são obrigatórios.' }); const sql = password ? 'UPDATE usuarios SET username = ?, password = ?, role = ? WHERE id = ?' : 'UPDATE usuarios SET username = ?, role = ? WHERE id = ?'; const params = password ? [username, password, role, id] : [username, role, id]; db.run(sql, params, function (err) { if (err) return res.status(500).json({ error: 'Erro ao atualizar usuário.' }); res.json({ success: true }); }); });\napp.delete('/api/usuarios/:id', requirePageLogin, requireAdmin, (req, res) => { const { id } = req.params; if (id == req.session.userId) return res.status(403).json({ error: 'Não é permitido excluir o próprio usuário logado.' }); db.run(\"DELETE FROM usuarios WHERE id = ?\", [id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir usuário.' }); if (this.changes === 0) return res.status(404).json({ error: \"Usuário não encontrado.\" }); res.json({ success: true }); }); });\n\n// APIs DE LOJAS \napp.get('/api/lojas', requirePageLogin, (req, res) => { let query = \"SELECT * FROM lojas\"; const params = []; if (req.query.status) { query += \" WHERE status = ?\"; params.push(req.query.status); } query += \" ORDER BY nome\"; db.all(query, params, (err, lojas) => { if (err) return res.status(500).json({ error: err.message }); res.json(lojas || []); }); });\napp.post('/api/lojas', requirePageLogin, (req, res) => { const { nome, status, funcao_especial, observacoes } = req.body; db.run('INSERT INTO lojas (nome, status, funcao_especial, observacoes) VALUES (?, ?, ?, ?)', [nome, status, funcao_especial, observacoes], function (err) { if (err) return res.status(500).json({ error: 'Erro ao criar loja. O nome já pode existir.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.put('/api/lojas/:id', requirePageLogin, (req, res) => { const { id } = req.params; const { nome, status, funcao_especial, observacoes } = req.body; db.run('UPDATE lojas SET nome = ?, status = ?, funcao_especial = ?, observacoes = ? WHERE id = ?', [nome, status, funcao_especial, observacoes, id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao atualizar loja.' }); res.json({ success: true }); }); });\napp.delete('/api/lojas/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM lojas WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir loja.' }); if (this.changes === 0) return res.status(404).json({ error: \"Loja não encontrada.\" }); res.json({ success: true }); }); });\n\n// APIs DE RELATÓRIOS\nconst processarRelatorio = (r) => { if (!r) return null; const vendas_monitoramento_total = (parseInt(r.vendas_monitoramento, 10) || 0) + (parseInt(r.quantidade_omni, 10) || 0); const tx_conversao_monitoramento = (parseInt(r.clientes_monitoramento, 10) || 0) > 0 ? (vendas_monitoramento_total / r.clientes_monitoramento) * 100 : 0; const tx_conversao_loja = (parseInt(r.clientes_loja, 10) || 0) > 0 ? ((parseInt(r.vendas_loja, 10) || 0) / r.clientes_loja) * 100 : 0; let vendedores_processados = []; try { const vendedores = JSON.parse(r.vendedores || '[]'); vendedores_processados = vendedores.map(v => ({ ...v, tx_conversao: (v.atendimentos > 0 ? ((v.vendas / v.atendimentos) * 100) : 0).toFixed(2) })); } catch (e) {} return { ...r, vendas_monitoramento_total, tx_conversao_monitoramento: tx_conversao_monitoramento.toFixed(2), tx_conversao_loja: tx_conversao_loja.toFixed(2), vendedores_processados }; };\napp.get('/api/relatorios', requirePageLogin, (req, res) => { const whereClauses = []; const params = []; if (req.query.loja) { whereClauses.push(\"loja = ?\"); params.push(req.query.loja); } if (req.query.data_inicio) { whereClauses.push(\"data >= ?\"); params.push(req.query.data_inicio); } if (req.query.data_fim) { whereClauses.push(\"data <= ?\"); params.push(req.query.data_fim); } const whereString = whereClauses.length > 0 ? \" WHERE \" + whereClauses.join(\" AND \") : \"\"; const sortOrder = req.query.sortOrder === 'asc' ? 'ASC' : 'DESC'; db.get(`SELECT COUNT(*) as total FROM relatorios` + whereString, params, (err, row) => { if (err) return res.status(500).json({ error: err.message }); const total = row ? row.total : 0; const limit = parseInt(req.query.limit) || 20; const offset = parseInt(req.query.offset) || 0; const query = `SELECT id, loja, data, total_vendas_dinheiro FROM relatorios` + whereString + ` ORDER BY id ${sortOrder} LIMIT ? OFFSET ?`; db.all(query, [...params, limit, offset], (err, relatorios) => { if (err) return res.status(500).json({ error: err.message }); res.json({ relatorios: relatorios || [], total }); }); }); });\napp.post('/api/relatorios', requirePageLogin, (req, res) => { const d = req.body; const sql = `INSERT INTO relatorios (loja, data, hora_abertura, hora_fechamento, gerente_entrada, gerente_saida, clientes_monitoramento, vendas_monitoramento, clientes_loja, vendas_loja, total_vendas_dinheiro, ticket_medio, pa, quantidade_trocas, quantidade_omni, quantidade_funcao_especial, vendedores, enviado_por_usuario, vendas_cartao, vendas_pix, vendas_dinheiro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`; const params = [ d.loja, d.data, d.hora_abertura, d.hora_fechamento, d.gerente_entrada, d.gerente_saida, parseInt(d.clientes_monitoramento, 10) || 0, parseInt(d.vendas_monitoramento, 10) || 0, parseInt(d.clientes_loja, 10) || 0, parseInt(d.vendas_loja, 10) || 0, parseFloat(String(d.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) || 0, d.ticket_medio || 'R$ 0,00', d.pa || '0.00', parseInt(d.quantidade_trocas, 10) || 0, parseInt(d.quantidade_omni, 10) || 0, parseInt(d.quantidade_funcao_especial, 10) || 0, d.vendedores || '[]', req.session.username, parseInt(d.vendas_cartao, 10) || 0, parseInt(d.vendas_pix, 10) || 0, parseInt(d.vendas_dinheiro, 10) || 0 ]; db.run(sql, params, function (err) { if (err) { console.error(\"Erro ao inserir relatório:\", err.message); return res.status(500).json({ error: 'Falha ao salvar relatório.' }); } res.status(201).json({ success: true, id: this.lastID }); }); });\napp.get('/api/relatorios/:id', requirePageLogin, (req, res) => { db.get(\"SELECT * FROM relatorios WHERE id = ?\", [req.params.id], (err, relatorio) => { if (err) return res.status(500).json({ error: err.message }); if (!relatorio) return res.status(404).json({ error: \"Relatório não encontrado\" }); res.json({ relatorio }); }); });\napp.put('/api/relatorios/:id', requirePageLogin, (req, res) => { const { id } = req.params; const d = req.body; const sql = `UPDATE relatorios SET loja=?, data=?, hora_abertura=?, hora_fechamento=?, gerente_entrada=?, gerente_saida=?, clientes_monitoramento=?, vendas_monitoramento=?, clientes_loja=?, vendas_loja=?, total_vendas_dinheiro=?, ticket_medio=?, pa=?, quantidade_trocas=?, quantidade_omni=?, quantidade_funcao_especial=?, vendedores=?, vendas_cartao=?, vendas_pix=?, vendas_dinheiro=? WHERE id=?`; const params = [ d.loja, d.data, d.hora_abertura, d.hora_fechamento, d.gerente_entrada, d.gerente_saida, parseInt(d.clientes_monitoramento, 10) || 0, parseInt(d.vendas_monitoramento, 10) || 0, parseInt(d.clientes_loja, 10) || 0, parseInt(d.vendas_loja, 10) || 0, parseFloat(String(d.total_vendas_dinheiro).replace(/[R$\\s.]/g, '').replace(',', '.')) || 0, d.ticket_medio || 'R$ 0,00', d.pa || '0.00', parseInt(d.quantidade_trocas, 10) || 0, parseInt(d.quantidade_omni, 10) || 0, parseInt(d.quantidade_funcao_especial, 10) || 0, d.vendedores || '[]', parseInt(d.vendas_cartao, 10) || 0, parseInt(d.vendas_pix, 10) || 0, parseInt(d.vendas_dinheiro, 10) || 0, id ]; db.run(sql, params, function (err) { if (err) { console.error(\"Erro ao atualizar relatório:\", err.message); return res.status(500).json({ error: 'Falha ao atualizar o relatório.' }); } if (this.changes === 0) return res.status(404).json({ error: \"Relatório não encontrado.\" }); res.json({ success: true, id: id }); }); });\napp.delete('/api/relatorios/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM relatorios WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: err.message }); if (this.changes === 0) return res.status(404).json({ error: \"Relatório não encontrado\" }); res.json({ success: true, message: \"Relatório excluído.\" }); }); });\nconst formatCurrency = (value) => { const numberValue = Number(value) || 0; return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(numberValue); };\nconst formatarRelatorioTexto = (r) => { const rp = processarRelatorio(r); if (!rp) return \"Erro ao processar relatório.\"; let equipeInfo = 'Nenhum vendedor registrado.\\n'; if (rp.vendedores_processados && rp.vendedores_processados.length > 0) { equipeInfo = rp.vendedores_processados.map(v => { return `${v.nome}: ${v.atendimentos} Atendimentos / ${v.vendas} Vendas / ${v.tx_conversao}%`; }).join('\\n'); } let funcaoEspecialInfo = ''; if (rp.funcao_especial === \"Omni\") { funcaoEspecialInfo = `Omni: ${rp.quantidade_omni || 0}\\n`; } else if (rp.funcao_especial === \"Busca por Assist. Tec.\") { funcaoEspecialInfo = `Busca por assist tec: ${rp.quantidade_funcao_especial || 0}\\n`; } const totalVendasQuantidade = (rp.vendas_cartao || 0) + (rp.vendas_pix || 0) + (rp.vendas_dinheiro || 0); const content = ` DATA: ${new Date(rp.data).toLocaleDateString('pt-BR', { timeZone: 'UTC' })} \\n\\nClientes: ${rp.clientes_monitoramento || 0}\\nBluve: ${rp.clientes_loja || 0}\\nVendas / Monitoramento: ${rp.vendas_monitoramento_total || 0}\\nVendas / Loja: ${rp.vendas_loja || 0}\\nTaxa de conversão da loja: ${rp.tx_conversao_loja || '0.00'}%\\nTaxa de conversão do monitoramento: ${rp.tx_conversao_monitoramento || '0.00'}%\\n\\nAbertura: ${rp.hora_abertura || '--:--'} - ${rp.hora_fechamento || '--:--'}\\nGerente: ${rp.gerente_entrada || '--:--'} - ${rp.gerente_saida || '--:--'}\\nVendas em Cartão: ${rp.vendas_cartao || 0}\\nVendas em Pix: ${rp.vendas_pix || 0}\\nVendas em Dinheiro: ${rp.vendas_dinheiro || 0}\\n${funcaoEspecialInfo}Total vendas: ${totalVendasQuantidade}\\nTroca/Devolução: ${rp.quantidade_trocas || 0}\\n\\nDesempenho Equipe:\\n\\n${equipeInfo}\\n\\nTM: ${rp.ticket_medio || 'R$ 0,00'} / P.A: ${rp.pa || '0.00'} / Total: ${formatCurrency(rp.total_vendas_dinheiro)} / `; return content.trim(); };\napp.get('/api/relatorios/:id/txt', requirePageLogin, (req, res) => { const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE r.id = ? `; db.get(sql, [req.params.id], (err, r) => { if (err || !r) return res.status(404).send('Relatório não encontrado'); res.setHeader('Content-disposition', `attachment; filename=relatorio_${r.loja.replace(/ /g, '_')}_${r.data}.txt`); res.setHeader('Content-type', 'text/plain; charset=utf-8'); res.send(formatarRelatorioTexto(r)); }); });\napp.get('/api/relatorios/:id/pdf', requirePageLogin, (req, res) => { const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE r.id = ? `; db.get(sql, [req.params.id], (err, r) => { if (err || !r) return res.status(404).send('Relatório não encontrado'); const doc = new PDFDocument({ margin: 50, size: 'A4' }); res.setHeader('Content-disposition', `inline; filename=\"relatorio_${r.loja.replace(/ /g, '_')}_${r.data}.pdf\"`); res.setHeader('Content-type', 'application/pdf'); doc.pipe(res); doc.fontSize(18).font('Helvetica-Bold').text(r.loja.toUpperCase(), { align: 'center' }).moveDown(1); doc.fontSize(11).font('Helvetica').text(formatarRelatorioTexto(r), { align: 'left' }); doc.end(); }); });\n\n\n// ROTA DE EXPORTAÇÃO PARA EXCEL \napp.get('/api/export/excel', requirePageLogin, async (req, res) => { const { month, year } = req.query; if (!month || !year) { return res.status(400).json({ error: 'Mês e ano são obrigatórios.' }); } const monthFormatted = month.toString().padStart(2, '0'); const sql = ` SELECT r.*, l.funcao_especial FROM relatorios r LEFT JOIN lojas l ON r.loja = l.nome WHERE strftime('%Y-%m', r.data) = ? ORDER BY r.loja, r.data `; db.all(sql, [`${year}-${monthFormatted}`], async (err, rows) => { if (err) { console.error(\"Erro ao buscar relatórios para Excel:\", err); return res.status(500).json({ error: 'Erro ao buscar relatórios.' }); } if (rows.length === 0) { return res.status(404).json({ error: 'Nenhum relatório encontrado para o período.' }); } const workbook = new ExcelJS.Workbook(); const safeParseFloat = (value) => { if (typeof value === 'number') { return value; } if (typeof value === 'string') { const cleaned = value.replace(/[R$\\s]/g, '').replace(/\\./g, '').replace(',', '.'); const num = parseFloat(cleaned); return isNaN(num) ? 0 : num; } return 0; }; const relatoriosPorLoja = rows.reduce((acc, row) => { const loja = row.loja; if (!acc[loja]) { acc[loja] = { funcao_especial: row.funcao_especial || 'Não definido', relatorios: [] }; } acc[loja].relatorios.push(processarRelatorio(row)); return acc; }, {}); for (const lojaNome in relatoriosPorLoja) { const lojaData = relatoriosPorLoja[lojaNome]; const worksheet = workbook.addWorksheet(lojaNome.substring(0, 30)); worksheet.mergeCells('A1:M1'); const tituloCell = worksheet.getCell('A1'); tituloCell.value = lojaNome.toUpperCase(); tituloCell.font = { name: 'Arial Black', size: 16, bold: true, color: { argb: 'FF44546A' } }; tituloCell.alignment = { vertical: 'middle', horizontal: 'center' }; worksheet.getRow(1).height = 30; const headers = [ 'DATA', 'BLUVE', 'VENDAS (L)', 'TX DE CONVERSÃO (L)', 'CLIENTES (M)', 'VENDAS (M)', 'TX DE CONVERSÃO (M)', 'P.A', 'TM', 'VALOR TOTAL', 'TROCAS' ]; let funcaoEspecialHeader = 'FUNÇÃO ESPECIAL'; if (lojaData.funcao_especial === 'Omni') { funcaoEspecialHeader = 'OMNI'; } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { funcaoEspecialHeader = 'BUSCA P/ ASSIST. TEC.'; } headers.push(funcaoEspecialHeader); headers.push('ENVIADO POR'); const headerRow = worksheet.getRow(3); headerRow.values = headers; headerRow.height = 35; headerRow.eachCell(cell => { cell.font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 10 }; cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true }; cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4472C4' } }; cell.border = { top: { style: 'thin', color: { argb: 'FFBFBFBF' } }, left: { style: 'thin', color: { argb: 'FFBFBFBF' } }, bottom: { style: 'thin', color: { argb: 'FFBFBFBF' } }, right: { style: 'thin', color: { argb: 'FFBFBFBF' } } }; }); lojaData.relatorios.forEach(r => { const rowData = [ new Date(r.data + 'T00:00:00'), parseInt(r.clientes_loja, 10) || 0, parseInt(r.vendas_loja, 10) || 0, parseFloat(r.tx_conversao_loja) / 100, parseInt(r.clientes_monitoramento, 10) || 0, parseInt(r.vendas_monitoramento_total, 10) || 0, parseFloat(r.tx_conversao_monitoramento) / 100, parseFloat(String(r.pa).replace(',', '.')) || 0, safeParseFloat(r.ticket_medio), r.total_vendas_dinheiro, parseInt(r.quantidade_trocas, 10) || 0 ]; if (lojaData.funcao_especial === 'Omni') { rowData.push(parseInt(r.quantidade_omni, 10) || 0); } else if (lojaData.funcao_especial === 'Busca por Assist. Tec.') { rowData.push(parseInt(r.quantidade_funcao_especial, 10) || 0); } else { rowData.push(0); } rowData.push(r.enviado_por_usuario || '-'); const row = worksheet.addRow(rowData); row.getCell(1).numFmt = 'DD/MM/YYYY'; row.getCell(4).numFmt = '0.00%'; row.getCell(7).numFmt = '0.00%'; row.getCell(8).numFmt = '0.00'; row.getCell(9).numFmt = 'R$ #,##0.00'; row.getCell(10).numFmt = 'R$ #,##0.00'; row.eachCell(cell => { cell.alignment = { vertical: 'middle', horizontal: 'center' }; }); }); worksheet.columns.forEach(column => { let maxLength = 0; column.eachCell({ includeEmpty: true }, cell => { const length = cell.value ? cell.value.toString().length : 10; if (length > maxLength) { maxLength = length; } }); column.width = Math.max(12, maxLength + 3); }); worksheet.getColumn(4).width = 20; worksheet.getColumn(7).width = 20; worksheet.getColumn(12).width = 22; } res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); res.setHeader('Content-Disposition', `attachment; filename=\"Relatorios_${year}-${monthFormatted}.xlsx\"`); await workbook.xlsx.write(res); res.end(); }); });\n\n// APIs DE DASHBOARD, DEMANDAS, BACKUP E RESTORE \napp.get('/api/dashboard-data', requirePageLogin, (req, res) => { let whereClauses = []; let params = []; if (req.query.loja && req.query.loja !== 'todas') { whereClauses.push('loja = ?'); params.push(req.query.loja); } if (req.query.data_inicio) { whereClauses.push('data >= ?'); params.push(req.query.data_inicio); } if (req.query.data_fim) { whereClauses.push('data <= ?'); params.push(req.query.data_fim); } const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : ''; const sql = `SELECT COALESCE(SUM(clientes_monitoramento),0) as total_clientes_monitoramento, COALESCE(SUM(vendas_monitoramento),0) as total_vendas_monitoramento, COALESCE(SUM(clientes_loja),0) as total_clientes_loja, COALESCE(SUM(vendas_loja),0) as total_vendas_loja, COALESCE(SUM(quantidade_omni),0) as total_omni FROM relatorios ${whereString}`; db.get(sql, params, (err, row) => { if (err) return res.status(500).json({ error: err.message }); const vendas_m_total = (row.total_vendas_monitoramento || 0) + (row.total_omni || 0); res.json({ ...row, tx_conversao_monitoramento: (row.total_clientes_monitoramento > 0 ? (vendas_m_total / row.total_clientes_monitoramento) * 100 : 0), tx_conversao_loja: (row.total_clientes_loja > 0 ? (row.total_vendas_loja / row.total_clientes_loja) * 100 : 0) }); }); });\napp.get('/api/ranking', requirePageLogin, (req, res) => { let whereClauses = []; let params = []; if (req.query.data_inicio) { whereClauses.push('r.data >= ?'); params.push(req.query.data_inicio); } if (req.query.data_fim) { whereClauses.push('r.data <= ?'); params.push(req.query.data_fim); } const joinCondition = whereClauses.length > 0 ? `AND ${whereClauses.join(' AND ')}` : ''; const sql = `SELECT l.nome as loja, COALESCE(SUM(r.clientes_loja), 0) as total_clientes_loja, COALESCE(SUM(r.vendas_loja), 0) as total_vendas_loja, COALESCE(SUM(r.clientes_monitoramento), 0) as total_clientes_monitoramento, COALESCE(SUM(r.vendas_monitoramento), 0) as total_vendas_monitoramento, COALESCE(SUM(r.quantidade_omni), 0) as total_omni FROM lojas l LEFT JOIN relatorios r ON l.nome = r.loja ${joinCondition} WHERE l.status = 'ativa' GROUP BY l.nome`; db.all(sql, params, (err, rows) => { if (err) return res.status(500).json({ error: err.message }); const ranking = rows.map(r => { const vendas_m_total = (r.total_vendas_monitoramento || 0) + (r.total_omni || 0); return { ...r, tx_loja: (r.total_clientes_loja > 0 ? (r.total_vendas_loja / r.total_clientes_loja) * 100 : 0), tx_monitoramento: (r.total_clientes_monitoramento > 0 ? (vendas_m_total / r.total_clientes_monitoramento) * 100 : 0) } }); res.json(ranking); }); });\napp.get('/api/dashboard/chart-data', requirePageLogin, (req, res) => { const { loja, data_inicio, data_fim } = req.query; let whereClauses = []; let params = []; if (loja && loja !== 'todas') { whereClauses.push('loja = ?'); params.push(loja); } if (data_inicio) { whereClauses.push('data >= ?'); params.push(data_inicio); } if (data_fim) { whereClauses.push('data <= ?'); params.push(data_fim); } if (whereClauses.length === 0) { const date = new Date(); date.setDate(date.getDate() - 30); const startDate = date.toISOString().slice(0, 10); whereClauses.push('data >= ?'); params.push(startDate); } const whereString = `WHERE ${whereClauses.join(' AND ')}`; const sql = `SELECT data, SUM(clientes_loja) as total_clientes_loja, SUM(vendas_loja) as total_vendas_loja, SUM(clientes_monitoramento) as total_clientes_monitoramento, SUM(vendas_monitoramento) as total_vendas_monitoramento, SUM(quantidade_omni) as total_omni FROM relatorios ${whereString} GROUP BY data ORDER BY data ASC`; db.all(sql, params, (err, rows) => { if (err) return res.status(500).json({ error: 'Erro ao buscar dados para o gráfico.' }); const labels = []; const txConversaoLoja = []; const txConversaoMonitoramento = []; rows.forEach(row => { labels.push(new Date(row.data).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', timeZone: 'UTC' })); const vendas_m_total = (row.total_vendas_monitoramento || 0) + (row.total_omni || 0); const tx_m = row.total_clientes_monitoramento > 0 ? (vendas_m_total / row.total_clientes_monitoramento) * 100 : 0; const tx_l = row.total_clientes_loja > 0 ? (row.total_vendas_loja / row.total_clientes_loja) * 100 : 0; txConversaoLoja.push(tx_l.toFixed(2)); txConversaoMonitoramento.push(tx_m.toFixed(2)); }); res.json({ labels, txConversaoLoja, txConversaoMonitoramento }); }); });\napp.post('/api/demandas', requirePageLogin, (req, res) => { const { loja_nome, descricao, tag } = req.body; db.run('INSERT INTO demandas (loja_nome, descricao, tag, criado_por_usuario) VALUES (?, ?, ?, ?)', [loja_nome, descricao, tag, req.session.username], function (err) { if (err) return res.status(500).json({ error: 'Falha ao salvar demanda.' }); res.status(201).json({ success: true, id: this.lastID }); }); });\napp.get('/api/demandas/:status', requirePageLogin, (req, res) => { const status = req.params.status === 'pendentes' ? 'pendente' : 'concluido'; db.all(`SELECT * FROM demandas WHERE status = ? ORDER BY criado_em DESC`, [status], (err, demandas) => { if (err) return res.status(500).json({ error: err.message }); res.json(demandas || []); }); });\napp.put('/api/demandas/:id/concluir', requirePageLogin, (req, res) => { db.run(\"UPDATE demandas SET status = 'concluido', concluido_por_usuario = ?, concluido_em = CURRENT_TIMESTAMP WHERE id = ?\", [req.session.username, req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao concluir demanda.' }); if (this.changes === 0) return res.status(404).json({ error: 'Demanda não encontrada.' }); res.json({ success: true }); }); });\napp.delete('/api/demandas/:id', requirePageLogin, (req, res) => { db.run(\"DELETE FROM demandas WHERE id = ?\", [req.params.id], function (err) { if (err) return res.status(500).json({ error: 'Erro ao excluir demanda.' }); if (this.changes === 0) return res.status(404).json({ error: \"Demanda não encontrada.\" }); res.json({ success: true }); }); });\napp.get('/api/backup/info', requirePageLogin, requireAdmin, (req, res) => {\n    try {\n        const stats = fs.statSync(DB_PATH);\n        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);\n        res.json({ sizeMB });\n    } catch (error) {\n        console.error(\"Erro ao obter informações do backup:\", error);\n        res.status(500).json({ error: 'Não foi possível obter informações do banco de dados.' });\n    }\n});\n\n// API para limpar tabelas específicas do banco de dados\napp.delete('/api/backup/clear', requirePageLogin, requireAdmin, (req, res) => {\n    db.serialize(() => {\n        db.run(\"DELETE FROM relatorios\", (err) => {\n            if (err) return res.status(500).json({ error: 'Erro ao limpar relatórios.' });\n        });\n        db.run(\"DELETE FROM demandas\", (err) => {\n            if (err) return res.status(500).json({ error: 'Erro ao limpar demandas.' });\n        });\n        res.json({ success: true, message: 'Relatórios e demandas foram limpos.' });\n    });\n});\napp.get('/api/backup/download', requirePageLogin, requireAdmin, (req, res) => { const date = new Date().toISOString().slice(0, 10); const fileName = `backup_reports_${date}.db`; res.download(DB_PATH, fileName, (err) => { if (err && !res.headersSent) { res.status(500).send(\"Não foi possível baixar o arquivo de backup.\"); } }); });\napp.post('/api/backup/restore', requirePageLogin, requireAdmin, upload.single('backupFile'), (req, res) => { if (!req.file) { return res.status(400).json({ error: \"Nenhum arquivo de backup foi enviado.\" }); } const backupBuffer = req.file.buffer; db.close((err) => { if (err) { console.error(\"Erro ao fechar o DB antes de restaurar:\", err.message); return res.status(500).json({ error: \"Não foi possível fechar a conexão com o banco de dados atual.\" }); } fs.writeFile(DB_PATH, backupBuffer, (err) => { if (err) { console.error(\"Falha ao escrever o arquivo de backup:\", err.message); db = new sqlite3.Database(DB_PATH); return res.status(500).json({ error: \"Falha ao substituir o arquivo de banco de dados.\" }); } db = new sqlite3.Database(DB_PATH, (err) => { if (err) { console.error(\"DB restaurado, mas falha ao reconectar:\", err.message); return res.status(500).json({ error: \"Banco de dados restaurado, mas falha ao reconectar. Reinicie o servidor.\" }); } console.log(\"Banco de dados restaurado e reconectado com sucesso.\"); res.json({ success: true, message: \"Banco de dados restaurado com sucesso. A página será recarregada.\" }); }); }); }); });\n\n// =================================================================\n// INICIALIZAÇÃO DO SERVIDOR\n// =================================================================\napp.listen(PORT, () => console.log(`Servidor rodando em http://localhost:${PORT}`));","size_bytes":37802},"monitoramento-lojas-varejo-main/README.md":{"content":"# Gerador de Relatórios para Lojas\n\nSistema simples para **geração e consulta de relatórios** de lojas, desenvolvido utilizando **HTML**, **CSS**, **JavaScript** e diversas APIs. O sistema permite gerar relatórios em formatos como **PDF** e **Excel**.\n\n## 🎯 Tecnologias Utilizadas\n\n- **HTML**\n- **CSS**\n- **JavaScript**\n- **APIs**:\n  - `express`: Framework para criação do servidor.\n  - `express-session`: Gerenciamento de sessões do usuário.\n  - `multer`: Upload de arquivos.\n  - `pdf-parse`: Leitura de arquivos PDF.\n  - `pdfkit`: Geração de arquivos PDF.\n  - `exceljs`: Criação de arquivos Excel.\n  - `pg`: Conexão com banco de dados PostgreSQL.\n\n## 🚀 Como Baixar e Rodar o Sistema\n\nSiga os passos abaixo para **baixar** e **rodar** o sistema localmente:\n\n### 1. Clonar o Repositório\n\nPrimeiro, clone o repositório para sua máquina local. Abra o terminal e execute o comando:\n\n```bash\ngit clone https://github.com/bggcreate/gerador-relatorios-lojas.git\n```\n### 2. Acessar o Diretório do Projeto\n\nDepois de clonado, entre no diretório do projeto:\n\n```bash\ncd gerador-relatorios-lojas\n```\n### 3. Instalar as Dependências\n\nEm seguida, instale as dependências necessárias com o comando:\n\n```bash\nnpm install\n```\n\n4. Iniciar o Servidor\n\nAgora, inicie o servidor local:\n\n```bash\nnpm start\n```\n5. Acessar o Sistema\n\nAbra o navegador e acesse o sistema localmente no seguinte endereço (ou vincule em alguma host/servidor):\n\n```bash\nhttp://localhost:3000\n```\n\n\n---\n\nAgora é só **copiar e colar**. Todo o texto está pronto para ser usado diretamente no seu repositório ou onde você precisar!\n","size_bytes":1619},"README.md":{"content":"# 🛍️ Sistema de Monitoramento de Dados - Lojas de Varejo\n\n> ⚠️ **Este projeto foi desenvolvido para fins de aprendizado.**  \n> Ele simula um sistema real de monitoramento de lojas, focado em conceitos de integração, análise de dados e relatórios automatizados.\n\n---\n\n## 🔍 O que o sistema faz?\n\nEste sistema permite **acompanhar e comparar os dados informados por lojas de varejo** com os dados coletados pela equipe de monitoramento, usando fontes internas e sistemas terceiros como **Bluve**.\n\n### Funcionalidades principais:\n\n- 📊 **Comparação de dados internos vs. dados da loja**\n- 🧾 **Geração de relatórios em PDF**\n- 📝 **Exportação em .TXT** (para envio rápido por e-mail ou chat)\n- 📊 **Exportação em Excel (.xlsx)** com dados completos\n- 📈 **Análises mensais de desempenho**\n- 🔍 **Consulta por loja ou análise geral de taxa de conversão**\n- 🏬 **Cadastro de múltiplas lojas**\n- 📋 **Criação e acompanhamento de demandas internas**\n- 📚 **Histórico completo de relatórios gerados**\n\n---\n\n## 🛠️ Tecnologias Utilizadas\n\n![Languages](https://img.shields.io/badge/JavaScript-74.3%25-yellow?style=flat-square)\n![HTML](https://img.shields.io/badge/HTML-20.9%25-orange?style=flat-square)\n![CSS](https://img.shields.io/badge/CSS-4.8%25-purple?style=flat-square)\n\n- **JavaScript** (principal lógica do sistema)\n- **HTML** (estrutura da aplicação)\n- **CSS** (estilização com variáveis e responsividade)\n- **Bootstrap** (componentes e layout)\n- **Fetch API** (integração com backend e APIs externas)\n- Simulações de API: `fetch('/api/lojas')`, `fetch('/api/relatorios')` etc.\n\n---\n\n## 🧪 Objetivo Educacional\n\nEste projeto tem como foco:\n\n- Praticar organização e estruturação de código front-end\n- Simular integração com APIs reais\n- Gerar relatórios automatizados\n- Implementar lógica de negócio baseada em análise comparativa\n- Aprender boas práticas de interface e usabilidade\n\n","size_bytes":1963}},"version":2}