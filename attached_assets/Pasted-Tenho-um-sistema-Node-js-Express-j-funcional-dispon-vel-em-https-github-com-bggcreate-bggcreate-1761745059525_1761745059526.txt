Tenho um sistema Node.js/Express já funcional, disponível em: https://github.com/bggcreate/bggcreate

Agora quero implementar **controle de acesso por cargos (roles)** para permitir que diferentes usuários acessem funcionalidades e informações específicas conforme o seu cargo.

Cargos do sistema:
1. Gerente
2. Consultor
3. Monitoramento
4. Admin
5. Dev

Objetivo:
Cada tipo de usuário deve ter acesso restrito ou ampliado às abas e dados do sistema, conforme descrito abaixo. O controle deve ser feito tanto na interface (frontend) quanto no backend (verificação de permissões).

------------------------------------------
REGRAS DE ACESSO E VISUALIZAÇÃO:
------------------------------------------

1. **Gerente**
   - Pode acessar:
     - Aba **Dashboard**: visualizar apenas o desempenho da loja onde foi cadastrado como gerente.
     - Aba **Consulta**: visualizar relatórios apenas da sua loja.
     - Aba **Lojas**: poderá cadastrar vendedores (essa funcionalidade será adicionada na próxima etapa).
     - Aba **Demandas**: poderá anexar demandas para si mesmo e visualizar demandas enviadas por seus consultores.
   - Não pode acessar: aba Novo Relatório, outras lojas, ou dados globais.

2. **Consultor**
   - Pode acessar:
     - Aba **Dashboard**: visualizar desempenho e comparativos apenas das lojas em que está cadastrado como consultor (pode ser uma ou várias).
     - Aba **Consulta**: visualizar relatórios apenas das lojas onde atua como consultor.
     - Aba **Demandas**: visualizar e gerenciar demandas relacionadas às suas lojas.
   - Não pode acessar: abas de criação global de relatórios ou dados de outras lojas que não gerencia.

3. **Monitoramento**
   - Pode acessar:
     - Aba **Dashboard**: desempenho de todas as lojas.
     - Aba **Consulta**: relatórios de todas as lojas.
     - Aba **Novo Relatório**: pode criar novos relatórios.
     - Aba **Lojas**: pode visualizar todas as lojas.
     - Aba **Demandas**: pode visualizar e gerenciar demandas de todas as lojas.
   - Não pode alterar configurações administrativas ou logs de sistema.

4. **Admin**
   - Acesso total a todas as abas e funcionalidades do sistema.
   - Pode visualizar, editar, criar e excluir dados de qualquer loja.
   - Pode gerenciar usuários, cargos e permissões.
   - Pode acessar e exportar relatórios globais.

5. **Dev**
   - Acesso total, igual ao Admin.
   - Além disso:
     - Acesso à **aba Log**, com métricas internas do sistema (logs de erros, desempenho e eventos).
     - Acesso direto ao banco de dados (para fins de manutenção e auditoria).
   - Não há restrições de permissão.

------------------------------------------
IMPLEMENTAÇÃO TÉCNICA:
------------------------------------------

1. Criar um campo `role` no cadastro de usuários com os valores possíveis:
   ["gerente", "consultor", "monitoramento", "admin", "dev"]

2. Implementar middleware de autenticação e autorização:
   - Verificar login e role do usuário.
   - Restringir acesso a rotas conforme o cargo.

3. No frontend:
   - Ocultar ou exibir abas do menu conforme o cargo logado.
   - Exemplo: se for “gerente”, mostrar apenas Dashboard, Consulta, Lojas, Demandas.

4. No backend:
   - Filtrar os dados conforme o cargo:
     - Gerente: filtrar apenas a loja vinculada ao usuário.
     - Consultor: filtrar apenas lojas que o usuário consultor gerencia.
     - Monitoramento/Admin/Dev: sem filtro de loja.
   - Rotas devem verificar a role antes de retornar dados.

5. Criar estrutura modular:
   - Pasta `middleware/roleAuth.js` para autenticação e verificação de permissões.
   - Atualizar rotas e views para respeitar o controle de acesso.
   - Caso o usuário tente acessar uma aba sem permissão, redirecionar para página “Acesso Negado” (403).

------------------------------------------
ENTREGÁVEIS:
------------------------------------------

- Middleware `roleAuth.js` com verificação de permissões por cargo.
- Ajustes nas rotas existentes (dashboard, consultas, novo relatório, lojas, demandas, logs).
- Ajustes no menu lateral/topo para exibir abas conforme cargo.
- Filtro de dados no backend para respeitar o escopo (loja vinculada ao usuário).
- Página simples de “Acesso Negado”.
- Documentação explicando como adicionar novos cargos e permissões no futuro.

------------------------------------------
Resumo:
------------------------------------------

O sistema deve suportar múltiplos cargos, cada um com acesso controlado às abas e dados.  
A lógica deve ser centralizada (middleware) e refletida também na interface (menu dinâmico).  
O Dev e o Admin têm acesso total; os demais cargos têm acesso restrito conforme suas lojas e funções.
